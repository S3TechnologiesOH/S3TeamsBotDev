import { CWLogger, RequestOptions, RetryOptions } from './types';
import { CWAOptions } from './AutomateAPI';
import { components } from './AutomateTypes';
import { PaginationApiMethod, PaginationOptions } from './BaseAPI';
declare type schemas = components['schemas'];
declare type TokenResult = schemas['Automate.Api.Domain.Contracts.Security.TokenResult'];
export declare const DEFAULTS: {
    entryPoint: string;
    retryOptions: RetryOptions;
    logger: (debug: boolean) => CWLogger;
};
export interface AutomateConfig extends CWAOptions {
    logger: CWLogger;
    retry: boolean;
    retryOptions: RetryOptions;
}
/**
 * @internal
 */
export default class Automate {
    config: AutomateConfig;
    private instance;
    /**
     * @public
     */
    request: (args: RequestOptions) => Promise<any>;
    /**
     * @public
     * Pass the function to be paginated first, then arguments to paginate itself,
     * then any additional arguments to the function in order
     *
     * @example
     * ```javascript
     *  cwa.paginate(cwa.ComputersAPI.getComputerList, {startPage: 1, pageSize: 1000}, {conditions: 'inactiveFlag = false'})
     *
     * ```
     */
    paginate: (apiMethod: PaginationApiMethod, paginateArgs: PaginationOptions, ...methodArgs: Record<string, unknown>[]) => Promise<unknown[]>;
    constructor({ serverUrl, username, password, twoFactorPasscode, token, clientId, timeout, retry, retryOptions, logger, debug, }: CWAOptions);
    get token(): string | undefined;
    set token(token: string | undefined);
    static getToken({ username, password, twoFactorPasscode, serverUrl, }: {
        username?: string;
        password?: string;
        twoFactorPasscode?: string;
        serverUrl: string;
    }): Promise<TokenResult>;
    verifyToken(): Promise<boolean>;
    /**
     * @internal
     */
    private api;
    private createAxiosInstance;
}
export {};
//# sourceMappingURL=Automate.d.ts.map