import Automate from '../Automate';
import { components } from '../AutomateTypes';
import { CommonParameters, CWAOptions } from '../AutomateAPI';
import { NoContentResponse } from '../types';
declare type schemas = components['schemas'];
declare type requestBodies = components['requestBodies'];
/** {@link ClientPermissions_PutUserClassPermissionsPermissions} */
export declare type ClientPermissions_PutUserClassPermissionsPermissions = requestBodies['ClientPermissions_PutUserClassPermissionsPermissions'];
/** {@link LabTechModelsClient} */
export declare type LabTechModelsClient = schemas['LabTech.Models.Client'];
/** {@link LabTechModelsDocument} */
export declare type LabTechModelsDocument = schemas['LabTech.Models.Document'];
/** {@link LabTechModelsLocation} */
export declare type LabTechModelsLocation = schemas['LabTech.Models.Location'];
/** {@link LabTechModelsManagedLicense} */
export declare type LabTechModelsManagedLicense = schemas['LabTech.Models.ManagedLicense'];
/** {@link LabTechModelsProductKey} */
export declare type LabTechModelsProductKey = schemas['LabTech.Models.ProductKey'];
/**
 * @module ClientsAPI
 */
/**
 * Clients module
 * @public
 */
export declare class ClientsAPI extends Automate {
    constructor(props: CWAOptions);
    getClientList(params?: CommonParameters): Promise<Array<LabTechModelsClient>>;
    postClient(Client: LabTechModelsClient): Promise<LabTechModelsClient>;
    getAllDocuments(clientId: number, params?: CommonParameters): Promise<Array<LabTechModelsDocument>>;
    postDocument(clientId: number, Document: LabTechModelsDocument): Promise<LabTechModelsDocument>;
    getManagedLicenses(clientId: number, params?: CommonParameters): Promise<Array<LabTechModelsManagedLicense>>;
    postManagedLicense(clientId: number, ManagedLicense: LabTechModelsManagedLicense): Promise<LabTechModelsManagedLicense>;
    getUserClassPermissions(clientId: number, userClassId: number, params?: CommonParameters): Promise<Array<string>>;
    putUserClassPermissions(clientId: number, userClassId: number, PutUserClassPermissionsPermissions: ClientPermissions_PutUserClassPermissionsPermissions): Promise<Array<string>>;
    postUserClassPermissions(clientId: number, userClassId: number, PutUserClassPermissionsPermissions: ClientPermissions_PutUserClassPermissionsPermissions): Promise<Array<string>>;
    deleteUserClassPermissions(clientId: number, userClassId: number): Promise<NoContentResponse>;
    getProductKeys(clientId: number, params?: CommonParameters): Promise<Array<LabTechModelsProductKey>>;
    postProductKey(clientId: number, ProductKey: LabTechModelsProductKey): Promise<LabTechModelsProductKey>;
    getLocationList(params?: CommonParameters): Promise<Array<LabTechModelsLocation>>;
    postLocation(Location: LabTechModelsLocation): Promise<LabTechModelsLocation>;
}
export {};
//# sourceMappingURL=ClientsAPI.d.ts.map