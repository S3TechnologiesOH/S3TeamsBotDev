import Automate from '../Automate';
import { components } from '../AutomateTypes';
import { CommonParameters, CWAOptions } from '../AutomateAPI';
import { NoContentResponse } from '../types';
declare type schemas = components['schemas'];
declare type requestBodies = components['requestBodies'];
/** {@link LabTechRESTApiModelsPatchOperationArray} */
export declare type LabTechRESTApiModelsPatchOperationArray = requestBodies['LabTech.RESTApi.Models.PatchOperationArray'];
/** {@link LabTechRESTApiRpcContractsNewProbeConfiguration} */
export declare type LabTechRESTApiRpcContractsNewProbeConfiguration = schemas['LabTech.RESTApi.RpcContracts.NewProbeConfiguration'];
/** {@link LabTechRepositoriesMySQLDomainModelsNetworkProbeEncryptionMethod} */
export declare type LabTechRepositoriesMySQLDomainModelsNetworkProbeEncryptionMethod = schemas['LabTech.Repositories.MySQL.Domain.Models.NetworkProbe.EncryptionMethod'];
/** {@link LabTechRepositoriesMySQLDomainModelsNetworkProbeHashMethod} */
export declare type LabTechRepositoriesMySQLDomainModelsNetworkProbeHashMethod = schemas['LabTech.Repositories.MySQL.Domain.Models.NetworkProbe.HashMethod'];
/** {@link LabTechRepositoriesMySQLDomainModelsNetworkProbeProbeConfiguration} */
export declare type LabTechRepositoriesMySQLDomainModelsNetworkProbeProbeConfiguration = schemas['LabTech.Repositories.MySQL.Domain.Models.NetworkProbe.ProbeConfiguration'];
/** {@link LabTechRepositoriesMySQLDomainModelsNetworkProbeProbeConfigurationCredentials} */
export declare type LabTechRepositoriesMySQLDomainModelsNetworkProbeProbeConfigurationCredentials = schemas['LabTech.Repositories.MySQL.Domain.Models.NetworkProbe.ProbeConfigurationCredentials'];
/** {@link LabTechRepositoriesMySQLDomainModelsNetworkProbeProbeSnmpConfiguration} */
export declare type LabTechRepositoriesMySQLDomainModelsNetworkProbeProbeSnmpConfiguration = schemas['LabTech.Repositories.MySQL.Domain.Models.NetworkProbe.ProbeSnmpConfiguration'];
/** {@link LabTechRepositoriesMySQLDomainModelsNetworkProbeScanFrequency} */
export declare type LabTechRepositoriesMySQLDomainModelsNetworkProbeScanFrequency = schemas['LabTech.Repositories.MySQL.Domain.Models.NetworkProbe.ScanFrequency'];
/** {@link LabTechRepositoriesMySQLDomainModelsNetworkProbeStatusScanNetworkPortOption} */
export declare type LabTechRepositoriesMySQLDomainModelsNetworkProbeStatusScanNetworkPortOption = schemas['LabTech.Repositories.MySQL.Domain.Models.NetworkProbe.StatusScanNetworkPortOption'];
/** {@link LabTechRepositoriesMySQLDomainModelsProbeEvent} */
export declare type LabTechRepositoriesMySQLDomainModelsProbeEvent = schemas['LabTech.Repositories.MySQL.Domain.Models.ProbeEvent'];
/** {@link LabTechRepositoriesMySQLDomainModelsProbeEventLevel} */
export declare type LabTechRepositoriesMySQLDomainModelsProbeEventLevel = schemas['LabTech.Repositories.MySQL.Domain.Models.ProbeEventLevel'];
/**
 * @module LocationsAPI
 */
/**
 * Locations module
 * @public
 */
export declare class LocationsAPI extends Automate {
    constructor(props: CWAOptions);
    getProbeConfiguration(locationId: number, params?: CommonParameters): Promise<LabTechRepositoriesMySQLDomainModelsNetworkProbeProbeConfiguration>;
    postProbeConfiguration(locationId: number, NewProbeConfiguration: LabTechRESTApiRpcContractsNewProbeConfiguration): Promise<LabTechRepositoriesMySQLDomainModelsNetworkProbeProbeConfiguration>;
    deleteProbeConfiguration(locationId: number): Promise<NoContentResponse>;
    patchProbeConfiguration(locationId: number, PatchOperationArray: LabTechRESTApiModelsPatchOperationArray): Promise<LabTechRepositoriesMySQLDomainModelsNetworkProbeProbeConfiguration>;
    upgradeProbe(locationId: number, params?: CommonParameters): Promise<NoContentResponse>;
    getProbeEventLevelList(params?: CommonParameters): Promise<Array<LabTechRepositoriesMySQLDomainModelsProbeEventLevel>>;
    getScanFrequencyList(params?: CommonParameters): Promise<Array<LabTechRepositoriesMySQLDomainModelsNetworkProbeScanFrequency>>;
    getSnmpEncryptionMethodList(params?: CommonParameters): Promise<Array<LabTechRepositoriesMySQLDomainModelsNetworkProbeEncryptionMethod>>;
    getSnmpHashMethodList(params?: CommonParameters): Promise<Array<LabTechRepositoriesMySQLDomainModelsNetworkProbeHashMethod>>;
    getStatusScanNetworkPortOptionList(params?: CommonParameters): Promise<Array<LabTechRepositoriesMySQLDomainModelsNetworkProbeStatusScanNetworkPortOption>>;
    getAgentPushCredentialsList(probeConfigurationId: number, params?: CommonParameters): Promise<Array<LabTechRepositoriesMySQLDomainModelsNetworkProbeProbeConfigurationCredentials>>;
    putAgentPushCredentialsList(probeConfigurationId: number, labTechRepositoriesMySQLDomainModelsNetworkProbeProbeConfigurationCredentialss: Array<LabTechRepositoriesMySQLDomainModelsNetworkProbeProbeConfigurationCredentials>): Promise<Array<LabTechRepositoriesMySQLDomainModelsNetworkProbeProbeConfigurationCredentials>>;
    deleteAgentPushCredentials(probeConfigurationId: number): Promise<NoContentResponse>;
    getProbeSnmpConfigurationAsync(probeConfigurationId: number, params?: CommonParameters): Promise<LabTechRepositoriesMySQLDomainModelsNetworkProbeProbeSnmpConfiguration>;
    patchProbeSnmpConfigurationAsync(probeConfigurationId: number, PatchOperationArray: LabTechRESTApiModelsPatchOperationArray): Promise<LabTechRepositoriesMySQLDomainModelsNetworkProbeProbeSnmpConfiguration>;
    enableProbe(computerId: number): Promise<LabTechRepositoriesMySQLDomainModelsNetworkProbeProbeConfiguration>;
    getProbeEventList(params?: CommonParameters): Promise<Array<LabTechRepositoriesMySQLDomainModelsProbeEvent>>;
}
export {};
//# sourceMappingURL=LocationsAPI.d.ts.map