import Automate from '../Automate';
import { components } from '../AutomateTypes';
import { CommonParameters, CWAOptions } from '../AutomateAPI';
declare type schemas = components['schemas'];
/** {@link LabTechModelsSensorCheck} */
export declare type LabTechModelsSensorCheck = schemas['LabTech.Models.SensorCheck'];
/** {@link LabTechRepositoriesMySQLDomainModelsMonitorDataCollectionSettings} */
export declare type LabTechRepositoriesMySQLDomainModelsMonitorDataCollectionSettings = schemas['LabTech.Repositories.MySQL.Domain.Models.MonitorDataCollectionSettings'];
/**
 * @module MonitorsAPI
 */
/**
 * Monitors module
 * @public
 */
export declare class MonitorsAPI extends Automate {
    constructor(props: CWAOptions);
    getInternalMonitorResultList(params?: CommonParameters): Promise<object>;
    getMonitorHistoryList(params?: CommonParameters): Promise<object>;
    getDailyCollectedData(monitorId: number, params?: CommonParameters): Promise<object>;
    getMonthlyCollectedData(monitorId: number, params?: CommonParameters): Promise<object>;
    getWeeklyCollectedData(monitorId: number, params?: CommonParameters): Promise<object>;
    getYearlyCollectedData(monitorId: number, params?: CommonParameters): Promise<object>;
    getDataCollectionSettingsForMonitorAsync(monitorId: number, params?: CommonParameters): Promise<LabTechRepositoriesMySQLDomainModelsMonitorDataCollectionSettings>;
    getMonitorStatisticsList(params?: CommonParameters): Promise<object>;
    getSensorCheckList(params?: CommonParameters): Promise<Array<LabTechModelsSensorCheck>>;
}
export {};
//# sourceMappingURL=MonitorsAPI.d.ts.map