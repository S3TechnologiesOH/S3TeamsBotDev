import Automate from '../Automate';
import { components } from '../AutomateTypes';
import { CommonParameters, CWAOptions } from '../AutomateAPI';
import { NoContentResponse } from '../types';
declare type schemas = components['schemas'];
declare type requestBodies = components['requestBodies'];
/** {@link AutomateApiDomainContractsPatchingGroupPatchingPolicy} */
export declare type AutomateApiDomainContractsPatchingGroupPatchingPolicy = schemas['Automate.Api.Domain.Contracts.Patching.GroupPatchingPolicy'];
/** {@link LabTechModelsPatchActionArgs} */
export declare type LabTechModelsPatchActionArgs = requestBodies['LabTech.Models.PatchActionArgs'];
/**
 * @module PatchingAPI
 */
/**
 * Patching module
 * @public
 */
export declare class PatchingAPI extends Automate {
    constructor(props: CWAOptions);
    getApprovalPolicyListAsync(params?: CommonParameters): Promise<object>;
    getGroupPatchingPolicyListAsync(params?: CommonParameters): Promise<Array<AutomateApiDomainContractsPatchingGroupPatchingPolicy>>;
    getMicrosoftUpdatePolicyListAsync(params?: CommonParameters): Promise<object>;
    deployAllApproved(PatchActionArgs: LabTechModelsPatchActionArgs): Promise<NoContentResponse>;
    deployAllSecurity(PatchActionArgs: LabTechModelsPatchActionArgs): Promise<NoContentResponse>;
    reattemptFailed(PatchActionArgs: LabTechModelsPatchActionArgs): Promise<NoContentResponse>;
    setToPilotStage(PatchActionArgs: LabTechModelsPatchActionArgs): Promise<NoContentResponse>;
    setToProductionStage(PatchActionArgs: LabTechModelsPatchActionArgs): Promise<NoContentResponse>;
    setToTestStage(PatchActionArgs: LabTechModelsPatchActionArgs): Promise<NoContentResponse>;
    getPatchHistoryListAsync(params?: CommonParameters): Promise<object>;
    getThirdPartyUpdatePolicyListAsync(params?: CommonParameters): Promise<object>;
}
export {};
//# sourceMappingURL=PatchingAPI.d.ts.map