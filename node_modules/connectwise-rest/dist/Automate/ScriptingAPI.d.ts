import Automate from '../Automate';
import { components } from '../AutomateTypes';
import { CommonParameters, CWAOptions } from '../AutomateAPI';
import { NoContentResponse } from '../types';
declare type schemas = components['schemas'];
declare type requestBodies = components['requestBodies'];
/** {@link AutomateApiDomainContractsScriptsRunningScriptsRunningScript} */
export declare type AutomateApiDomainContractsScriptsRunningScriptsRunningScript = schemas['Automate.Api.Domain.Contracts.Scripts.RunningScripts.RunningScript'];
/** {@link AutomateApiDomainContractsScriptsScheduledScript} */
export declare type AutomateApiDomainContractsScriptsScheduledScript = schemas['Automate.Api.Domain.Contracts.Scripts.ScheduledScript'];
/** {@link LabTechModelsScript} */
export declare type LabTechModelsScript = schemas['LabTech.Models.Script'];
/** {@link LabTechModelsScriptFolder} */
export declare type LabTechModelsScriptFolder = schemas['LabTech.Models.ScriptFolder'];
/** {@link LabTechRESTApiModelsPatchOperationArray} */
export declare type LabTechRESTApiModelsPatchOperationArray = requestBodies['LabTech.RESTApi.Models.PatchOperationArray'];
/**
 * @module ScriptingAPI
 */
/**
 * Scripting module
 * @public
 */
export declare class ScriptingAPI extends Automate {
    constructor(props: CWAOptions);
    getScriptFolderList(params?: CommonParameters): Promise<Array<LabTechModelsScriptFolder>>;
    postScriptFolder(ScriptFolder: LabTechModelsScriptFolder): Promise<LabTechModelsScriptFolder>;
    getScriptFolderHierarchy(): Promise<Array<LabTechModelsScriptFolder>>;
    getScriptFolder(entityId: string, params?: CommonParameters): Promise<LabTechModelsScriptFolder>;
    deleteScriptFolder(entityId: string): Promise<NoContentResponse>;
    patchScriptFolder(entityId: string, PatchOperationArray: LabTechRESTApiModelsPatchOperationArray): Promise<LabTechModelsScriptFolder>;
    getRunningScripts(params?: CommonParameters): Promise<Array<AutomateApiDomainContractsScriptsRunningScriptsRunningScript>>;
    getScheduledScripts(params?: CommonParameters): Promise<Array<AutomateApiDomainContractsScriptsScheduledScript>>;
    deleteScriptSchedule(scheduledId: number): Promise<NoContentResponse>;
    patchScriptSchedule(scheduledId: number, PatchOperationArray: LabTechRESTApiModelsPatchOperationArray): Promise<AutomateApiDomainContractsScriptsScheduledScript>;
    getScriptList(params?: CommonParameters): Promise<Array<LabTechModelsScript>>;
    postScript(Script: LabTechModelsScript): Promise<LabTechModelsScript>;
    getScriptCopyAsync(scriptId: number): Promise<number>;
}
export {};
//# sourceMappingURL=ScriptingAPI.d.ts.map