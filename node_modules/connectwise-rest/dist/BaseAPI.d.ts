import { RequestOptions } from './types';
import Manage, { ManageConfig } from './Manage';
import Automate, { AutomateConfig } from './Automate';
/**
 * curried request function
 * @internal
 */
export declare const makeRequest: ({ config, api, thisObj, }: {
    config: ManageConfig | AutomateConfig;
    api: (args: RequestOptions) => Promise<unknown>;
    thisObj: InstanceType<typeof Automate | typeof Manage>;
}) => (args: RequestOptions) => Promise<unknown>;
export interface PaginationConfig {
    thisObj: InstanceType<typeof Automate | typeof Manage>;
}
export declare type PaginationApiMethod = Function;
export declare type PaginationOptions = {
    pageSize?: number;
    startPage?: number;
};
/**
 * curried paginate function
 * @internal
 */
export declare const makePaginate: ({ thisObj }: PaginationConfig) => (apiMethod: PaginationApiMethod, paginateArgs?: PaginationOptions, ...methodArgs: Record<string, unknown>[]) => Promise<unknown[]>;
//# sourceMappingURL=BaseAPI.d.ts.map