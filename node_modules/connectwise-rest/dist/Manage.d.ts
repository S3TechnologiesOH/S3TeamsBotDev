import { PaginationOptions, PaginationApiMethod } from './BaseAPI';
import type { CWMOptions } from './ManageAPI';
import { CWLogger, RequestOptions, RetryOptions } from './types';
/**
 * DEFAULTS variable.
 * @type {Object}
 * @property {RetryOptions} retryOptions - Retry options for API requests.
 * @property {string} apiPath - The endpoint path for API requests.
 * @property {(debug: boolean) => CWLogger} logger - Logger function that takes a boolean flag to enable debug mode.
 */
export declare const DEFAULTS: {
    retryOptions: RetryOptions;
    apiPath: string;
    logger: (debug: boolean) => CWLogger;
};
/**
 * Represents a class for managing configuration options.
 *
 * @interface
 * @extends CWMOptions
 */
export interface ManageConfig extends CWMOptions {
    authorization: string;
    entryPoint: string;
    timeout: number;
    apiVersion: string;
    retry: boolean;
    retryOptions: RetryOptions;
    logger: CWLogger;
    debug: boolean;
}
/**
 * @internal
 */
export default class Manage {
    config: ManageConfig;
    private instance;
    /**
     * @public
     */
    request: (args: RequestOptions) => Promise<any>;
    /**
     * @public
     * Pass the function to be paginated first, then arguments to paginate itself,
     * then any additional arguments to the function in order
     *
     * @example
     * ```javascript
     *  cwm.paginate(cwm.FinanceAPI.getFinanceAgreements, {startPage: 1, pageSize: 500}, {conditions: 'inactiveFlag = false'})
     *
     * ```
     */
    paginate: (apiMethod: PaginationApiMethod, paginateArgs: PaginationOptions, ...methodArgs: Record<string, unknown>[]) => Promise<unknown[]>;
    constructor({ companyId, publicKey, privateKey, companyUrl, clientId, entryPoint, timeout, apiVersion, retry, retryOptions, logger, debug, }: CWMOptions);
    /**
     * @internal
     */
    private api;
}
//# sourceMappingURL=Manage.d.ts.map