"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DEFAULTS = void 0;
const axios_1 = __importDefault(require("axios"));
const BaseAPI_1 = require("./BaseAPI");
const CW_MANAGE_DEBUG = !!process.env.CW_MANAGE_DEBUG;
/**
 * DEFAULTS variable.
 * @type {Object}
 * @property {RetryOptions} retryOptions - Retry options for API requests.
 * @property {string} apiPath - The endpoint path for API requests.
 * @property {(debug: boolean) => CWLogger} logger - Logger function that takes a boolean flag to enable debug mode.
 */
exports.DEFAULTS = {
    apiPath: '/apis/3.0',
    retryOptions: {
        retries: 4,
        minTimeout: 50,
        maxTimeout: 20000,
        randomize: true,
    },
    logger: (debug = false) => (level, text, meta) => {
        switch (level) {
            case 'error':
                console.error(`${level}: ${text}`, meta);
                return;
            case 'warn':
                if (debug) {
                    console.log(`${level}: ${text}`, meta);
                }
                return;
            case 'info': {
                if (debug) {
                    console.info(`${level}: ${text}`, meta);
                }
                return;
            }
            default:
                console.log(`${level}: ${text}`, meta);
                return;
        }
    },
};
/**
 * @internal
 */
class Manage {
    constructor({ companyId, publicKey, privateKey, companyUrl, clientId, entryPoint = 'v4_6_release', timeout = 20000, apiVersion = '2021.1', retry = false, retryOptions = exports.DEFAULTS.retryOptions, logger, debug = false, }) {
        Object.defineProperty(this, "config", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "instance", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * @public
         */
        Object.defineProperty(this, "request", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * @public
         * Pass the function to be paginated first, then arguments to paginate itself,
         * then any additional arguments to the function in order
         *
         * @example
         * ```javascript
         *  cwm.paginate(cwm.FinanceAPI.getFinanceAgreements, {startPage: 1, pageSize: 500}, {conditions: 'inactiveFlag = false'})
         *
         * ```
         */
        Object.defineProperty(this, "paginate", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        if (!companyId || !publicKey || !privateKey || !companyUrl || !clientId) {
            throw new Error('Missing options [companyId, publicKey, privateKey, companyUrl, clientId]');
        }
        this.config = {
            companyId,
            publicKey,
            privateKey,
            companyUrl,
            clientId,
            entryPoint,
            apiVersion,
            retry,
            timeout,
            logger: logger ? logger : exports.DEFAULTS.logger(debug || CW_MANAGE_DEBUG),
            debug: debug || CW_MANAGE_DEBUG,
            retryOptions: {
                ...exports.DEFAULTS.retryOptions,
                ...retryOptions,
            },
            authorization: `Basic ${Buffer.from(`${companyId}+${publicKey}:${privateKey}`).toString('base64')}`,
        };
        this.instance = axios_1.default.create({
            timeout,
            baseURL: `https://${companyUrl}/${entryPoint}${exports.DEFAULTS.apiPath}`,
            headers: {
                Accept: `application/vnd.connectwise.com+json; version=${apiVersion}, application/json`,
                'Cache-Control': 'no-cache',
                Authorization: this.config.authorization,
                clientId: this.config.clientId,
            },
        });
        this.instance.interceptors.request.use((config) => {
            if (config.url &&
                config.headers &&
                config.method === 'get' &&
                config.headers.Accept &&
                typeof config.headers.Accept === 'string') {
                //check for requests to /system/documents/{id}/download
                const documentDownloadEndpointRegExp = /^\/system\/documents\/[0-9]*\/download$/;
                if (documentDownloadEndpointRegExp.test(config.url)) {
                    //replace the string "application/json" with "blob" in the Accept header
                    config.headers.Accept = config.headers.Accept.replace('application/json', 'blob');
                    //add response type 'stream' to axios response type
                    config.responseType = 'stream';
                }
            }
            return config;
        });
        this.request = (0, BaseAPI_1.makeRequest)({ config: this.config, api: this.api, thisObj: this });
        this.paginate = (0, BaseAPI_1.makePaginate)({ thisObj: this });
    }
    /**
     * @internal
     */
    async api({ path, method, params, data, }) {
        var _a, _b;
        try {
            const result = await this.instance({
                url: path,
                method,
                params,
                data,
            });
            return result === null || result === void 0 ? void 0 : result.data;
        }
        catch (error) {
            if (error.isAxiosError) {
                throw {
                    status: (_a = error.response) === null || _a === void 0 ? void 0 : _a.status,
                    data: (_b = error.response) === null || _b === void 0 ? void 0 : _b.data,
                    message: error === null || error === void 0 ? void 0 : error.message,
                };
            }
            // something else catastrophic went wrong
            throw error;
        }
    }
}
exports.default = Manage;
//# sourceMappingURL=Manage.js.map