import Manage from '../Manage';
import { components } from '../ManageTypes';
import { CommonParameters, CWMOptions } from '../ManageAPI';
import { NoContentResponse, OctetStreamResponse } from '../types';
declare type schemas = components['schemas'];
/** {@link AddressFormat} */
export declare type AddressFormat = schemas['AddressFormat'];
/** {@link AddressFormatInfo} */
export declare type AddressFormatInfo = schemas['AddressFormatInfo'];
/** {@link BulkResult} */
export declare type BulkResult = schemas['BulkResult'];
/** {@link ClearPickerRequest} */
export declare type ClearPickerRequest = schemas['ClearPickerRequest'];
/** {@link CommunicationType} */
export declare type CommunicationType = schemas['CommunicationType'];
/** {@link CommunicationTypeInfo} */
export declare type CommunicationTypeInfo = schemas['CommunicationTypeInfo'];
/** {@link Company} */
export declare type Company = schemas['Company'];
/** {@link CompanyCompanyTypeAssociation} */
export declare type CompanyCompanyTypeAssociation = schemas['Company.CompanyTypeAssociation'];
/** {@link CompanyConfiguration} */
export declare type CompanyConfiguration = schemas['Company.Configuration'];
/** {@link CompanyContactTypeAssociation} */
export declare type CompanyContactTypeAssociation = schemas['Company.ContactTypeAssociation'];
/** {@link CompanyCompanyTypeAssociationCompanyTypeAssociation} */
export declare type CompanyCompanyTypeAssociationCompanyTypeAssociation = schemas['CompanyCompanyTypeAssociation.CompanyTypeAssociation'];
/** {@link CompanyCustomNote} */
export declare type CompanyCustomNote = schemas['CompanyCustomNote'];
/** {@link CompanyFinance} */
export declare type CompanyFinance = schemas['CompanyFinance'];
/** {@link CompanyGroup} */
export declare type CompanyGroup = schemas['CompanyGroup'];
/** {@link CompanyManagementSummary} */
export declare type CompanyManagementSummary = schemas['CompanyManagementSummary'];
/** {@link CompanyMerge} */
export declare type CompanyMerge = schemas['CompanyMerge'];
/** {@link CompanyNote} */
export declare type CompanyNote = schemas['CompanyNote'];
/** {@link CompanyNoteType} */
export declare type CompanyNoteType = schemas['CompanyNoteType'];
/** {@link CompanyNoteTypeInfo} */
export declare type CompanyNoteTypeInfo = schemas['CompanyNoteTypeInfo'];
/** {@link CompanyPickerItem} */
export declare type CompanyPickerItem = schemas['CompanyPickerItem'];
/** {@link CompanySite} */
export declare type CompanySite = schemas['CompanySite'];
/** {@link CompanyStatus} */
export declare type CompanyStatus = schemas['CompanyStatus'];
/** {@link CompanyTeam} */
export declare type CompanyTeam = schemas['CompanyTeam'];
/** {@link CompanyType} */
export declare type CompanyType = schemas['CompanyType'];
/** {@link CompanyTypeInfo} */
export declare type CompanyTypeInfo = schemas['CompanyTypeInfo'];
/** {@link ConfigurationStatus} */
export declare type ConfigurationStatus = schemas['ConfigurationStatus'];
/** {@link ConfigurationStatusInfo} */
export declare type ConfigurationStatusInfo = schemas['ConfigurationStatusInfo'];
/** {@link ConfigurationType} */
export declare type ConfigurationType = schemas['ConfigurationType'];
/** {@link ConfigurationTypeInfo} */
export declare type ConfigurationTypeInfo = schemas['ConfigurationTypeInfo'];
/** {@link ConfigurationTypeQuestion} */
export declare type ConfigurationTypeQuestion = schemas['ConfigurationTypeQuestion'];
/** {@link ConfigurationTypeQuestionValue} */
export declare type ConfigurationTypeQuestionValue = schemas['ConfigurationTypeQuestionValue'];
/** {@link Contact} */
export declare type Contact = schemas['Contact'];
/** {@link ContactCommunication} */
export declare type ContactCommunication = schemas['ContactCommunication'];
/** {@link ContactContactTypeAssociationContactTypeAssociation} */
export declare type ContactContactTypeAssociationContactTypeAssociation = schemas['ContactContactTypeAssociation.ContactTypeAssociation'];
/** {@link ContactDepartment} */
export declare type ContactDepartment = schemas['ContactDepartment'];
/** {@link ContactDepartmentInfo} */
export declare type ContactDepartmentInfo = schemas['ContactDepartmentInfo'];
/** {@link ContactGroup} */
export declare type ContactGroup = schemas['ContactGroup'];
/** {@link ContactNote} */
export declare type ContactNote = schemas['ContactNote'];
/** {@link ContactRelationship} */
export declare type ContactRelationship = schemas['ContactRelationship'];
/** {@link ContactTrack} */
export declare type ContactTrack = schemas['ContactTrack'];
/** {@link ContactType} */
export declare type ContactType = schemas['ContactType'];
/** {@link ContactTypeInfo} */
export declare type ContactTypeInfo = schemas['ContactTypeInfo'];
/** {@link Count} */
export declare type Count = schemas['Count'];
/** {@link Country} */
export declare type Country = schemas['Country'];
/** {@link CountryInfo} */
export declare type CountryInfo = schemas['CountryInfo'];
/** {@link EntityType} */
export declare type EntityType = schemas['EntityType'];
/** {@link EntityTypeInfo} */
export declare type EntityTypeInfo = schemas['EntityTypeInfo'];
/** {@link ManagedDevicesIntegration} */
export declare type ManagedDevicesIntegration = schemas['ManagedDevicesIntegration'];
/** {@link ManagedDevicesIntegrationCrossReference} */
export declare type ManagedDevicesIntegrationCrossReference = schemas['ManagedDevicesIntegrationCrossReference'];
/** {@link ManagedDevicesIntegrationInfo} */
export declare type ManagedDevicesIntegrationInfo = schemas['ManagedDevicesIntegrationInfo'];
/** {@link ManagedDevicesIntegrationLogin} */
export declare type ManagedDevicesIntegrationLogin = schemas['ManagedDevicesIntegrationLogin'];
/** {@link ManagedDevicesIntegrationNotification} */
export declare type ManagedDevicesIntegrationNotification = schemas['ManagedDevicesIntegrationNotification'];
/** {@link Management} */
export declare type Management = schemas['Management'];
/** {@link ManagementBackup} */
export declare type ManagementBackup = schemas['ManagementBackup'];
/** {@link ManagementItSolution} */
export declare type ManagementItSolution = schemas['ManagementItSolution'];
/** {@link ManagementItSolutionAgreementInterfaceParameter} */
export declare type ManagementItSolutionAgreementInterfaceParameter = schemas['ManagementItSolutionAgreementInterfaceParameter'];
/** {@link ManagementLogDocumentInfo} */
export declare type ManagementLogDocumentInfo = schemas['ManagementLogDocumentInfo'];
/** {@link ManagementReportNotification} */
export declare type ManagementReportNotification = schemas['ManagementReportNotification'];
/** {@link ManagementReportSetup} */
export declare type ManagementReportSetup = schemas['ManagementReportSetup'];
/** {@link MarketDescription} */
export declare type MarketDescription = schemas['MarketDescription'];
/** {@link MarketDescriptionInfo} */
export declare type MarketDescriptionInfo = schemas['MarketDescriptionInfo'];
/** {@link OwnershipType} */
export declare type OwnershipType = schemas['OwnershipType'];
/** {@link OwnershipTypeInfo} */
export declare type OwnershipTypeInfo = schemas['OwnershipTypeInfo'];
/** {@link PatchOperation} */
export declare type PatchOperation = schemas['PatchOperation'];
/** {@link PortalConfiguration} */
export declare type PortalConfiguration = schemas['PortalConfiguration'];
/** {@link PortalConfigurationInvoiceSetup} */
export declare type PortalConfigurationInvoiceSetup = schemas['PortalConfigurationInvoiceSetup'];
/** {@link PortalConfigurationOpportunitySetup} */
export declare type PortalConfigurationOpportunitySetup = schemas['PortalConfigurationOpportunitySetup'];
/** {@link PortalConfigurationPasswordEmailSetup} */
export declare type PortalConfigurationPasswordEmailSetup = schemas['PortalConfigurationPasswordEmailSetup'];
/** {@link PortalConfigurationPaymentProcessor} */
export declare type PortalConfigurationPaymentProcessor = schemas['PortalConfigurationPaymentProcessor'];
/** {@link PortalConfigurationProjectSetup} */
export declare type PortalConfigurationProjectSetup = schemas['PortalConfigurationProjectSetup'];
/** {@link PortalConfigurationServiceSetup} */
export declare type PortalConfigurationServiceSetup = schemas['PortalConfigurationServiceSetup'];
/** {@link PortalSecurity} */
export declare type PortalSecurity = schemas['PortalSecurity'];
/** {@link PortalSecurityLevel} */
export declare type PortalSecurityLevel = schemas['PortalSecurityLevel'];
/** {@link PortalSecuritySetting} */
export declare type PortalSecuritySetting = schemas['PortalSecuritySetting'];
/** {@link RequestPasswordRequest} */
export declare type RequestPasswordRequest = schemas['RequestPasswordRequest'];
/** {@link State} */
export declare type State = schemas['State'];
/** {@link StateInfo} */
export declare type StateInfo = schemas['StateInfo'];
/** {@link SuccessResponse} */
export declare type SuccessResponse = schemas['SuccessResponse'];
/** {@link TeamRole} */
export declare type TeamRole = schemas['TeamRole'];
/** {@link TeamRoleInfo} */
export declare type TeamRoleInfo = schemas['TeamRoleInfo'];
/** {@link Track} */
export declare type Track = schemas['Track'];
/** {@link TrackAction} */
export declare type TrackAction = schemas['TrackAction'];
/** {@link Usage} */
export declare type Usage = schemas['Usage'];
/** {@link ValidatePortalRequest} */
export declare type ValidatePortalRequest = schemas['ValidatePortalRequest'];
/** {@link ValidatePortalResponse} */
export declare type ValidatePortalResponse = schemas['ValidatePortalResponse'];
/**
 * @module CompanyAPI
 */
/**
 * Company module
 * @public
 */
export declare class CompanyAPI extends Manage {
    constructor(props: CWMOptions);
    getCompanyAddressFormats(params?: CommonParameters): Promise<Array<AddressFormat>>;
    postCompanyAddressFormats(addressFormat: AddressFormat): Promise<AddressFormat>;
    getCompanyAddressFormatsById(id: number, params?: CommonParameters): Promise<AddressFormat>;
    deleteCompanyAddressFormatsById(id: number): Promise<NoContentResponse>;
    putCompanyAddressFormatsById(id: number, addressFormat: AddressFormat): Promise<AddressFormat>;
    patchCompanyAddressFormatsById(id: number, patchOperations: Array<PatchOperation>): Promise<AddressFormat>;
    getCompanyAddressFormatsByIdInfo(id: number, params?: CommonParameters): Promise<AddressFormatInfo>;
    getCompanyAddressFormatsCount(params?: CommonParameters): Promise<Count>;
    getCompanyAddressFormatsInfo(params?: CommonParameters): Promise<Array<AddressFormatInfo>>;
    getCompanyAddressFormatsInfoCount(params?: CommonParameters): Promise<Count>;
    getCompanyBillingSetupsInfoCount(params?: CommonParameters): Promise<Count>;
    getCompanyCommunicationTypes(params?: CommonParameters): Promise<Array<CommunicationType>>;
    postCompanyCommunicationTypes(communicationType: CommunicationType): Promise<CommunicationType>;
    getCompanyCommunicationTypesById(id: number, params?: CommonParameters): Promise<CommunicationType>;
    deleteCompanyCommunicationTypesById(id: number): Promise<NoContentResponse>;
    putCompanyCommunicationTypesById(id: number, communicationType: CommunicationType): Promise<CommunicationType>;
    patchCompanyCommunicationTypesById(id: number, patchOperations: Array<PatchOperation>): Promise<CommunicationType>;
    getCompanyCommunicationTypesByIdInfo(id: number, params?: CommonParameters): Promise<CommunicationTypeInfo>;
    getCompanyCommunicationTypesByIdUsages(id: number, params?: CommonParameters): Promise<Array<Usage>>;
    getCompanyCommunicationTypesByIdUsagesList(id: number, params?: CommonParameters): Promise<Array<Usage>>;
    getCompanyCommunicationTypesCount(params?: CommonParameters): Promise<Count>;
    getCompanyCommunicationTypesInfo(params?: CommonParameters): Promise<Array<CommunicationTypeInfo>>;
    getCompanyCommunicationTypesInfoCount(params?: CommonParameters): Promise<Count>;
    getCompanyCompanies(params?: CommonParameters): Promise<Array<Company>>;
    postCompanyCompanies(company: Company): Promise<Company>;
    getCompanyCompaniesById(id: number, params?: CommonParameters): Promise<Company>;
    deleteCompanyCompaniesById(id: number): Promise<NoContentResponse>;
    putCompanyCompaniesById(id: number, company: Company): Promise<Company>;
    patchCompanyCompaniesById(id: number, patchOperations: Array<PatchOperation>): Promise<Company>;
    postCompanyCompaniesByIdMerge(id: number, merge: CompanyMerge): Promise<SuccessResponse>;
    getCompanyCompaniesByIdUsages(id: number, params?: CommonParameters): Promise<Array<Usage>>;
    getCompanyCompaniesByIdUsagesList(id: number, params?: CommonParameters): Promise<Array<Usage>>;
    getCompanyCompaniesByParentIdCustomStatusNotes(parentId: number, params?: CommonParameters): Promise<Array<CompanyCustomNote>>;
    postCompanyCompaniesByParentIdCustomStatusNotes(parentId: number, customNote: CompanyCustomNote): Promise<CompanyCustomNote>;
    getCompanyCompaniesByParentIdCustomStatusNotesById(id: number, parentId: number, params?: CommonParameters): Promise<CompanyCustomNote>;
    deleteCompanyCompaniesByParentIdCustomStatusNotesById(id: number, parentId: number): Promise<NoContentResponse>;
    putCompanyCompaniesByParentIdCustomStatusNotesById(id: number, parentId: number, customNote: CompanyCustomNote): Promise<CompanyCustomNote>;
    patchCompanyCompaniesByParentIdCustomStatusNotesById(id: number, parentId: number, patchOperations: Array<PatchOperation>): Promise<CompanyCustomNote>;
    getCompanyCompaniesByParentIdCustomStatusNotesCount(parentId: number, params?: CommonParameters): Promise<Count>;
    getCompanyCompaniesByParentIdGroups(parentId: number, params?: CommonParameters): Promise<Array<CompanyGroup>>;
    postCompanyCompaniesByParentIdGroups(parentId: number, companyGroup: CompanyGroup): Promise<CompanyGroup>;
    getCompanyCompaniesByParentIdGroupsById(id: number, parentId: number, params?: CommonParameters): Promise<CompanyGroup>;
    deleteCompanyCompaniesByParentIdGroupsById(id: number, parentId: number): Promise<NoContentResponse>;
    putCompanyCompaniesByParentIdGroupsById(id: number, parentId: number, companyGroup: CompanyGroup): Promise<CompanyGroup>;
    patchCompanyCompaniesByParentIdGroupsById(id: number, parentId: number, patchOperations: Array<PatchOperation>): Promise<CompanyGroup>;
    getCompanyCompaniesByParentIdGroupsCount(parentId: number, params?: CommonParameters): Promise<Count>;
    getCompanyCompaniesByParentIdManagementReportNotifications(parentId: number, params?: CommonParameters): Promise<Array<ManagementReportNotification>>;
    postCompanyCompaniesByParentIdManagementReportNotifications(parentId: number, managementReportNotification: ManagementReportNotification): Promise<ManagementReportNotification>;
    getCompanyCompaniesByParentIdManagementReportNotificationsById(id: number, parentId: number, params?: CommonParameters): Promise<ManagementReportNotification>;
    deleteCompanyCompaniesByParentIdManagementReportNotificationsById(id: number, parentId: number): Promise<NoContentResponse>;
    putCompanyCompaniesByParentIdManagementReportNotificationsById(id: number, parentId: number, managementReportNotification: ManagementReportNotification): Promise<ManagementReportNotification>;
    patchCompanyCompaniesByParentIdManagementReportNotificationsById(id: number, parentId: number, patchOperations: Array<PatchOperation>): Promise<ManagementReportNotification>;
    getCompanyCompaniesByParentIdManagementReportNotificationsCount(parentId: number, params?: CommonParameters): Promise<Count>;
    getCompanyCompaniesByParentIdManagementReportSetup(parentId: number, params?: CommonParameters): Promise<Array<ManagementReportSetup>>;
    postCompanyCompaniesByParentIdManagementReportSetup(parentId: number, managementReportSetup: ManagementReportSetup): Promise<ManagementReportSetup>;
    putCompanyCompaniesByParentIdManagementReportSetupById(id: number, parentId: number, managementReportSetup: ManagementReportSetup): Promise<ManagementReportSetup>;
    patchCompanyCompaniesByParentIdManagementReportSetupById(id: number, parentId: number, patchOperations: Array<PatchOperation>): Promise<ManagementReportSetup>;
    getCompanyCompaniesByParentIdManagementSummaryReports(parentId: number, params?: CommonParameters): Promise<Array<CompanyManagementSummary>>;
    postCompanyCompaniesByParentIdManagementSummaryReports(parentId: number, managementSummary: CompanyManagementSummary): Promise<CompanyManagementSummary>;
    getCompanyCompaniesByParentIdManagementSummaryReportsById(id: number, parentId: number, params?: CommonParameters): Promise<CompanyManagementSummary>;
    deleteCompanyCompaniesByParentIdManagementSummaryReportsById(id: number, parentId: number): Promise<NoContentResponse>;
    putCompanyCompaniesByParentIdManagementSummaryReportsById(id: number, parentId: number, managementSummary: CompanyManagementSummary): Promise<CompanyManagementSummary>;
    patchCompanyCompaniesByParentIdManagementSummaryReportsById(id: number, parentId: number, patchOperations: Array<PatchOperation>): Promise<CompanyManagementSummary>;
    getCompanyCompaniesByParentIdManagementSummaryReportsCount(parentId: number, params?: CommonParameters): Promise<Count>;
    getCompanyCompaniesByParentIdNotes(parentId: number, params?: CommonParameters): Promise<Array<CompanyNote>>;
    postCompanyCompaniesByParentIdNotes(parentId: number, companyNote: CompanyNote): Promise<CompanyNote>;
    getCompanyCompaniesByParentIdNotesById(id: number, parentId: number, params?: CommonParameters): Promise<CompanyNote>;
    deleteCompanyCompaniesByParentIdNotesById(id: number, parentId: number): Promise<NoContentResponse>;
    putCompanyCompaniesByParentIdNotesById(id: number, parentId: number, companyNote: CompanyNote): Promise<CompanyNote>;
    patchCompanyCompaniesByParentIdNotesById(id: number, parentId: number, patchOperations: Array<PatchOperation>): Promise<CompanyNote>;
    getCompanyCompaniesByParentIdNotesCount(parentId: number, params?: CommonParameters): Promise<Count>;
    getCompanyCompaniesByParentIdSites(parentId: number, params?: CommonParameters): Promise<Array<CompanySite>>;
    postCompanyCompaniesByParentIdSites(parentId: number, site: CompanySite): Promise<CompanySite>;
    getCompanyCompaniesByParentIdSitesById(id: number, parentId: number, params?: CommonParameters): Promise<CompanySite>;
    deleteCompanyCompaniesByParentIdSitesById(id: number, parentId: number): Promise<NoContentResponse>;
    putCompanyCompaniesByParentIdSitesById(id: number, parentId: number, site: CompanySite): Promise<CompanySite>;
    patchCompanyCompaniesByParentIdSitesById(id: number, parentId: number, patchOperations: Array<PatchOperation>): Promise<CompanySite>;
    getCompanyCompaniesByParentIdSitesByIdUsages(id: number, parentId: number, params?: CommonParameters): Promise<Array<Usage>>;
    getCompanyCompaniesByParentIdSitesByIdUsagesList(id: number, parentId: number, params?: CommonParameters): Promise<Array<Usage>>;
    getCompanyCompaniesByParentIdSitesCount(parentId: number, params?: CommonParameters): Promise<Count>;
    getCompanyCompaniesByParentIdSurveysCount(parentId: number, params?: CommonParameters): Promise<Count>;
    getCompanyCompaniesByParentIdTeams(parentId: number, params?: CommonParameters): Promise<Array<CompanyTeam>>;
    postCompanyCompaniesByParentIdTeams(parentId: number, companyTeam: CompanyTeam): Promise<CompanyTeam>;
    getCompanyCompaniesByParentIdTeamsById(id: number, parentId: number, params?: CommonParameters): Promise<CompanyTeam>;
    deleteCompanyCompaniesByParentIdTeamsById(id: number, parentId: number): Promise<NoContentResponse>;
    putCompanyCompaniesByParentIdTeamsById(id: number, parentId: number, companyTeam: CompanyTeam): Promise<CompanyTeam>;
    patchCompanyCompaniesByParentIdTeamsById(id: number, parentId: number, patchOperations: Array<PatchOperation>): Promise<CompanyTeam>;
    getCompanyCompaniesByParentIdTeamsCount(parentId: number, params?: CommonParameters): Promise<Count>;
    getCompanyCompaniesByParentIdTracks(parentId: number, params?: CommonParameters): Promise<Array<ContactTrack>>;
    postCompanyCompaniesByParentIdTracks(parentId: number, track: ContactTrack): Promise<ContactTrack>;
    getCompanyCompaniesByParentIdTracksById(id: number, parentId: number, params?: CommonParameters): Promise<ContactTrack>;
    deleteCompanyCompaniesByParentIdTracksById(id: number, parentId: number): Promise<NoContentResponse>;
    getCompanyCompaniesByParentIdTracksCount(parentId: number, params?: CommonParameters): Promise<Count>;
    getCompanyCompaniesByParentIdTypeAssociations(parentId: number, params?: CommonParameters): Promise<Array<CompanyCompanyTypeAssociationCompanyTypeAssociation>>;
    postCompanyCompaniesByParentIdTypeAssociations(parentId: number, companyTypeAssociation: CompanyCompanyTypeAssociationCompanyTypeAssociation): Promise<CompanyCompanyTypeAssociationCompanyTypeAssociation>;
    getCompanyCompaniesByParentIdTypeAssociationsById(id: number, parentId: number, params?: CommonParameters): Promise<CompanyCompanyTypeAssociationCompanyTypeAssociation>;
    deleteCompanyCompaniesByParentIdTypeAssociationsById(id: number, parentId: number): Promise<NoContentResponse>;
    putCompanyCompaniesByParentIdTypeAssociationsById(id: number, parentId: number, companyTypeAssociation: CompanyCompanyTypeAssociationCompanyTypeAssociation): Promise<CompanyCompanyTypeAssociationCompanyTypeAssociation>;
    patchCompanyCompaniesByParentIdTypeAssociationsById(id: number, parentId: number, patchOperations: Array<PatchOperation>): Promise<CompanyCompanyTypeAssociationCompanyTypeAssociation>;
    getCompanyCompaniesByParentIdTypeAssociationsCount(parentId: number, params?: CommonParameters): Promise<Count>;
    getCompanyCompaniesCount(params?: CommonParameters): Promise<Count>;
    getCompanyCompaniesDefault(params?: CommonParameters): Promise<Company>;
    getCompanyCompaniesInfoTypes(params?: CommonParameters): Promise<Array<CompanyTypeInfo>>;
    getCompanyCompaniesInfoTypesById(id: number, params?: CommonParameters): Promise<CompanyTypeInfo>;
    getCompanyCompaniesInfoTypesCount(params?: CommonParameters): Promise<Count>;
    getCompanyCompaniesStatuses(params?: CommonParameters): Promise<Array<CompanyStatus>>;
    postCompanyCompaniesStatuses(companyStatus: CompanyStatus): Promise<CompanyStatus>;
    getCompanyCompaniesStatusesById(id: number, params?: CommonParameters): Promise<CompanyStatus>;
    deleteCompanyCompaniesStatusesById(id: number): Promise<NoContentResponse>;
    putCompanyCompaniesStatusesById(id: number, companyStatus: CompanyStatus): Promise<CompanyStatus>;
    patchCompanyCompaniesStatusesById(id: number, patchOperations: Array<PatchOperation>): Promise<CompanyStatus>;
    getCompanyCompaniesStatusesByIdUsages(id: number, params?: CommonParameters): Promise<Array<Usage>>;
    getCompanyCompaniesStatusesByIdUsagesList(id: number, params?: CommonParameters): Promise<Array<Usage>>;
    getCompanyCompaniesStatusesCount(params?: CommonParameters): Promise<Count>;
    getCompanyCompaniesTypes(params?: CommonParameters): Promise<Array<CompanyType>>;
    postCompanyCompaniesTypes(companyType: CompanyType): Promise<CompanyType>;
    getCompanyCompaniesTypesById(id: number, params?: CommonParameters): Promise<CompanyType>;
    deleteCompanyCompaniesTypesById(id: number): Promise<NoContentResponse>;
    putCompanyCompaniesTypesById(id: number, companyType: CompanyType): Promise<CompanyType>;
    patchCompanyCompaniesTypesById(id: number, patchOperations: Array<PatchOperation>): Promise<CompanyType>;
    getCompanyCompaniesTypesByIdUsages(id: number, params?: CommonParameters): Promise<Array<Usage>>;
    getCompanyCompaniesTypesByIdUsagesList(id: number, params?: CommonParameters): Promise<Array<Usage>>;
    getCompanyCompaniesTypesCount(params?: CommonParameters): Promise<Count>;
    putCompanyCompanyFinanceById(id: number, CompanyFinance: CompanyFinance): Promise<CompanyFinance>;
    getCompanyCompanyPickerItems(params?: CommonParameters): Promise<Array<CompanyPickerItem>>;
    postCompanyCompanyPickerItems(companyPickerItem: CompanyPickerItem): Promise<CompanyPickerItem>;
    getCompanyCompanyPickerItemsById(id: number, params?: CommonParameters): Promise<CompanyPickerItem>;
    deleteCompanyCompanyPickerItemsById(id: number): Promise<NoContentResponse>;
    postCompanyCompanyPickerItemsClear(clearPickerRequest: ClearPickerRequest): Promise<NoContentResponse>;
    getCompanyCompanyPickerItemsCount(params?: CommonParameters): Promise<Count>;
    getCompanyCompanyTypeAssociations(params?: CommonParameters): Promise<Array<CompanyCompanyTypeAssociation>>;
    postCompanyCompanyTypeAssociations(companyTypeAssociation: CompanyCompanyTypeAssociation): Promise<CompanyCompanyTypeAssociation>;
    getCompanyCompanyTypeAssociationsById(id: number, params?: CommonParameters): Promise<CompanyCompanyTypeAssociation>;
    deleteCompanyCompanyTypeAssociationsById(id: number): Promise<NoContentResponse>;
    putCompanyCompanyTypeAssociationsById(id: number, companyTypeAssociation: CompanyCompanyTypeAssociation): Promise<CompanyCompanyTypeAssociation>;
    patchCompanyCompanyTypeAssociationsById(id: number, patchOperations: Array<PatchOperation>): Promise<CompanyCompanyTypeAssociation>;
    getCompanyCompanyTypeAssociationsCount(params?: CommonParameters): Promise<Count>;
    getCompanyConfigurations(managedIdentifier: string, params?: CommonParameters): Promise<Array<CompanyConfiguration>>;
    postCompanyConfigurations(configuration: CompanyConfiguration, params?: CommonParameters): Promise<CompanyConfiguration>;
    getCompanyConfigurationsById(id: number, params?: CommonParameters): Promise<CompanyConfiguration>;
    deleteCompanyConfigurationsById(id: number): Promise<NoContentResponse>;
    putCompanyConfigurationsById(id: number, configuration: CompanyConfiguration, params?: CommonParameters): Promise<CompanyConfiguration>;
    patchCompanyConfigurationsById(id: number, patchOperations: Array<PatchOperation>, params?: CommonParameters): Promise<CompanyConfiguration>;
    patchCompanyConfigurationsByIdChangeType(id: number, patchOperations: Array<PatchOperation>): Promise<CompanyConfiguration>;
    postCompanyConfigurationsBulk(companyConfigurations: Array<CompanyConfiguration>): Promise<CompanyConfiguration>;
    deleteCompanyConfigurationsBulk(): Promise<BulkResult>;
    putCompanyConfigurationsBulk(companyConfigurations: Array<CompanyConfiguration>): Promise<CompanyConfiguration>;
    getCompanyConfigurationsCount(managedIdentifier: string, params?: CommonParameters): Promise<Count>;
    getCompanyConfigurationsStatuses(params?: CommonParameters): Promise<Array<ConfigurationStatus>>;
    postCompanyConfigurationsStatuses(configurationStatus: ConfigurationStatus): Promise<ConfigurationStatus>;
    getCompanyConfigurationsStatusesById(id: number, params?: CommonParameters): Promise<ConfigurationStatus>;
    deleteCompanyConfigurationsStatusesById(id: number): Promise<NoContentResponse>;
    putCompanyConfigurationsStatusesById(id: number, configurationStatus: ConfigurationStatus): Promise<ConfigurationStatus>;
    patchCompanyConfigurationsStatusesById(id: number, patchOperations: Array<PatchOperation>): Promise<ConfigurationStatus>;
    getCompanyConfigurationsStatusesByIdInfo(id: number, params?: CommonParameters): Promise<ConfigurationStatusInfo>;
    getCompanyConfigurationsStatusesByIdUsages(id: number, params?: CommonParameters): Promise<Array<Usage>>;
    getCompanyConfigurationsStatusesByIdUsagesList(id: number, params?: CommonParameters): Promise<Array<Usage>>;
    getCompanyConfigurationsStatusesCount(params?: CommonParameters): Promise<Count>;
    getCompanyConfigurationsStatusesInfo(params?: CommonParameters): Promise<Array<ConfigurationStatusInfo>>;
    getCompanyConfigurationsStatusesInfoCount(params?: CommonParameters): Promise<Count>;
    getCompanyConfigurationsTypes(params?: CommonParameters): Promise<Array<ConfigurationType>>;
    postCompanyConfigurationsTypes(configurationType: ConfigurationType): Promise<ConfigurationType>;
    getCompanyConfigurationsTypesByGrandparentIdQuestionsByParentIdValues(parentId: number, grandparentId: number, params?: CommonParameters): Promise<Array<ConfigurationTypeQuestionValue>>;
    postCompanyConfigurationsTypesByGrandparentIdQuestionsByParentIdValues(parentId: number, grandparentId: number, configurationTypeQuestionValue: ConfigurationTypeQuestionValue): Promise<ConfigurationTypeQuestionValue>;
    getCompanyConfigurationsTypesByGrandparentIdQuestionsByParentIdValuesById(id: number, parentId: number, grandparentId: number, params?: CommonParameters): Promise<ConfigurationTypeQuestionValue>;
    deleteCompanyConfigurationsTypesByGrandparentIdQuestionsByParentIdValuesById(id: number, parentId: number, grandparentId: number): Promise<NoContentResponse>;
    putCompanyConfigurationsTypesByGrandparentIdQuestionsByParentIdValuesById(id: number, parentId: number, grandparentId: number, configurationTypeQuestionValue: ConfigurationTypeQuestionValue): Promise<ConfigurationTypeQuestionValue>;
    patchCompanyConfigurationsTypesByGrandparentIdQuestionsByParentIdValuesById(id: number, parentId: number, grandparentId: number, patchOperations: Array<PatchOperation>): Promise<ConfigurationTypeQuestionValue>;
    getCompanyConfigurationsTypesByGrandparentIdQuestionsByParentIdValuesByIdUsages(id: number, parentId: number, grandparentId: number, params?: CommonParameters): Promise<Array<Usage>>;
    getCompanyConfigurationsTypesByGrandparentIdQuestionsByParentIdValuesByIdUsagesList(id: number, parentId: number, grandparentId: number, params?: CommonParameters): Promise<Array<Usage>>;
    getCompanyConfigurationsTypesByGrandparentIdQuestionsByParentIdValuesCount(parentId: number, grandparentId: number, params?: CommonParameters): Promise<Count>;
    getCompanyConfigurationsTypesById(id: number, params?: CommonParameters): Promise<ConfigurationType>;
    deleteCompanyConfigurationsTypesById(id: number): Promise<NoContentResponse>;
    putCompanyConfigurationsTypesById(id: number, configurationType: ConfigurationType): Promise<ConfigurationType>;
    patchCompanyConfigurationsTypesById(id: number, patchOperations: Array<PatchOperation>): Promise<ConfigurationType>;
    getCompanyConfigurationsTypesByIdInfo(id: number, params?: CommonParameters): Promise<ConfigurationTypeInfo>;
    getCompanyConfigurationsTypesByIdUsages(id: number, params?: CommonParameters): Promise<Array<Usage>>;
    getCompanyConfigurationsTypesByIdUsagesList(id: number, params?: CommonParameters): Promise<Array<Usage>>;
    getCompanyConfigurationsTypesByParentIdQuestions(parentId: number, params?: CommonParameters): Promise<Array<ConfigurationTypeQuestion>>;
    postCompanyConfigurationsTypesByParentIdQuestions(parentId: number, configurationTypeQuestion: ConfigurationTypeQuestion): Promise<ConfigurationTypeQuestion>;
    getCompanyConfigurationsTypesByParentIdQuestionsById(id: number, parentId: number, params?: CommonParameters): Promise<ConfigurationTypeQuestion>;
    deleteCompanyConfigurationsTypesByParentIdQuestionsById(id: number, parentId: number): Promise<NoContentResponse>;
    putCompanyConfigurationsTypesByParentIdQuestionsById(id: number, parentId: number, configurationTypeQuestion: ConfigurationTypeQuestion): Promise<ConfigurationTypeQuestion>;
    patchCompanyConfigurationsTypesByParentIdQuestionsById(id: number, parentId: number, patchOperations: Array<PatchOperation>): Promise<ConfigurationTypeQuestion>;
    getCompanyConfigurationsTypesByParentIdQuestionsCount(parentId: number, params?: CommonParameters): Promise<Count>;
    getCompanyConfigurationsTypesCount(params?: CommonParameters): Promise<Count>;
    getCompanyContacts(params?: CommonParameters): Promise<Array<Contact>>;
    postCompanyContacts(contact: Contact): Promise<Contact>;
    getCompanyContactsById(id: number, params?: CommonParameters): Promise<Contact>;
    deleteCompanyContactsById(id: number, transferContactId: number): Promise<NoContentResponse>;
    putCompanyContactsById(id: number, contact: Contact): Promise<Contact>;
    patchCompanyContactsById(id: number, patchOperations: Array<PatchOperation>): Promise<Contact>;
    getCompanyContactsByIdImage(id: number, useDefaultFlag: boolean, lastModified: string, params?: CommonParameters): Promise<OctetStreamResponse>;
    getCompanyContactsByIdPortalSecurity(id: number, params?: CommonParameters): Promise<Array<PortalSecurity>>;
    getCompanyContactsByIdUsages(id: number, params?: CommonParameters): Promise<Array<Usage>>;
    getCompanyContactsByIdUsagesList(id: number, params?: CommonParameters): Promise<Array<Usage>>;
    getCompanyContactsByParentIdCommunications(parentId: number, params?: CommonParameters): Promise<Array<ContactCommunication>>;
    postCompanyContactsByParentIdCommunications(parentId: number, contactCommunication: ContactCommunication): Promise<ContactCommunication>;
    getCompanyContactsByParentIdCommunicationsById(id: number, parentId: number, params?: CommonParameters): Promise<ContactCommunication>;
    deleteCompanyContactsByParentIdCommunicationsById(id: number, parentId: number): Promise<NoContentResponse>;
    putCompanyContactsByParentIdCommunicationsById(id: number, parentId: number, contactCommunication: ContactCommunication): Promise<ContactCommunication>;
    patchCompanyContactsByParentIdCommunicationsById(id: number, parentId: number, patchOperations: Array<PatchOperation>): Promise<ContactCommunication>;
    getCompanyContactsByParentIdCommunicationsCount(parentId: number, params?: CommonParameters): Promise<Count>;
    getCompanyContactsByParentIdGroups(parentId: number, params?: CommonParameters): Promise<Array<ContactGroup>>;
    postCompanyContactsByParentIdGroups(parentId: number, contactGroup: ContactGroup): Promise<ContactGroup>;
    getCompanyContactsByParentIdGroupsById(id: number, parentId: number, params?: CommonParameters): Promise<ContactGroup>;
    deleteCompanyContactsByParentIdGroupsById(id: number, parentId: number): Promise<NoContentResponse>;
    putCompanyContactsByParentIdGroupsById(id: number, parentId: number, contactGroup: ContactGroup): Promise<ContactGroup>;
    patchCompanyContactsByParentIdGroupsById(id: number, parentId: number, patchOperations: Array<PatchOperation>): Promise<ContactGroup>;
    getCompanyContactsByParentIdGroupsCount(parentId: number, params?: CommonParameters): Promise<Count>;
    getCompanyContactsByParentIdNotes(parentId: number, params?: CommonParameters): Promise<Array<ContactNote>>;
    postCompanyContactsByParentIdNotes(parentId: number, contactNote: ContactNote): Promise<ContactNote>;
    getCompanyContactsByParentIdNotesById(id: number, parentId: number, params?: CommonParameters): Promise<ContactNote>;
    deleteCompanyContactsByParentIdNotesById(id: number, parentId: number): Promise<NoContentResponse>;
    putCompanyContactsByParentIdNotesById(id: number, parentId: number, contactNote: ContactNote): Promise<ContactNote>;
    patchCompanyContactsByParentIdNotesById(id: number, parentId: number, patchOperations: Array<PatchOperation>): Promise<ContactNote>;
    getCompanyContactsByParentIdNotesCount(parentId: number, params?: CommonParameters): Promise<Count>;
    getCompanyContactsByParentIdTracks(parentId: number, params?: CommonParameters): Promise<Array<ContactTrack>>;
    postCompanyContactsByParentIdTracks(parentId: number, track: ContactTrack): Promise<ContactTrack>;
    getCompanyContactsByParentIdTracksById(id: number, parentId: number, params?: CommonParameters): Promise<ContactTrack>;
    deleteCompanyContactsByParentIdTracksById(id: number, parentId: number): Promise<NoContentResponse>;
    getCompanyContactsByParentIdTracksCount(parentId: number, params?: CommonParameters): Promise<Count>;
    getCompanyContactsByParentIdTypeAssociations(parentId: number, params?: CommonParameters): Promise<Array<ContactContactTypeAssociationContactTypeAssociation>>;
    postCompanyContactsByParentIdTypeAssociations(parentId: number, contactTypeAssociation: ContactContactTypeAssociationContactTypeAssociation): Promise<ContactContactTypeAssociationContactTypeAssociation>;
    getCompanyContactsByParentIdTypeAssociationsById(id: number, parentId: number, params?: CommonParameters): Promise<ContactContactTypeAssociationContactTypeAssociation>;
    deleteCompanyContactsByParentIdTypeAssociationsById(id: number, parentId: number): Promise<NoContentResponse>;
    putCompanyContactsByParentIdTypeAssociationsById(id: number, parentId: number, contactTypeAssociation: ContactContactTypeAssociationContactTypeAssociation): Promise<ContactContactTypeAssociationContactTypeAssociation>;
    patchCompanyContactsByParentIdTypeAssociationsById(id: number, parentId: number, patchOperations: Array<PatchOperation>): Promise<ContactContactTypeAssociationContactTypeAssociation>;
    getCompanyContactsByParentIdTypeAssociationsCount(parentId: number, params?: CommonParameters): Promise<Count>;
    getCompanyContactsCount(params?: CommonParameters): Promise<Count>;
    getCompanyContactsDefault(companyId: number, params?: CommonParameters): Promise<Contact>;
    getCompanyContactsDepartments(params?: CommonParameters): Promise<Array<ContactDepartment>>;
    postCompanyContactsDepartments(contactDepartment: ContactDepartment): Promise<ContactDepartment>;
    getCompanyContactsDepartmentsById(id: number, params?: CommonParameters): Promise<ContactDepartment>;
    deleteCompanyContactsDepartmentsById(id: number): Promise<NoContentResponse>;
    putCompanyContactsDepartmentsById(id: number, contactDepartment: ContactDepartment): Promise<ContactDepartment>;
    patchCompanyContactsDepartmentsById(id: number, patchOperations: Array<PatchOperation>): Promise<ContactDepartment>;
    getCompanyContactsDepartmentsByIdInfo(id: number, params?: CommonParameters): Promise<ContactDepartmentInfo>;
    getCompanyContactsDepartmentsByIdUsages(id: number, params?: CommonParameters): Promise<Array<Usage>>;
    getCompanyContactsDepartmentsByIdUsagesList(id: number, params?: CommonParameters): Promise<Array<Usage>>;
    getCompanyContactsDepartmentsCount(params?: CommonParameters): Promise<Count>;
    getCompanyContactsDepartmentsInfo(params?: CommonParameters): Promise<Array<ContactDepartmentInfo>>;
    getCompanyContactsDepartmentsInfoCount(params?: CommonParameters): Promise<Count>;
    getCompanyContactsRelationships(params?: CommonParameters): Promise<Array<ContactRelationship>>;
    postCompanyContactsRelationships(contactRelationship: ContactRelationship): Promise<ContactRelationship>;
    getCompanyContactsRelationshipsById(id: number, params?: CommonParameters): Promise<ContactRelationship>;
    deleteCompanyContactsRelationshipsById(id: number): Promise<NoContentResponse>;
    putCompanyContactsRelationshipsById(id: number, contactRelationship: ContactRelationship): Promise<ContactRelationship>;
    patchCompanyContactsRelationshipsById(id: number, patchOperations: Array<PatchOperation>): Promise<ContactRelationship>;
    getCompanyContactsRelationshipsCount(params?: CommonParameters): Promise<Count>;
    postCompanyContactsRequestPassword(request: RequestPasswordRequest): Promise<NoContentResponse>;
    getCompanyContactsTypes(params?: CommonParameters): Promise<Array<ContactType>>;
    postCompanyContactsTypes(contactType: ContactType): Promise<ContactType>;
    getCompanyContactsTypesById(id: number, params?: CommonParameters): Promise<ContactType>;
    deleteCompanyContactsTypesById(id: number): Promise<NoContentResponse>;
    putCompanyContactsTypesById(id: number, contactType: ContactType): Promise<ContactType>;
    patchCompanyContactsTypesById(id: number, patchOperations: Array<PatchOperation>): Promise<ContactType>;
    getCompanyContactsTypesByIdInfo(id: number, params?: CommonParameters): Promise<ContactTypeInfo>;
    getCompanyContactsTypesCount(params?: CommonParameters): Promise<Count>;
    getCompanyContactsTypesCountInfo(params?: CommonParameters): Promise<Count>;
    getCompanyContactsTypesInfo(params?: CommonParameters): Promise<Array<ContactTypeInfo>>;
    postCompanyContactsValidatePortalCredentials(request: ValidatePortalRequest): Promise<ValidatePortalResponse>;
    getCompanyContactTypeAssociations(params?: CommonParameters): Promise<Array<CompanyContactTypeAssociation>>;
    postCompanyContactTypeAssociations(contactTypeAssociation: CompanyContactTypeAssociation): Promise<CompanyContactTypeAssociation>;
    getCompanyContactTypeAssociationsById(id: number, params?: CommonParameters): Promise<CompanyContactTypeAssociation>;
    deleteCompanyContactTypeAssociationsById(id: number): Promise<NoContentResponse>;
    putCompanyContactTypeAssociationsById(id: number, contactTypeAssociation: CompanyContactTypeAssociation): Promise<CompanyContactTypeAssociation>;
    patchCompanyContactTypeAssociationsById(id: number, patchOperations: Array<PatchOperation>): Promise<CompanyContactTypeAssociation>;
    getCompanyContactTypeAssociationsCount(params?: CommonParameters): Promise<Count>;
    getCompanyCountries(params?: CommonParameters): Promise<Array<Country>>;
    postCompanyCountries(country: Country): Promise<Country>;
    getCompanyCountriesById(id: number, params?: CommonParameters): Promise<Country>;
    deleteCompanyCountriesById(id: number): Promise<NoContentResponse>;
    putCompanyCountriesById(id: number, country: Country): Promise<Country>;
    patchCompanyCountriesById(id: number, patchOperations: Array<PatchOperation>): Promise<Country>;
    getCompanyCountriesByIdInfo(id: number, params?: CommonParameters): Promise<CountryInfo>;
    getCompanyCountriesCount(params?: CommonParameters): Promise<Count>;
    getCompanyCountriesInfo(params?: CommonParameters): Promise<Array<CountryInfo>>;
    getCompanyCountriesInfoCount(params?: CommonParameters): Promise<Count>;
    getCompanyEntityTypes(params?: CommonParameters): Promise<Array<EntityType>>;
    getCompanyEntityTypesById(id: number, params?: CommonParameters): Promise<EntityType>;
    getCompanyEntitytypesByIdInfo(id: number, params?: CommonParameters): Promise<EntityTypeInfo>;
    getCompanyEntityTypesCount(params?: CommonParameters): Promise<Count>;
    getCompanyEntitytypesInfo(params?: CommonParameters): Promise<Array<EntityTypeInfo>>;
    getCompanyEntityTypesInfoCount(params?: CommonParameters): Promise<Count>;
    getCompanyExpenseTypesInfoCount(params?: CommonParameters): Promise<Count>;
    getCompanyManagedDevicesIntegrations(params?: CommonParameters): Promise<Array<ManagedDevicesIntegration>>;
    postCompanyManagedDevicesIntegrations(managedDevicesIntegration: ManagedDevicesIntegration): Promise<ManagedDevicesIntegration>;
    getCompanyManagedDevicesIntegrationsById(id: number, params?: CommonParameters): Promise<ManagedDevicesIntegration>;
    deleteCompanyManagedDevicesIntegrationsById(id: number): Promise<NoContentResponse>;
    putCompanyManagedDevicesIntegrationsById(id: number, managedDevicesIntegration: ManagedDevicesIntegration): Promise<ManagedDevicesIntegration>;
    patchCompanyManagedDevicesIntegrationsById(id: number, patchOperations: Array<PatchOperation>): Promise<ManagedDevicesIntegration>;
    getCompanyManagedDevicesIntegrationsByIdInfo(id: number, params?: CommonParameters): Promise<ManagedDevicesIntegrationInfo>;
    getCompanyManagedDevicesIntegrationsByIdUsages(id: number, params?: CommonParameters): Promise<Array<Usage>>;
    getCompanyManagedDevicesIntegrationsByIdUsagesList(id: number, params?: CommonParameters): Promise<Array<Usage>>;
    getCompanyManagedDevicesIntegrationsByParentIdCrossReferences(parentId: number, params?: CommonParameters): Promise<Array<ManagedDevicesIntegrationCrossReference>>;
    postCompanyManagedDevicesIntegrationsByParentIdCrossReferences(parentId: number, crossReference: ManagedDevicesIntegrationCrossReference): Promise<ManagedDevicesIntegrationCrossReference>;
    getCompanyManagedDevicesIntegrationsByParentIdCrossReferencesById(id: number, parentId: number, params?: CommonParameters): Promise<ManagedDevicesIntegrationCrossReference>;
    putCompanyManagedDevicesIntegrationsByParentIdCrossReferencesById(id: number, parentId: number, crossReference: ManagedDevicesIntegrationCrossReference): Promise<ManagedDevicesIntegrationCrossReference>;
    patchCompanyManagedDevicesIntegrationsByParentIdCrossReferencesById(id: number, parentId: number, patchOperations: Array<PatchOperation>): Promise<ManagedDevicesIntegrationCrossReference>;
    deleteCompanyManagedDevicesIntegrationsByParentIdCrossReferencesById(id: number, parentId: number): Promise<ManagedDevicesIntegrationCrossReference>;
    getCompanyManagedDevicesIntegrationsByParentIdCrossReferencesCount(parentId: number, params?: CommonParameters): Promise<Count>;
    getCompanyManagedDevicesIntegrationsByParentIdLogins(parentId: number, params?: CommonParameters): Promise<Array<ManagedDevicesIntegrationLogin>>;
    postCompanyManagedDevicesIntegrationsByParentIdLogins(parentId: number, login: ManagedDevicesIntegrationLogin): Promise<ManagedDevicesIntegrationLogin>;
    getCompanyManagedDevicesIntegrationsByParentIdLoginsById(id: number, parentId: number, params?: CommonParameters): Promise<ManagedDevicesIntegrationLogin>;
    putCompanyManagedDevicesIntegrationsByParentIdLoginsById(id: number, parentId: number, login: ManagedDevicesIntegrationLogin): Promise<ManagedDevicesIntegrationLogin>;
    patchCompanyManagedDevicesIntegrationsByParentIdLoginsById(id: number, parentId: number, patchOperations: Array<PatchOperation>): Promise<ManagedDevicesIntegrationLogin>;
    deleteCompanyManagedDevicesIntegrationsByParentIdLoginsById(id: number, parentId: number): Promise<ManagedDevicesIntegrationLogin>;
    getCompanyManagedDevicesIntegrationsByParentIdLoginsCount(parentId: number, params?: CommonParameters): Promise<Count>;
    getCompanyManagedDevicesIntegrationsByParentIdNotifications(parentId: number, params?: CommonParameters): Promise<Array<ManagedDevicesIntegrationNotification>>;
    postCompanyManagedDevicesIntegrationsByParentIdNotifications(parentId: number, notification: ManagedDevicesIntegrationNotification): Promise<ManagedDevicesIntegrationNotification>;
    getCompanyManagedDevicesIntegrationsByParentIdNotificationsById(id: number, parentId: number, params?: CommonParameters): Promise<ManagedDevicesIntegrationNotification>;
    putCompanyManagedDevicesIntegrationsByParentIdNotificationsById(id: number, parentId: number, notification: ManagedDevicesIntegrationNotification): Promise<ManagedDevicesIntegrationNotification>;
    patchCompanyManagedDevicesIntegrationsByParentIdNotificationsById(id: number, parentId: number, patchOperations: Array<PatchOperation>): Promise<ManagedDevicesIntegrationNotification>;
    deleteCompanyManagedDevicesIntegrationsByParentIdNotificationsById(id: number, parentId: number): Promise<ManagedDevicesIntegrationNotification>;
    getCompanyManagedDevicesIntegrationsByParentIdNotificationsCount(parentId: number, params?: CommonParameters): Promise<Count>;
    getCompanyManagedDevicesIntegrationsCount(params?: CommonParameters): Promise<Count>;
    getCompanyManagedDevicesIntegrationsInfo(params?: CommonParameters): Promise<Array<ManagedDevicesIntegrationInfo>>;
    getCompanyManagedDevicesIntegrationsInfoCount(params?: CommonParameters): Promise<Count>;
    getCompanyManagement(params?: CommonParameters): Promise<Array<Management>>;
    getCompanyManagementById(id: number, params?: CommonParameters): Promise<Management>;
    putCompanyManagementById(id: number, management: Management): Promise<Management>;
    patchCompanyManagementById(id: number, patchOperations: Array<PatchOperation>): Promise<Management>;
    postCompanyManagementByIdExecuteManagedItSync(id: number): Promise<SuccessResponse>;
    getCompanyManagementByIdLogDownload(id: number, filePath: string, params?: CommonParameters): Promise<OctetStreamResponse>;
    getCompanyManagementByIdLogs(id: number, params?: CommonParameters): Promise<Array<ManagementLogDocumentInfo>>;
    getCompanyManagementByParentIdManagementReportNotifications(parentId: number, params?: CommonParameters): Promise<Array<ManagementReportNotification>>;
    postCompanyManagementByParentIdManagementReportNotifications(parentId: number, managementReportNotification: ManagementReportNotification): Promise<ManagementReportNotification>;
    getCompanyManagementByParentIdManagementReportNotificationsById(id: number, parentId: number, params?: CommonParameters): Promise<ManagementReportNotification>;
    deleteCompanyManagementByParentIdManagementReportNotificationsById(id: number, parentId: number): Promise<NoContentResponse>;
    putCompanyManagementByParentIdManagementReportNotificationsById(id: number, parentId: number, managementReportNotification: ManagementReportNotification): Promise<ManagementReportNotification>;
    patchCompanyManagementByParentIdManagementReportNotificationsById(id: number, parentId: number, patchOperations: Array<PatchOperation>): Promise<ManagementReportNotification>;
    getCompanyManagementByParentIdManagementReportNotificationsCount(parentId: number, params?: CommonParameters): Promise<Count>;
    getCompanyManagementCount(params?: CommonParameters): Promise<Count>;
    getCompanyManagementBackups(params?: CommonParameters): Promise<Array<ManagementBackup>>;
    postCompanyManagementBackups(managementBackup: ManagementBackup): Promise<ManagementBackup>;
    getCompanyManagementBackupsById(id: number, params?: CommonParameters): Promise<ManagementBackup>;
    deleteCompanyManagementBackupsById(id: number): Promise<NoContentResponse>;
    putCompanyManagementBackupsById(id: number, managementBackup: ManagementBackup): Promise<ManagementBackup>;
    patchCompanyManagementBackupsById(id: number, patchOperations: Array<PatchOperation>): Promise<ManagementBackup>;
    getCompanyManagementBackupsCount(params?: CommonParameters): Promise<Count>;
    getCompanyManagementItSolutions(params?: CommonParameters): Promise<Array<ManagementItSolution>>;
    postCompanyManagementItSolutions(managementItSolution: ManagementItSolution): Promise<ManagementItSolution>;
    getCompanyManagementItSolutionsById(id: number, params?: CommonParameters): Promise<ManagementItSolution>;
    deleteCompanyManagementItSolutionsById(id: number): Promise<NoContentResponse>;
    putCompanyManagementItSolutionsById(id: number, managementItSolution: ManagementItSolution): Promise<ManagementItSolution>;
    patchCompanyManagementItSolutionsById(id: number, patchOperations: Array<PatchOperation>): Promise<ManagementItSolution>;
    getCompanyManagementItSolutionsByIdUsages(id: number, params?: CommonParameters): Promise<Array<Usage>>;
    getCompanyManagementItSolutionsByIdUsagesList(id: number, params?: CommonParameters): Promise<Array<Usage>>;
    getCompanyManagementItSolutionsByParentIdManagementProducts(parentId: number, params?: CommonParameters): Promise<Array<ManagementItSolutionAgreementInterfaceParameter>>;
    postCompanyManagementItSolutionsByParentIdManagementProducts(parentId: number, managementProduct: ManagementItSolutionAgreementInterfaceParameter): Promise<ManagementItSolutionAgreementInterfaceParameter>;
    getCompanyManagementItSolutionsByParentIdManagementProductsById(id: number, parentId: number, params?: CommonParameters): Promise<ManagementItSolutionAgreementInterfaceParameter>;
    putCompanyManagementItSolutionsByParentIdManagementProductsById(id: number, parentId: number, managementProduct: ManagementItSolutionAgreementInterfaceParameter): Promise<ManagementItSolutionAgreementInterfaceParameter>;
    patchCompanyManagementItSolutionsByParentIdManagementProductsById(id: number, parentId: number, patchOperations: Array<PatchOperation>): Promise<ManagementItSolutionAgreementInterfaceParameter>;
    deleteCompanyManagementItSolutionsByParentIdManagementProductsById(id: number, parentId: number): Promise<ManagementItSolutionAgreementInterfaceParameter>;
    getCompanyManagementItSolutionsByParentIdManagementProductsCount(parentId: number, params?: CommonParameters): Promise<Count>;
    getCompanyManagementItSolutionsCount(params?: CommonParameters): Promise<Count>;
    getCompanyMarketDescriptions(params?: CommonParameters): Promise<Array<MarketDescription>>;
    postCompanyMarketDescriptions(marketDescription: MarketDescription): Promise<MarketDescription>;
    getCompanyMarketDescriptionsById(id: number, params?: CommonParameters): Promise<MarketDescription>;
    deleteCompanyMarketDescriptionsById(id: number): Promise<NoContentResponse>;
    putCompanyMarketDescriptionsById(id: number, marketDescription: MarketDescription): Promise<MarketDescription>;
    patchCompanyMarketDescriptionsById(id: number, patchOperations: Array<PatchOperation>): Promise<MarketDescription>;
    getCompanyMarketDescriptionsByIdInfo(id: number, params?: CommonParameters): Promise<MarketDescriptionInfo>;
    getCompanyMarketDescriptionsByIdUsages(id: number, params?: CommonParameters): Promise<Array<Usage>>;
    getCompanyMarketDescriptionsByIdUsagesList(id: number, params?: CommonParameters): Promise<Array<Usage>>;
    getCompanyMarketDescriptionsCount(params?: CommonParameters): Promise<Count>;
    getCompanyMarketDescriptionsInfo(params?: CommonParameters): Promise<Array<MarketDescriptionInfo>>;
    getCompanyMarketDescriptionsInfoCount(params?: CommonParameters): Promise<Count>;
    getCompanyNoteTypes(params?: CommonParameters): Promise<Array<CompanyNoteType>>;
    postCompanyNoteTypes(noteType: CompanyNoteType): Promise<CompanyNoteType>;
    getCompanyNoteTypesById(id: number, params?: CommonParameters): Promise<CompanyNoteType>;
    deleteCompanyNoteTypesById(id: number): Promise<NoContentResponse>;
    putCompanyNoteTypesById(id: number, noteType: CompanyNoteType): Promise<CompanyNoteType>;
    patchCompanyNoteTypesById(id: number, patchOperations: Array<PatchOperation>): Promise<CompanyNoteType>;
    getCompanyNoteTypesByIdInfo(id: number, params?: CommonParameters): Promise<CompanyNoteTypeInfo>;
    getCompanyNoteTypesCount(params?: CommonParameters): Promise<Count>;
    getCompanyNoteTypesCountInfo(params?: CommonParameters): Promise<Count>;
    getCompanyNoteTypesInfo(params?: CommonParameters): Promise<Array<CompanyNoteTypeInfo>>;
    getCompanyOwnershipTypes(params?: CommonParameters): Promise<Array<OwnershipType>>;
    postCompanyOwnershipTypes(ownershipType: OwnershipType): Promise<OwnershipType>;
    getCompanyOwnershipTypesById(id: number, params?: CommonParameters): Promise<OwnershipType>;
    deleteCompanyOwnershipTypesById(id: number): Promise<NoContentResponse>;
    putCompanyOwnershipTypesById(id: number, ownershipType: OwnershipType): Promise<OwnershipType>;
    patchCompanyOwnershipTypesById(id: number, patchOperations: Array<PatchOperation>): Promise<OwnershipType>;
    getCompanyOwnershipTypesByIdInfo(id: number, params?: CommonParameters): Promise<OwnershipTypeInfo>;
    getCompanyOwnershipTypesCount(params?: CommonParameters): Promise<Count>;
    getCompanyOwnershipTypesInfo(params?: CommonParameters): Promise<Array<OwnershipTypeInfo>>;
    getCompanyOwnershipTypesInfoCount(params?: CommonParameters): Promise<Count>;
    getCompanyPaymentTypesInfoCount(params?: CommonParameters): Promise<Count>;
    getCompanyPortalConfigurations(params?: CommonParameters): Promise<Array<PortalConfiguration>>;
    postCompanyPortalConfigurations(portalConfiguration: PortalConfiguration): Promise<PortalConfiguration>;
    getCompanyPortalConfigurationsById(id: number, params?: CommonParameters): Promise<PortalConfiguration>;
    deleteCompanyPortalConfigurationsById(id: number): Promise<NoContentResponse>;
    putCompanyPortalConfigurationsById(id: number, portalConfiguration: PortalConfiguration): Promise<PortalConfiguration>;
    patchCompanyPortalConfigurationsById(id: number, patchOperations: Array<PatchOperation>): Promise<PortalConfiguration>;
    getCompanyPortalConfigurationsByParentIdInvoiceSetups(parentId: number, params?: CommonParameters): Promise<Array<PortalConfigurationInvoiceSetup>>;
    getCompanyPortalConfigurationsByParentIdInvoiceSetupsById(id: number, parentId: number, params?: CommonParameters): Promise<PortalConfigurationInvoiceSetup>;
    putCompanyPortalConfigurationsByParentIdInvoiceSetupsById(id: number, parentId: number, portalConfigurationInvoiceSetup: PortalConfigurationInvoiceSetup): Promise<PortalConfigurationInvoiceSetup>;
    patchCompanyPortalConfigurationsByParentIdInvoiceSetupsById(id: number, parentId: number, patchOperations: Array<PatchOperation>): Promise<PortalConfigurationInvoiceSetup>;
    postCompanyPortalConfigurationsByParentIdInvoiceSetupsByIdTestTransaction(id: number, parentId: number, portalConfigurationInvoiceSetup: PortalConfigurationInvoiceSetup): Promise<SuccessResponse>;
    getCompanyPortalConfigurationsByParentIdInvoiceSetupsCount(parentId: number, params?: CommonParameters): Promise<Count>;
    getCompanyPortalConfigurationsByParentIdOpportunitySetups(parentId: number, params?: CommonParameters): Promise<Array<PortalConfigurationOpportunitySetup>>;
    putCompanyPortalConfigurationsByParentIdOpportunitySetups(parentId: number, opportunitySetup: PortalConfigurationOpportunitySetup): Promise<PortalConfigurationOpportunitySetup>;
    patchCompanyPortalConfigurationsByParentIdOpportunitySetups(parentId: number, patchOperations: Array<PatchOperation>): Promise<PortalConfigurationOpportunitySetup>;
    getCompanyPortalConfigurationsByParentIdOpportunitySetupsById(id: number, parentId: number, params?: CommonParameters): Promise<PortalConfigurationOpportunitySetup>;
    putCompanyPortalConfigurationsByParentIdOpportunitySetupsById(id: number, parentId: number, opportunitySetup: PortalConfigurationOpportunitySetup): Promise<PortalConfigurationOpportunitySetup>;
    patchCompanyPortalConfigurationsByParentIdOpportunitySetupsById(id: number, parentId: number, patchOperations: Array<PatchOperation>): Promise<PortalConfigurationOpportunitySetup>;
    getCompanyPortalConfigurationsByParentIdPasswordEmailSetups(parentId: number, params?: CommonParameters): Promise<Array<PortalConfigurationPasswordEmailSetup>>;
    getCompanyPortalConfigurationsByParentIdPasswordEmailSetupsById(id: number, parentId: number, params?: CommonParameters): Promise<PortalConfigurationPasswordEmailSetup>;
    putCompanyPortalConfigurationsByParentIdPasswordEmailSetupsById(id: number, parentId: number, passwordEmailSetup: PortalConfigurationPasswordEmailSetup): Promise<PortalConfigurationPasswordEmailSetup>;
    patchCompanyPortalConfigurationsByParentIdPasswordEmailSetupsById(id: number, parentId: number, patchOperations: Array<PatchOperation>): Promise<PortalConfigurationPasswordEmailSetup>;
    getCompanyPortalConfigurationsByParentIdProjectSetups(parentId: number, params?: CommonParameters): Promise<Array<PortalConfigurationProjectSetup>>;
    getCompanyPortalConfigurationsByParentIdProjectSetupsById(id: number, parentId: number, params?: CommonParameters): Promise<PortalConfigurationProjectSetup>;
    putCompanyPortalConfigurationsByParentIdProjectSetupsById(id: number, parentId: number, portalConfigurationProjectSetup: PortalConfigurationProjectSetup): Promise<PortalConfigurationProjectSetup>;
    patchCompanyPortalConfigurationsByParentIdProjectSetupsById(id: number, parentId: number, patchOperations: Array<PatchOperation>): Promise<PortalConfigurationProjectSetup>;
    getCompanyPortalConfigurationsByParentIdProjectSetupsCount(parentId: number, params?: CommonParameters): Promise<Count>;
    getCompanyPortalConfigurationsByParentIdServiceSetups(parentId: number, params?: CommonParameters): Promise<Array<PortalConfigurationServiceSetup>>;
    getCompanyPortalConfigurationsByParentIdServiceSetupsById(id: number, parentId: number, params?: CommonParameters): Promise<PortalConfigurationServiceSetup>;
    putCompanyPortalConfigurationsByParentIdServiceSetupsById(id: number, parentId: number, portalConfigurationServiceSetup: PortalConfigurationServiceSetup): Promise<PortalConfigurationServiceSetup>;
    patchCompanyPortalConfigurationsByParentIdServiceSetupsById(id: number, parentId: number, patchOperations: Array<PatchOperation>): Promise<PortalConfigurationServiceSetup>;
    getCompanyPortalConfigurationsByParentIdServiceSetupsCount(parentId: number, params?: CommonParameters): Promise<Count>;
    postCompanyPortalConfigurationsCopy(copy: PortalConfiguration): Promise<PortalConfiguration>;
    getCompanyPortalConfigurationsCount(params?: CommonParameters): Promise<Count>;
    getCompanyPortalConfigurationsInvoiceSetupPaymentProcessors(params?: CommonParameters): Promise<Array<PortalConfigurationPaymentProcessor>>;
    getCompanyPortalConfigurationsInvoiceSetupPaymentProcessorsById(id: number, params?: CommonParameters): Promise<PortalConfigurationPaymentProcessor>;
    getCompanyPortalConfigurationsInvoiceSetupPaymentProcessorsCount(params?: CommonParameters): Promise<Count>;
    getCompanyPortalSecurityLevels(params?: CommonParameters): Promise<Array<PortalSecurityLevel>>;
    getCompanyPortalSecurityLevelsById(id: number, params?: CommonParameters): Promise<PortalSecurityLevel>;
    putCompanyPortalSecurityLevelsById(id: number, _portalSecurityLevel: PortalSecurityLevel): Promise<PortalSecurityLevel>;
    patchCompanyPortalSecurityLevelsById(id: number, patchOperations: Array<PatchOperation>): Promise<PortalSecurityLevel>;
    getCompanyPortalSecurityLevelsCount(params?: CommonParameters): Promise<Count>;
    getCompanyPortalSecuritySettings(params?: CommonParameters): Promise<Array<PortalSecuritySetting>>;
    getCompanyPortalSecuritySettingsById(id: number, params?: CommonParameters): Promise<PortalSecuritySetting>;
    putCompanyPortalSecuritySettingsById(id: number, portalSecurity: PortalSecuritySetting): Promise<PortalSecuritySetting>;
    patchCompanyPortalSecuritySettingsById(id: number, patchOperations: Array<PatchOperation>): Promise<PortalSecuritySetting>;
    getCompanyPortalSecuritySettingsCount(params?: CommonParameters): Promise<Count>;
    getCompanyStates(params?: CommonParameters): Promise<Array<State>>;
    postCompanyStates(state: State): Promise<State>;
    getCompanyStatesById(id: number, params?: CommonParameters): Promise<State>;
    putCompanyStatesById(id: number, state: State): Promise<State>;
    patchCompanyStatesById(id: number, patchOperations: Array<PatchOperation>): Promise<State>;
    deleteCompanyStatesById(id: number): Promise<NoContentResponse>;
    getCompanyStatesByIdInfo(id: number, params?: CommonParameters): Promise<StateInfo>;
    getCompanyStatesByIdUsages(id: number, params?: CommonParameters): Promise<Array<Usage>>;
    getCompanyStatesByIdUsagesList(id: number, params?: CommonParameters): Promise<Array<Usage>>;
    getCompanyStatesCount(params?: CommonParameters): Promise<Count>;
    getCompanyStatesInfo(params?: CommonParameters): Promise<Array<StateInfo>>;
    getCompanyStatesInfoCount(params?: CommonParameters): Promise<Count>;
    getCompanyTeamRoles(params?: CommonParameters): Promise<Array<TeamRole>>;
    postCompanyTeamRoles(teamRole: TeamRole): Promise<TeamRole>;
    getCompanyTeamRolesById(id: number, params?: CommonParameters): Promise<TeamRole>;
    deleteCompanyTeamRolesById(id: number): Promise<NoContentResponse>;
    putCompanyTeamRolesById(id: number, teamRole: TeamRole): Promise<TeamRole>;
    patchCompanyTeamRolesById(id: number, patchOperations: Array<PatchOperation>): Promise<TeamRole>;
    getCompanyTeamRolesByIdInfo(id: number, params?: CommonParameters): Promise<TeamRoleInfo>;
    getCompanyTeamRolesByIdUsages(id: number, params?: CommonParameters): Promise<Array<Usage>>;
    getCompanyTeamRolesByIdUsagesList(id: number, params?: CommonParameters): Promise<Array<Usage>>;
    getCompanyTeamRolesCount(params?: CommonParameters): Promise<Count>;
    getCompanyTeamRolesInfo(params?: CommonParameters): Promise<Array<TeamRoleInfo>>;
    getCompanyTeamRolesInfoCount(params?: CommonParameters): Promise<Count>;
    getCompanyTracks(params?: CommonParameters): Promise<Array<Track>>;
    postCompanyTracks(track: Track): Promise<Track>;
    getCompanyTracksById(id: number, params?: CommonParameters): Promise<Track>;
    deleteCompanyTracksById(id: number): Promise<NoContentResponse>;
    putCompanyTracksById(id: number, track: Track): Promise<Track>;
    patchCompanyTracksById(id: number, patchOperations: Array<PatchOperation>): Promise<Track>;
    getCompanyTracksByParentIdActions(parentId: number, params?: CommonParameters): Promise<Array<TrackAction>>;
    postCompanyTracksByParentIdActions(parentId: number, trackAction: TrackAction): Promise<TrackAction>;
    getCompanyTracksByParentIdActionsById(id: number, parentId: number, params?: CommonParameters): Promise<TrackAction>;
    putCompanyTracksByParentIdActionsById(id: number, parentId: number, trackAction: TrackAction): Promise<TrackAction>;
    patchCompanyTracksByParentIdActionsById(id: number, parentId: number): Promise<TrackAction>;
    deleteCompanyTracksByParentIdActionsById(id: number, parentId: number): Promise<NoContentResponse>;
    getCompanyTracksByParentIdActionsCount(parentId: number, params?: CommonParameters): Promise<Count>;
    getCompanyTracksCount(params?: CommonParameters): Promise<Count>;
}
export {};
//# sourceMappingURL=CompanyAPI.d.ts.map