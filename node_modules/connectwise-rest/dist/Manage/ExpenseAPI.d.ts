import Manage from '../Manage';
import { components } from '../ManageTypes';
import { CommonParameters, CWMOptions } from '../ManageAPI';
import { NoContentResponse } from '../types';
declare type schemas = components['schemas'];
/** {@link Classification} */
export declare type Classification = schemas['Classification'];
/** {@link Count} */
export declare type Count = schemas['Count'];
/** {@link ExpenseEntry} */
export declare type ExpenseEntry = schemas['ExpenseEntry'];
/** {@link ExpenseEntryAudit} */
export declare type ExpenseEntryAudit = schemas['ExpenseEntryAudit'];
/** {@link ExpenseReport} */
export declare type ExpenseReport = schemas['ExpenseReport'];
/** {@link ExpenseReportAudit} */
export declare type ExpenseReportAudit = schemas['ExpenseReportAudit'];
/** {@link ExpenseTaxTypeInfo} */
export declare type ExpenseTaxTypeInfo = schemas['ExpenseTaxTypeInfo'];
/** {@link ExpenseType} */
export declare type ExpenseType = schemas['ExpenseType'];
/** {@link ExpenseTypeInfo} */
export declare type ExpenseTypeInfo = schemas['ExpenseTypeInfo'];
/** {@link PatchOperation} */
export declare type PatchOperation = schemas['PatchOperation'];
/** {@link PaymentType} */
export declare type PaymentType = schemas['PaymentType'];
/** {@link PaymentTypeInfo} */
export declare type PaymentTypeInfo = schemas['PaymentTypeInfo'];
/** {@link SuccessResponse} */
export declare type SuccessResponse = schemas['SuccessResponse'];
/**
 * @module ExpenseAPI
 */
/**
 * Expense module
 * @public
 */
export declare class ExpenseAPI extends Manage {
    constructor(props: CWMOptions);
    getExpenseClassifications(params?: CommonParameters): Promise<Array<Classification>>;
    getExpenseClassificationsById(id: number, params?: CommonParameters): Promise<Classification>;
    getExpenseClassificationsCount(params?: CommonParameters): Promise<Count>;
    getExpenseEntries(params?: CommonParameters): Promise<Array<ExpenseEntry>>;
    postExpenseEntries(expenseEntry: ExpenseEntry): Promise<ExpenseEntry>;
    getExpenseEntriesById(id: number, params?: CommonParameters): Promise<ExpenseEntry>;
    deleteExpenseEntriesById(id: number): Promise<NoContentResponse>;
    putExpenseEntriesById(id: number, expenseEntry: ExpenseEntry): Promise<ExpenseEntry>;
    patchExpenseEntriesById(id: number, patchOperations: Array<PatchOperation>): Promise<ExpenseEntry>;
    getExpenseEntriesByParentIdAudits(parentId: number, params?: CommonParameters): Promise<Array<ExpenseEntryAudit>>;
    getExpenseEntriesByParentIdAuditsById(id: number, parentId: number, params?: CommonParameters): Promise<ExpenseEntryAudit>;
    getExpenseEntriesByParentIdAuditsCount(parentId: number, params?: CommonParameters): Promise<Count>;
    getExpenseEntriesCount(params?: CommonParameters): Promise<Count>;
    getExpenseInfoTaxTypes(params?: CommonParameters): Promise<Array<ExpenseTaxTypeInfo>>;
    getExpenseInfoTaxTypesById(id: number, params?: CommonParameters): Promise<ExpenseTaxTypeInfo>;
    getExpenseInfoTaxTypesCount(params?: CommonParameters): Promise<Count>;
    getExpensePaymentTypes(params?: CommonParameters): Promise<Array<PaymentType>>;
    postExpensePaymentTypes(paymentType: PaymentType): Promise<PaymentType>;
    getExpensePaymentTypesById(id: number, params?: CommonParameters): Promise<PaymentType>;
    deleteExpensePaymentTypesById(id: number): Promise<NoContentResponse>;
    putExpensePaymentTypesById(id: number, paymentType: PaymentType): Promise<PaymentType>;
    patchExpensePaymentTypesById(id: number, patchOperations: Array<PatchOperation>): Promise<PaymentType>;
    getExpensePaymentTypesByIdInfo(id: number, params?: CommonParameters): Promise<PaymentTypeInfo>;
    getExpensePaymentTypesCount(params?: CommonParameters): Promise<Count>;
    getExpensePaymentTypesInfo(params?: CommonParameters): Promise<Array<PaymentTypeInfo>>;
    getExpenseReports(params?: CommonParameters): Promise<Array<ExpenseReport>>;
    getExpenseReportsById(id: number, params?: CommonParameters): Promise<ExpenseReport>;
    postExpenseReportsByIdReverse(id: number): Promise<SuccessResponse>;
    postExpenseReportsByIdSubmit(id: number): Promise<SuccessResponse>;
    getExpenseReportsByParentIdAudits(parentId: number, params?: CommonParameters): Promise<Array<ExpenseReportAudit>>;
    getExpenseReportsByParentIdAuditsById(id: number, parentId: number, params?: CommonParameters): Promise<ExpenseReportAudit>;
    getExpenseReportsByParentIdAuditsCount(parentId: number, params?: CommonParameters): Promise<Count>;
    getExpenseReportsCount(params?: CommonParameters): Promise<Count>;
    getExpenseTypes(params?: CommonParameters): Promise<Array<ExpenseType>>;
    postExpenseTypes(expenseType: ExpenseType): Promise<ExpenseType>;
    getExpenseTypesById(id: number, params?: CommonParameters): Promise<ExpenseType>;
    deleteExpenseTypesById(id: number): Promise<NoContentResponse>;
    putExpenseTypesById(id: number, expenseType: ExpenseType): Promise<ExpenseType>;
    patchExpenseTypesById(id: number, patchOperations: Array<PatchOperation>): Promise<ExpenseType>;
    getExpenseTypesByIdInfo(id: number, params?: CommonParameters): Promise<ExpenseTypeInfo>;
    getExpenseTypesCount(params?: CommonParameters): Promise<Count>;
    getExpenseTypesInfo(params?: CommonParameters): Promise<Array<ExpenseTypeInfo>>;
}
export {};
//# sourceMappingURL=ExpenseAPI.d.ts.map