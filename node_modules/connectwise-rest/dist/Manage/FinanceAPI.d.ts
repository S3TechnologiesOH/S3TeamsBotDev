import Manage from '../Manage';
import { components } from '../ManageTypes';
import { CommonParameters, CWMOptions } from '../ManageAPI';
import { NoContentResponse, PDFResponse } from '../types';
declare type schemas = components['schemas'];
/** {@link AccountingBatch} */
export declare type AccountingBatch = schemas['AccountingBatch'];
/** {@link AccountingPackage} */
export declare type AccountingPackage = schemas['AccountingPackage'];
/** {@link AccountingPackageSetup} */
export declare type AccountingPackageSetup = schemas['AccountingPackageSetup'];
/** {@link Addition} */
export declare type Addition = schemas['Addition'];
/** {@link Agreement} */
export declare type Agreement = schemas['Agreement'];
/** {@link AgreementAdjustment} */
export declare type AgreementAdjustment = schemas['Agreement.Adjustment'];
/** {@link AgreementBatchSetup} */
export declare type AgreementBatchSetup = schemas['AgreementBatchSetup'];
/** {@link AgreementSite} */
export declare type AgreementSite = schemas['AgreementSite'];
/** {@link AgreementType} */
export declare type AgreementType = schemas['AgreementType'];
/** {@link AgreementTypeBoardDefault} */
export declare type AgreementTypeBoardDefault = schemas['AgreementTypeBoardDefault'];
/** {@link AgreementTypeInfo} */
export declare type AgreementTypeInfo = schemas['AgreementTypeInfo'];
/** {@link AgreementTypeWorkRole} */
export declare type AgreementTypeWorkRole = schemas['AgreementTypeWorkRole'];
/** {@link AgreementTypeWorkRoleExclusion} */
export declare type AgreementTypeWorkRoleExclusion = schemas['AgreementTypeWorkRoleExclusion'];
/** {@link AgreementTypeWorkRoleInfo} */
export declare type AgreementTypeWorkRoleInfo = schemas['AgreementTypeWorkRoleInfo'];
/** {@link AgreementTypeWorkType} */
export declare type AgreementTypeWorkType = schemas['AgreementTypeWorkType'];
/** {@link AgreementTypeWorkTypeExclusion} */
export declare type AgreementTypeWorkTypeExclusion = schemas['AgreementTypeWorkTypeExclusion'];
/** {@link AgreementWorkRole} */
export declare type AgreementWorkRole = schemas['AgreementWorkRole'];
/** {@link AgreementWorkRoleExclusion} */
export declare type AgreementWorkRoleExclusion = schemas['AgreementWorkRoleExclusion'];
/** {@link AgreementWorkType} */
export declare type AgreementWorkType = schemas['AgreementWorkType'];
/** {@link AgreementWorkTypeExclusion} */
export declare type AgreementWorkTypeExclusion = schemas['AgreementWorkTypeExclusion'];
/** {@link BatchEntry} */
export declare type BatchEntry = schemas['BatchEntry'];
/** {@link BillingCycle} */
export declare type BillingCycle = schemas['BillingCycle'];
/** {@link BillingCycleInfo} */
export declare type BillingCycleInfo = schemas['BillingCycleInfo'];
/** {@link BillingSetup} */
export declare type BillingSetup = schemas['BillingSetup'];
/** {@link BillingSetupInfo} */
export declare type BillingSetupInfo = schemas['BillingSetupInfo'];
/** {@link BillingSetupRouting} */
export declare type BillingSetupRouting = schemas['BillingSetupRouting'];
/** {@link BillingStatus} */
export declare type BillingStatus = schemas['BillingStatus'];
/** {@link BillingStatusInfo} */
export declare type BillingStatusInfo = schemas['BillingStatusInfo'];
/** {@link BillingTerm} */
export declare type BillingTerm = schemas['BillingTerm'];
/** {@link BillingTermInfo} */
export declare type BillingTermInfo = schemas['BillingTermInfo'];
/** {@link BoardDefault} */
export declare type BoardDefault = schemas['BoardDefault'];
/** {@link ClosedInvoice} */
export declare type ClosedInvoice = schemas['ClosedInvoice'];
/** {@link CompanyFinance} */
export declare type CompanyFinance = schemas['CompanyFinance'];
/** {@link ConfigurationReference} */
export declare type ConfigurationReference = schemas['ConfigurationReference'];
/** {@link Count} */
export declare type Count = schemas['Count'];
/** {@link CreateAccountingBatchRequest} */
export declare type CreateAccountingBatchRequest = schemas['CreateAccountingBatchRequest'];
/** {@link CurrencyCode} */
export declare type CurrencyCode = schemas['CurrencyCode'];
/** {@link CurrencyInfo} */
export declare type CurrencyInfo = schemas['CurrencyInfo'];
/** {@link DeliveryMethod} */
export declare type DeliveryMethod = schemas['DeliveryMethod'];
/** {@link ExpenseTypeExemption} */
export declare type ExpenseTypeExemption = schemas['ExpenseTypeExemption'];
/** {@link ExportAccountingBatchRequest} */
export declare type ExportAccountingBatchRequest = schemas['ExportAccountingBatchRequest'];
/** {@link FinanceCurrency} */
export declare type FinanceCurrency = schemas['Finance.Currency'];
/** {@link GLAccount} */
export declare type GLAccount = schemas['GLAccount'];
/** {@link GLCaption} */
export declare type GLCaption = schemas['GLCaption'];
/** {@link GLExport} */
export declare type GLExport = schemas['GLExport'];
/** {@link GLPath} */
export declare type GLPath = schemas['GLPath'];
/** {@link Invoice} */
export declare type Invoice = schemas['Invoice'];
/** {@link InvoiceEmailTemplate} */
export declare type InvoiceEmailTemplate = schemas['InvoiceEmailTemplate'];
/** {@link InvoiceEmailTemplateInfo} */
export declare type InvoiceEmailTemplateInfo = schemas['InvoiceEmailTemplateInfo'];
/** {@link InvoiceInfo} */
export declare type InvoiceInfo = schemas['InvoiceInfo'];
/** {@link InvoiceTemplate} */
export declare type InvoiceTemplate = schemas['InvoiceTemplate'];
/** {@link InvoiceTemplateSetup} */
export declare type InvoiceTemplateSetup = schemas['InvoiceTemplateSetup'];
/** {@link MappedType} */
export declare type MappedType = schemas['MappedType'];
/** {@link PatchOperation} */
export declare type PatchOperation = schemas['PatchOperation'];
/** {@link Payment} */
export declare type Payment = schemas['Payment'];
/** {@link ProductTypeExemption} */
export declare type ProductTypeExemption = schemas['ProductTypeExemption'];
/** {@link TaxCode} */
export declare type TaxCode = schemas['TaxCode'];
/** {@link TaxCodeInfo} */
export declare type TaxCodeInfo = schemas['TaxCodeInfo'];
/** {@link TaxCodeLevel} */
export declare type TaxCodeLevel = schemas['TaxCodeLevel'];
/** {@link TaxCodeXRef} */
export declare type TaxCodeXRef = schemas['TaxCodeXRef'];
/** {@link TaxIntegration} */
export declare type TaxIntegration = schemas['TaxIntegration'];
/** {@link TaxIntegrationInfo} */
export declare type TaxIntegrationInfo = schemas['TaxIntegrationInfo'];
/** {@link TaxableExpenseTypeLevel} */
export declare type TaxableExpenseTypeLevel = schemas['TaxableExpenseTypeLevel'];
/** {@link TaxableProductTypeLevel} */
export declare type TaxableProductTypeLevel = schemas['TaxableProductTypeLevel'];
/** {@link TaxableWorkRoleLevel} */
export declare type TaxableWorkRoleLevel = schemas['TaxableWorkRoleLevel'];
/** {@link TaxableXRefLevel} */
export declare type TaxableXRefLevel = schemas['TaxableXRefLevel'];
/** {@link UnpostedExpense} */
export declare type UnpostedExpense = schemas['UnpostedExpense'];
/** {@link UnpostedExpenseTaxableLevel} */
export declare type UnpostedExpenseTaxableLevel = schemas['UnpostedExpenseTaxableLevel'];
/** {@link UnpostedInvoice} */
export declare type UnpostedInvoice = schemas['UnpostedInvoice'];
/** {@link UnpostedInvoiceTaxableLevel} */
export declare type UnpostedInvoiceTaxableLevel = schemas['UnpostedInvoiceTaxableLevel'];
/** {@link UnpostedProcurement} */
export declare type UnpostedProcurement = schemas['UnpostedProcurement'];
/** {@link UnpostedProcurementTaxableLevel} */
export declare type UnpostedProcurementTaxableLevel = schemas['UnpostedProcurementTaxableLevel'];
/** {@link Usage} */
export declare type Usage = schemas['Usage'];
/** {@link WorkRoleExemption} */
export declare type WorkRoleExemption = schemas['WorkRoleExemption'];
/**
 * @module FinanceAPI
 */
/**
 * Finance module
 * @public
 */
export declare class FinanceAPI extends Manage {
    constructor(props: CWMOptions);
    getFinanceAccountingBatches(params?: CommonParameters): Promise<Array<AccountingBatch>>;
    postFinanceAccountingBatches(accountingBatchParameters: CreateAccountingBatchRequest): Promise<GLExport>;
    getFinanceAccountingBatchesById(id: number, params?: CommonParameters): Promise<AccountingBatch>;
    deleteFinanceAccountingBatchesById(id: number): Promise<NoContentResponse>;
    postFinanceAccountingBatchesByIdExport(id: number, batchExportParameters: ExportAccountingBatchRequest): Promise<GLExport>;
    getFinanceAccountingBatchesByParentIdEntries(parentId: number, params?: CommonParameters): Promise<Array<BatchEntry>>;
    getFinanceAccountingBatchesByParentIdEntriesById(id: number, parentId: number, params?: CommonParameters): Promise<BatchEntry>;
    getFinanceAccountingBatchesByParentIdEntriesCount(parentId: number, params?: CommonParameters): Promise<Count>;
    getFinanceAccountingBatchesCount(params?: CommonParameters): Promise<Count>;
    postFinanceAccountingExport(batchExportParameters: ExportAccountingBatchRequest): Promise<GLExport>;
    getFinanceAccountingUnpostedexpenses(params?: CommonParameters): Promise<Array<UnpostedExpense>>;
    getFinanceAccountingUnpostedexpensesById(id: number, params?: CommonParameters): Promise<UnpostedExpense>;
    getFinanceAccountingUnpostedexpensesByParentIdTaxableLevels(parentId: number, params?: CommonParameters): Promise<Array<UnpostedExpenseTaxableLevel>>;
    getFinanceAccountingUnpostedexpensesByParentIdTaxableLevelsById(id: number, parentId: number, params?: CommonParameters): Promise<UnpostedExpenseTaxableLevel>;
    getFinanceAccountingUnpostedexpensesByParentIdTaxableLevelsCount(parentId: number, params?: CommonParameters): Promise<Count>;
    getFinanceAccountingUnpostedexpensesCount(params?: CommonParameters): Promise<Count>;
    getFinanceAccountingUnpostedinvoices(params?: CommonParameters): Promise<Array<UnpostedInvoice>>;
    getFinanceAccountingUnpostedinvoicesById(id: number, params?: CommonParameters): Promise<UnpostedInvoice>;
    getFinanceAccountingUnpostedinvoicesByParentIdTaxableLevels(parentId: number, params?: CommonParameters): Promise<Array<UnpostedInvoiceTaxableLevel>>;
    getFinanceAccountingUnpostedinvoicesByParentIdTaxableLevelsById(id: number, parentId: number, params?: CommonParameters): Promise<UnpostedInvoiceTaxableLevel>;
    getFinanceAccountingUnpostedinvoicesByParentIdTaxableLevelsCount(parentId: number, params?: CommonParameters): Promise<Count>;
    getFinanceAccountingUnpostedinvoicesCount(params?: CommonParameters): Promise<Count>;
    getFinanceAccountingUnpostedprocurement(params?: CommonParameters): Promise<Array<UnpostedProcurement>>;
    getFinanceAccountingUnpostedprocurementById(id: number, params?: CommonParameters): Promise<UnpostedProcurement>;
    getFinanceAccountingUnpostedprocurementByParentIdTaxableLevels(parentId: number, params?: CommonParameters): Promise<Array<UnpostedProcurementTaxableLevel>>;
    getFinanceAccountingUnpostedprocurementByParentIdTaxableLevelsById(id: number, parentId: number, params?: CommonParameters): Promise<UnpostedProcurementTaxableLevel>;
    getFinanceAccountingUnpostedprocurementByParentIdTaxableLevelsCount(parentId: number, params?: CommonParameters): Promise<Count>;
    getFinanceAccountingUnpostedprocurementCount(params?: CommonParameters): Promise<Count>;
    getFinanceAccountingPackages(params?: CommonParameters): Promise<Array<AccountingPackage>>;
    getFinanceAccountingPackagesById(id: number, params?: CommonParameters): Promise<AccountingPackage>;
    getFinanceAccountingPackagesCount(params?: CommonParameters): Promise<Count>;
    getFinanceAccountingPackageSetup(params?: CommonParameters): Promise<Array<AccountingPackageSetup>>;
    getFinanceAccountingPackageSetupById(id: number, params?: CommonParameters): Promise<AccountingPackageSetup>;
    putFinanceAccountingPackageSetupById(id: number, accountingPackageSetup: AccountingPackageSetup): Promise<AccountingPackageSetup>;
    patchFinanceAccountingPackageSetupById(id: number, patchOperations: Array<PatchOperation>): Promise<AccountingPackageSetup>;
    getFinanceAccountingPackageSetupCount(params?: CommonParameters): Promise<Count>;
    getFinanceAgreements(params?: CommonParameters): Promise<Array<Agreement>>;
    postFinanceAgreements(agreement: Agreement): Promise<Agreement>;
    getFinanceAgreementsById(id: number, params?: CommonParameters): Promise<Agreement>;
    deleteFinanceAgreementsById(id: number): Promise<NoContentResponse>;
    putFinanceAgreementsById(id: number, agreement: Agreement): Promise<Agreement>;
    patchFinanceAgreementsById(id: number, patchOperations: Array<PatchOperation>): Promise<Agreement>;
    getFinanceAgreementsByParentIdAdditions(parentId: number, params?: CommonParameters): Promise<Array<Addition>>;
    postFinanceAgreementsByParentIdAdditions(parentId: number, addition: Addition): Promise<Addition>;
    getFinanceAgreementsByParentIdAdditionsById(id: number, parentId: number, params?: CommonParameters): Promise<Addition>;
    deleteFinanceAgreementsByParentIdAdditionsById(id: number, parentId: number): Promise<NoContentResponse>;
    putFinanceAgreementsByParentIdAdditionsById(id: number, parentId: number, addition: Addition): Promise<Addition>;
    patchFinanceAgreementsByParentIdAdditionsById(id: number, parentId: number, patchOperations: Array<PatchOperation>): Promise<Addition>;
    getFinanceAgreementsByParentIdAdditionsCount(parentId: number, params?: CommonParameters): Promise<Count>;
    getFinanceAgreementsByParentIdAdjustments(parentId: number, params?: CommonParameters): Promise<Array<AgreementAdjustment>>;
    postFinanceAgreementsByParentIdAdjustments(parentId: number, adjustment: AgreementAdjustment): Promise<AgreementAdjustment>;
    getFinanceAgreementsByParentIdAdjustmentsById(id: number, parentId: number, params?: CommonParameters): Promise<AgreementAdjustment>;
    deleteFinanceAgreementsByParentIdAdjustmentsById(id: number, parentId: number): Promise<NoContentResponse>;
    putFinanceAgreementsByParentIdAdjustmentsById(id: number, parentId: number, adjustment: AgreementAdjustment): Promise<AgreementAdjustment>;
    patchFinanceAgreementsByParentIdAdjustmentsById(id: number, parentId: number, patchOperations: Array<PatchOperation>): Promise<AgreementAdjustment>;
    getFinanceAgreementsByParentIdAdjustmentsCount(parentId: number, params?: CommonParameters): Promise<Count>;
    getFinanceAgreementsByParentIdBoardDefaults(parentId: number, params?: CommonParameters): Promise<Array<BoardDefault>>;
    postFinanceAgreementsByParentIdBoardDefaults(parentId: number, boardDefault: BoardDefault): Promise<BoardDefault>;
    getFinanceAgreementsByParentIdBoardDefaultsById(id: number, parentId: number, params?: CommonParameters): Promise<BoardDefault>;
    deleteFinanceAgreementsByParentIdBoardDefaultsById(id: number, parentId: number): Promise<NoContentResponse>;
    putFinanceAgreementsByParentIdBoardDefaultsById(id: number, parentId: number, boardDefault: BoardDefault): Promise<BoardDefault>;
    patchFinanceAgreementsByParentIdBoardDefaultsById(id: number, parentId: number, patchOperations: Array<PatchOperation>): Promise<BoardDefault>;
    getFinanceAgreementsByParentIdBoardDefaultsCount(parentId: number, params?: CommonParameters): Promise<Count>;
    getFinanceAgreementsByParentIdConfigurations(parentId: number, params?: CommonParameters): Promise<Array<ConfigurationReference>>;
    postFinanceAgreementsByParentIdConfigurations(parentId: number, configuration: ConfigurationReference): Promise<ConfigurationReference>;
    getFinanceAgreementsByParentIdConfigurationsById(id: number, parentId: number, params?: CommonParameters): Promise<ConfigurationReference>;
    deleteFinanceAgreementsByParentIdConfigurationsById(id: number, parentId: number): Promise<NoContentResponse>;
    getFinanceAgreementsByParentIdConfigurationsCount(parentId: number, params?: CommonParameters): Promise<Count>;
    getFinanceAgreementsByParentIdSites(parentId: number, params?: CommonParameters): Promise<Array<AgreementSite>>;
    postFinanceAgreementsByParentIdSites(parentId: number, site: AgreementSite): Promise<AgreementSite>;
    getFinanceAgreementsByParentIdSitesById(id: number, parentId: number, params?: CommonParameters): Promise<AgreementSite>;
    deleteFinanceAgreementsByParentIdSitesById(id: number, parentId: number): Promise<NoContentResponse>;
    putFinanceAgreementsByParentIdSitesById(id: number, parentId: number, site: AgreementSite): Promise<AgreementSite>;
    patchFinanceAgreementsByParentIdSitesById(id: number, parentId: number, patchOperations: Array<PatchOperation>): Promise<AgreementSite>;
    getFinanceAgreementsByParentIdSitesCount(parentId: number, params?: CommonParameters): Promise<Count>;
    getFinanceAgreementsByParentIdWorkRoleExclusions(parentId: number, params?: CommonParameters): Promise<Array<AgreementWorkRoleExclusion>>;
    postFinanceAgreementsByParentIdWorkRoleExclusions(parentId: number, workRoleExclusion: AgreementWorkRoleExclusion): Promise<AgreementWorkRoleExclusion>;
    deleteFinanceAgreementsByParentIdWorkRoleExclusionsById(id: number, parentId: number): Promise<NoContentResponse>;
    getFinanceAgreementsByParentIdWorkRoleExclusionsCount(parentId: number, params?: CommonParameters): Promise<Count>;
    getFinanceAgreementsByParentIdWorkroles(parentId: number, params?: CommonParameters): Promise<Array<AgreementWorkRole>>;
    postFinanceAgreementsByParentIdWorkroles(parentId: number, workRole: AgreementWorkRole): Promise<AgreementWorkRole>;
    getFinanceAgreementsByParentIdWorkrolesById(id: number, parentId: number, params?: CommonParameters): Promise<AgreementWorkRole>;
    deleteFinanceAgreementsByParentIdWorkrolesById(id: number, parentId: number): Promise<NoContentResponse>;
    putFinanceAgreementsByParentIdWorkrolesById(id: number, parentId: number, workRole: AgreementWorkRole): Promise<AgreementWorkRole>;
    patchFinanceAgreementsByParentIdWorkrolesById(id: number, parentId: number, patchOperations: Array<PatchOperation>): Promise<AgreementWorkRole>;
    getFinanceAgreementsByParentIdWorkrolesCount(parentId: number, params?: CommonParameters): Promise<Count>;
    getFinanceAgreementsByParentIdWorkTypeExclusions(parentId: number, params?: CommonParameters): Promise<Array<AgreementWorkTypeExclusion>>;
    postFinanceAgreementsByParentIdWorkTypeExclusions(parentId: number, workTypeExclusion: AgreementWorkTypeExclusion): Promise<AgreementWorkTypeExclusion>;
    deleteFinanceAgreementsByParentIdWorkTypeExclusionsById(id: number, parentId: number): Promise<NoContentResponse>;
    getFinanceAgreementsByParentIdWorkTypeExclusionsCount(parentId: number, params?: CommonParameters): Promise<Count>;
    getFinanceAgreementsByParentIdWorktypes(parentId: number, params?: CommonParameters): Promise<Array<AgreementWorkType>>;
    postFinanceAgreementsByParentIdWorktypes(parentId: number, workType: AgreementWorkType): Promise<AgreementWorkType>;
    getFinanceAgreementsByParentIdWorktypesById(id: number, parentId: number, params?: CommonParameters): Promise<AgreementWorkType>;
    deleteFinanceAgreementsByParentIdWorktypesById(id: number, parentId: number): Promise<NoContentResponse>;
    putFinanceAgreementsByParentIdWorktypesById(id: number, parentId: number, workType: AgreementWorkType): Promise<AgreementWorkType>;
    patchFinanceAgreementsByParentIdWorktypesById(id: number, parentId: number, patchOperations: Array<PatchOperation>): Promise<AgreementWorkType>;
    getFinanceAgreementsByParentIdWorktypesCount(parentId: number, params?: CommonParameters): Promise<Count>;
    getFinanceAgreementsCount(params?: CommonParameters): Promise<Count>;
    getFinanceAgreementsTypes(params?: CommonParameters): Promise<Array<AgreementType>>;
    postFinanceAgreementsTypes(agreementType: AgreementType): Promise<AgreementType>;
    getFinanceAgreementsTypesById(id: number, params?: CommonParameters): Promise<AgreementType>;
    deleteFinanceAgreementsTypesById(id: number): Promise<NoContentResponse>;
    putFinanceAgreementsTypesById(id: number, agreementType: AgreementType): Promise<AgreementType>;
    patchFinanceAgreementsTypesById(id: number, patchOperations: Array<PatchOperation>): Promise<AgreementType>;
    getFinanceAgreementsTypesByIdInfo(id: number, params?: CommonParameters): Promise<AgreementTypeInfo>;
    getFinanceAgreementsTypesByIdUsages(id: number, params?: CommonParameters): Promise<Array<Usage>>;
    getFinanceAgreementsTypesByIdUsagesList(id: number, params?: CommonParameters): Promise<Array<Usage>>;
    getFinanceAgreementsTypesCount(params?: CommonParameters): Promise<Count>;
    getFinanceAgreementsTypesInfo(params?: CommonParameters): Promise<Array<AgreementTypeInfo>>;
    getFinanceAgreementsTypesInfoCount(params?: CommonParameters): Promise<Count>;
    getFinanceAgreementTypesByParentIdBoardDefaults(parentId: number, params?: CommonParameters): Promise<Array<AgreementTypeBoardDefault>>;
    postFinanceAgreementTypesByParentIdBoardDefaults(parentId: number, boardDefault: AgreementTypeBoardDefault): Promise<AgreementTypeBoardDefault>;
    getFinanceAgreementTypesByParentIdBoardDefaultsById(id: number, parentId: number, params?: CommonParameters): Promise<AgreementTypeBoardDefault>;
    deleteFinanceAgreementTypesByParentIdBoardDefaultsById(id: number, parentId: number): Promise<NoContentResponse>;
    putFinanceAgreementTypesByParentIdBoardDefaultsById(id: number, parentId: number, boardDefault: AgreementTypeBoardDefault): Promise<AgreementTypeBoardDefault>;
    patchFinanceAgreementTypesByParentIdBoardDefaultsById(id: number, parentId: number, patchOperations: Array<PatchOperation>): Promise<AgreementTypeBoardDefault>;
    getFinanceAgreementTypesByParentIdBoardDefaultsCount(parentId: number, params?: CommonParameters): Promise<Count>;
    getFinanceAgreementTypesByParentIdWorkRoleExclusions(parentId: number, params?: CommonParameters): Promise<Array<AgreementTypeWorkRoleExclusion>>;
    postFinanceAgreementTypesByParentIdWorkRoleExclusions(parentId: number, workRoleExclusion: AgreementTypeWorkRoleExclusion): Promise<AgreementTypeWorkRoleExclusion>;
    getFinanceAgreementTypesByParentIdWorkRoleExclusionsById(id: number, parentId: number, params?: CommonParameters): Promise<AgreementTypeWorkRoleExclusion>;
    deleteFinanceAgreementTypesByParentIdWorkRoleExclusionsById(id: number, parentId: number): Promise<NoContentResponse>;
    getFinanceAgreementTypesByParentIdWorkRoleExclusionsCount(parentId: number, params?: CommonParameters): Promise<Count>;
    getFinanceAgreementTypesByParentIdWorkroles(parentId: number, params?: CommonParameters): Promise<Array<AgreementTypeWorkRole>>;
    postFinanceAgreementTypesByParentIdWorkroles(parentId: number, workRole: AgreementTypeWorkRole): Promise<AgreementTypeWorkRole>;
    getFinanceAgreementTypesByParentIdWorkrolesById(id: number, parentId: number, params?: CommonParameters): Promise<AgreementTypeWorkRole>;
    deleteFinanceAgreementTypesByParentIdWorkrolesById(id: number, parentId: number): Promise<NoContentResponse>;
    putFinanceAgreementTypesByParentIdWorkrolesById(id: number, parentId: number, workRole: AgreementTypeWorkRole): Promise<AgreementTypeWorkRole>;
    patchFinanceAgreementTypesByParentIdWorkrolesById(id: number, parentId: number, patchOperations: Array<PatchOperation>): Promise<AgreementTypeWorkRole>;
    getFinanceAgreementTypesByParentIdWorkrolesCount(parentId: number, params?: CommonParameters): Promise<Count>;
    getFinanceAgreementTypesByParentIdWorkrolesInfo(parentId: number, params?: CommonParameters): Promise<Array<AgreementTypeWorkRoleInfo>>;
    getFinanceAgreementTypesByParentIdWorkrolesInfoById(id: number, parentId: number, params?: CommonParameters): Promise<AgreementTypeWorkRoleInfo>;
    getFinanceAgreementTypesByParentIdWorkrolesInfoCount(parentId: number, params?: CommonParameters): Promise<Count>;
    getFinanceAgreementTypesByParentIdWorkTypeExclusions(parentId: number, params?: CommonParameters): Promise<Array<AgreementTypeWorkTypeExclusion>>;
    postFinanceAgreementTypesByParentIdWorkTypeExclusions(parentId: number, workTypeExclusion: AgreementTypeWorkTypeExclusion): Promise<AgreementTypeWorkTypeExclusion>;
    getFinanceAgreementTypesByParentIdWorkTypeExclusionsById(id: number, parentId: number, params?: CommonParameters): Promise<AgreementTypeWorkTypeExclusion>;
    deleteFinanceAgreementTypesByParentIdWorkTypeExclusionsById(id: number, parentId: number): Promise<NoContentResponse>;
    getFinanceAgreementTypesByParentIdWorkTypeExclusionsCount(parentId: number, params?: CommonParameters): Promise<Count>;
    getFinanceAgreementTypesByParentIdWorktypes(parentId: number, params?: CommonParameters): Promise<Array<AgreementTypeWorkType>>;
    postFinanceAgreementTypesByParentIdWorktypes(parentId: number, workType: AgreementTypeWorkType): Promise<AgreementTypeWorkType>;
    getFinanceAgreementTypesByParentIdWorktypesById(id: number, parentId: number, params?: CommonParameters): Promise<AgreementTypeWorkType>;
    deleteFinanceAgreementTypesByParentIdWorktypesById(id: number, parentId: number): Promise<NoContentResponse>;
    putFinanceAgreementTypesByParentIdWorktypesById(id: number, parentId: number, workType: AgreementTypeWorkType): Promise<AgreementTypeWorkType>;
    patchFinanceAgreementTypesByParentIdWorktypesById(id: number, parentId: number, patchOperations: Array<PatchOperation>): Promise<AgreementTypeWorkType>;
    getFinanceAgreementTypesByParentIdWorktypesCount(parentId: number, params?: CommonParameters): Promise<Count>;
    getFinanceBatchSetups(params?: CommonParameters): Promise<Array<AgreementBatchSetup>>;
    getFinanceBatchSetupsById(id: number, params?: CommonParameters): Promise<AgreementBatchSetup>;
    putFinanceBatchSetupsById(id: number, batchSetup: AgreementBatchSetup): Promise<AgreementBatchSetup>;
    patchFinanceBatchSetupsById(id: number, patchOperations: Array<PatchOperation>): Promise<AgreementBatchSetup>;
    getFinanceBatchSetupsCount(params?: CommonParameters): Promise<Count>;
    getFinanceBillingCycles(params?: CommonParameters): Promise<Array<BillingCycle>>;
    postFinanceBillingCycles(billingCycle: BillingCycle): Promise<BillingCycle>;
    getFinanceBillingCyclesById(id: number, params?: CommonParameters): Promise<BillingCycle>;
    deleteFinanceBillingCyclesById(id: number): Promise<NoContentResponse>;
    putFinanceBillingCyclesById(id: number, billingCycle: BillingCycle): Promise<BillingCycle>;
    patchFinanceBillingCyclesById(id: number, patchOperations: Array<PatchOperation>): Promise<BillingCycle>;
    getFinanceBillingCyclesByIdInfo(id: number, params?: CommonParameters): Promise<BillingCycleInfo>;
    getFinanceBillingCyclesByIdUsages(id: number, params?: CommonParameters): Promise<Array<Usage>>;
    getFinanceBillingCyclesByIdUsagesList(id: number, params?: CommonParameters): Promise<Array<Usage>>;
    getFinanceBillingCyclesCount(params?: CommonParameters): Promise<Count>;
    getFinanceBillingCyclesInfo(params?: CommonParameters): Promise<Array<BillingCycleInfo>>;
    getFinanceBillingCyclesInfoCount(params?: CommonParameters): Promise<Count>;
    getFinanceBillingSetups(params?: CommonParameters): Promise<Array<BillingSetup>>;
    postFinanceBillingSetups(billingSetup: BillingSetup): Promise<BillingSetup>;
    getFinanceBillingSetupsById(id: number, params?: CommonParameters): Promise<BillingSetup>;
    deleteFinanceBillingSetupsById(id: number): Promise<NoContentResponse>;
    putFinanceBillingSetupsById(id: number, billingSetup: BillingSetup): Promise<BillingSetup>;
    patchFinanceBillingSetupsById(id: number, patchOperations: Array<PatchOperation>): Promise<BillingSetup>;
    getFinanceBillingSetupsByIdInfo(id: number, params?: CommonParameters): Promise<BillingSetupInfo>;
    getFinanceBillingSetupsByParentIdRoutings(parentId: number, params?: CommonParameters): Promise<Array<BillingSetupRouting>>;
    postFinanceBillingSetupsByParentIdRoutings(parentId: number, billingSetupRouting: BillingSetupRouting): Promise<BillingSetupRouting>;
    getFinanceBillingSetupsByParentIdRoutingsById(id: number, parentId: number, params?: CommonParameters): Promise<BillingSetupRouting>;
    deleteFinanceBillingSetupsByParentIdRoutingsById(id: number, parentId: number): Promise<NoContentResponse>;
    putFinanceBillingSetupsByParentIdRoutingsById(id: number, parentId: number, billingSetupRouting: BillingSetupRouting): Promise<BillingSetupRouting>;
    patchFinanceBillingSetupsByParentIdRoutingsById(id: number, parentId: number, patchOperations: Array<PatchOperation>): Promise<BillingSetupRouting>;
    getFinanceBillingSetupsByParentIdRoutingsCount(parentId: number, params?: CommonParameters): Promise<Count>;
    getFinanceBillingSetupsCount(params?: CommonParameters): Promise<Count>;
    getFinanceBillingSetupsInfo(params?: CommonParameters): Promise<Array<BillingSetupInfo>>;
    getFinanceBillingStatuses(params?: CommonParameters): Promise<Array<BillingStatus>>;
    postFinanceBillingStatuses(billingStatus: BillingStatus): Promise<BillingStatus>;
    getFinanceBillingStatusesById(id: number, params?: CommonParameters): Promise<BillingStatus>;
    deleteFinanceBillingStatusesById(id: number): Promise<NoContentResponse>;
    putFinanceBillingStatusesById(id: number, billingStatus: BillingStatus): Promise<BillingStatus>;
    patchFinanceBillingStatusesById(id: number, patchOperations: Array<PatchOperation>): Promise<BillingStatus>;
    getFinanceBillingStatusesByIdInfo(id: number, params?: CommonParameters): Promise<BillingStatusInfo>;
    getFinanceBillingStatusesByIdUsages(id: number, params?: CommonParameters): Promise<Array<Usage>>;
    getFinanceBillingStatusesByIdUsagesList(id: number, params?: CommonParameters): Promise<Array<Usage>>;
    getFinanceBillingStatusesCount(params?: CommonParameters): Promise<Count>;
    getFinanceBillingStatusesInfo(params?: CommonParameters): Promise<Array<BillingStatusInfo>>;
    getFinanceBillingStatusesInfoCount(params?: CommonParameters): Promise<Count>;
    getFinanceBillingTerms(params?: CommonParameters): Promise<Array<BillingTerm>>;
    postFinanceBillingTerms(billingTerms: BillingTerm): Promise<BillingTerm>;
    getFinanceBillingTermsById(id: number, params?: CommonParameters): Promise<BillingTerm>;
    deleteFinanceBillingTermsById(id: number): Promise<NoContentResponse>;
    putFinanceBillingTermsById(id: number, billingTerms: BillingTerm): Promise<BillingTerm>;
    patchFinanceBillingTermsById(id: number, patchOperations: Array<PatchOperation>): Promise<BillingTerm>;
    getFinanceBillingTermsByIdInfo(id: number, params?: CommonParameters): Promise<BillingTermInfo>;
    getFinanceBillingTermsByIdUsages(id: number, params?: CommonParameters): Promise<Array<Usage>>;
    getFinanceBillingTermsByIdUsagesList(id: number, params?: CommonParameters): Promise<Array<Usage>>;
    getFinanceBillingTermsCount(params?: CommonParameters): Promise<Count>;
    getFinanceBillingTermsInfo(params?: CommonParameters): Promise<Array<BillingTermInfo>>;
    getFinanceBillingTermsInfoCount(params?: CommonParameters): Promise<Count>;
    putFinanceClosedInvoicesById(id: number, closedInvoice: ClosedInvoice): Promise<ClosedInvoice>;
    patchFinanceClosedInvoicesById(id: number, patchOperations: Array<PatchOperation>): Promise<ClosedInvoice>;
    getFinanceCompanyFinance(params?: CommonParameters): Promise<Array<CompanyFinance>>;
    getFinanceCompanyFinanceById(id: number, params?: CommonParameters): Promise<CompanyFinance>;
    patchFinanceCompanyFinanceById(id: number, patchOperations: Array<PatchOperation>): Promise<CompanyFinance>;
    getFinanceCompanyFinanceCount(params?: CommonParameters): Promise<Count>;
    getFinanceCurrencies(params?: CommonParameters): Promise<Array<FinanceCurrency>>;
    postFinanceCurrencies(currency: FinanceCurrency): Promise<FinanceCurrency>;
    getFinanceCurrenciesById(id: number, params?: CommonParameters): Promise<FinanceCurrency>;
    putFinanceCurrenciesById(id: number, currency: FinanceCurrency): Promise<FinanceCurrency>;
    patchFinanceCurrenciesById(id: number, patchOperations: Array<PatchOperation>): Promise<FinanceCurrency>;
    deleteFinanceCurrenciesById(id: number): Promise<NoContentResponse>;
    getFinanceCurrenciesByIdInfo(id: number, params?: CommonParameters): Promise<CurrencyInfo>;
    getFinanceCurrenciesByIdUsages(id: number, params?: CommonParameters): Promise<Array<Usage>>;
    getFinanceCurrenciesByIdUsagesList(id: number, params?: CommonParameters): Promise<Array<Usage>>;
    getFinanceCurrenciesCount(params?: CommonParameters): Promise<Count>;
    getFinanceCurrenciesInfo(params?: CommonParameters): Promise<Array<CurrencyInfo>>;
    getFinanceCurrenciesInfoCount(params?: CommonParameters): Promise<Count>;
    getFinanceDeliveryMethods(params?: CommonParameters): Promise<Array<DeliveryMethod>>;
    postFinanceDeliveryMethods(deliveryMethod: DeliveryMethod): Promise<DeliveryMethod>;
    getFinanceDeliveryMethodsById(id: number, params?: CommonParameters): Promise<DeliveryMethod>;
    deleteFinanceDeliveryMethodsById(id: number): Promise<NoContentResponse>;
    putFinanceDeliveryMethodsById(id: number, deliveryMethod: DeliveryMethod): Promise<DeliveryMethod>;
    patchFinanceDeliveryMethodsById(id: number, patchOperations: Array<PatchOperation>): Promise<DeliveryMethod>;
    getFinanceDeliveryMethodsCount(params?: CommonParameters): Promise<Count>;
    getFinanceGlAccounts(params?: CommonParameters): Promise<Array<GLAccount>>;
    postFinanceGlAccounts(glAccount: GLAccount): Promise<GLAccount>;
    getFinanceGlAccountsById(id: number, params?: CommonParameters): Promise<GLAccount>;
    putFinanceGlAccountsById(id: number, glAccount: GLAccount): Promise<GLAccount>;
    patchFinanceGlAccountsById(id: number, patchOperations: Array<PatchOperation>): Promise<GLAccount>;
    deleteFinanceGlAccountsById(id: number): Promise<NoContentResponse>;
    getFinanceGlAccountsCount(params?: CommonParameters): Promise<Count>;
    getFinanceGlAccountsMappedTypes(params?: CommonParameters): Promise<Array<MappedType>>;
    getFinanceGlAccountsMappedTypesCount(params?: CommonParameters): Promise<Count>;
    getFinanceGlCaptions(params?: CommonParameters): Promise<Array<GLCaption>>;
    getFinanceGlCaptionsById(id: number, params?: CommonParameters): Promise<GLCaption>;
    putFinanceGlCaptionsById(id: number, glCaption: GLCaption): Promise<GLCaption>;
    patchFinanceGlCaptionsById(id: number, patchOperations: Array<PatchOperation>): Promise<GLCaption>;
    getFinanceGlCaptionsCount(params?: CommonParameters): Promise<Count>;
    getFinanceGlpaths(params?: CommonParameters): Promise<Array<GLPath>>;
    postFinanceGlpaths(gLPath: GLPath): Promise<GLPath>;
    getFinanceGlpathsById(id: number, params?: CommonParameters): Promise<GLPath>;
    deleteFinanceGlpathsById(id: number): Promise<NoContentResponse>;
    putFinanceGlpathsById(id: number, gLPath: GLPath): Promise<GLPath>;
    patchFinanceGlpathsById(id: number, patchOperations: Array<PatchOperation>): Promise<GLPath>;
    getFinanceGlpathsCount(params?: CommonParameters): Promise<Count>;
    getFinanceInfoCurrencyCodes(params?: CommonParameters): Promise<Array<CurrencyCode>>;
    getFinanceInfoCurrencyCodesById(id: number, params?: CommonParameters): Promise<CurrencyCode>;
    getFinanceInfoCurrencyCodesCount(params?: CommonParameters): Promise<Count>;
    getFinanceInfoInvoiceById(id: number, params?: CommonParameters): Promise<InvoiceInfo>;
    getFinanceInfoTaxIntegrations(params?: CommonParameters): Promise<Array<TaxIntegrationInfo>>;
    getFinanceInfoTaxIntegrationsById(id: number, params?: CommonParameters): Promise<TaxIntegrationInfo>;
    getFinanceInfoTaxIntegrationsCount(params?: CommonParameters): Promise<Count>;
    getFinanceInvoiceEmailTemplates(params?: CommonParameters): Promise<Array<InvoiceEmailTemplate>>;
    postFinanceInvoiceEmailTemplates(invoiceEmailTemplate: InvoiceEmailTemplate): Promise<InvoiceEmailTemplate>;
    getFinanceInvoiceEmailTemplatesById(id: number, params?: CommonParameters): Promise<InvoiceEmailTemplate>;
    deleteFinanceInvoiceEmailTemplatesById(id: number): Promise<NoContentResponse>;
    putFinanceInvoiceEmailTemplatesById(id: number, invoiceEmailTemplate: InvoiceEmailTemplate): Promise<InvoiceEmailTemplate>;
    patchFinanceInvoiceEmailTemplatesById(id: number, patchOperations: Array<PatchOperation>): Promise<InvoiceEmailTemplate>;
    getFinanceInvoiceEmailTemplatesByIdInfo(id: number, params?: CommonParameters): Promise<InvoiceEmailTemplateInfo>;
    getFinanceInvoiceEmailTemplatesByIdUsages(id: number, params?: CommonParameters): Promise<Array<Usage>>;
    getFinanceInvoiceEmailTemplatesByIdUsagesList(id: number, params?: CommonParameters): Promise<Array<Usage>>;
    getFinanceInvoiceEmailTemplatesCount(params?: CommonParameters): Promise<Count>;
    getFinanceInvoiceEmailTemplatesInfo(params?: CommonParameters): Promise<Array<InvoiceEmailTemplateInfo>>;
    getFinanceInvoiceEmailTemplatesInfoCount(params?: CommonParameters): Promise<Count>;
    getFinanceInvoices(params?: CommonParameters): Promise<Array<Invoice>>;
    postFinanceInvoices(invoice: Invoice): Promise<Invoice>;
    getFinanceInvoicesById(id: number, params?: CommonParameters): Promise<Invoice>;
    deleteFinanceInvoicesById(id: number): Promise<NoContentResponse>;
    putFinanceInvoicesById(id: number, invoice: Invoice): Promise<Invoice>;
    patchFinanceInvoicesById(id: number, patchOperations: Array<PatchOperation>): Promise<Invoice>;
    getFinanceInvoicesByIdPdf(id: number, params?: CommonParameters): Promise<PDFResponse>;
    getFinanceInvoicesByParentIdPayments(parentId: number, params?: CommonParameters): Promise<Array<Payment>>;
    postFinanceInvoicesByParentIdPayments(parentId: number, payment: Payment): Promise<Payment>;
    getFinanceInvoicesByParentIdPaymentsById(id: number, parentId: number, params?: CommonParameters): Promise<Payment>;
    patchFinanceInvoicesByParentIdPaymentsById(id: number, parentId: number, patchOperations: Array<PatchOperation>): Promise<Payment>;
    putFinanceInvoicesByParentIdPaymentsById(id: number, parentId: number, payment: Payment): Promise<Payment>;
    deleteFinanceInvoicesByParentIdPaymentsById(id: number, parentId: number): Promise<NoContentResponse>;
    getFinanceInvoicesCount(params?: CommonParameters): Promise<Count>;
    getFinanceInvoiceTemplates(params?: CommonParameters): Promise<Array<InvoiceTemplate>>;
    postFinanceInvoiceTemplates(invoiceTemplate: InvoiceTemplate): Promise<InvoiceTemplate>;
    getFinanceInvoiceTemplatesById(id: number, params?: CommonParameters): Promise<InvoiceTemplate>;
    patchFinanceInvoiceTemplatesById(id: number, patchOperations: Array<PatchOperation>): Promise<InvoiceTemplate>;
    putFinanceInvoiceTemplatesById(id: number, invoiceTemplate: InvoiceTemplate): Promise<InvoiceTemplate>;
    deleteFinanceInvoiceTemplatesById(id: number): Promise<NoContentResponse>;
    getFinanceInvoiceTemplatesByIdUsages(id: number, params?: CommonParameters): Promise<Array<Usage>>;
    getFinanceInvoiceTemplatesByIdUsagesList(id: number, params?: CommonParameters): Promise<Array<Usage>>;
    getFinanceInvoiceTemplatesCount(params?: CommonParameters): Promise<Count>;
    getFinanceInvoiceTemplateSetups(params?: CommonParameters): Promise<Array<InvoiceTemplateSetup>>;
    getFinanceInvoiceTemplateSetupsById(id: number, params?: CommonParameters): Promise<InvoiceTemplateSetup>;
    getFinanceInvoiceTemplateSetupsCount(params?: CommonParameters): Promise<Count>;
    getFinanceTaxCodes(params?: CommonParameters): Promise<Array<TaxCode>>;
    postFinanceTaxCodes(taxCode: TaxCode): Promise<TaxCode>;
    getFinanceTaxCodesByGrandparentIdExpenseTypeExemptionsByParentIdTaxableExpenseTypeLevels(parentId: number, grandparentId: number, params?: CommonParameters): Promise<Array<TaxableExpenseTypeLevel>>;
    postFinanceTaxCodesByGrandparentIdExpenseTypeExemptionsByParentIdTaxableExpenseTypeLevels(parentId: number, grandparentId: number, taxableExpenseTypeLevel: TaxableExpenseTypeLevel): Promise<TaxableExpenseTypeLevel>;
    getFinanceTaxCodesByGrandparentIdExpenseTypeExemptionsByParentIdTaxableExpenseTypeLevelsById(id: number, parentId: number, grandparentId: number, params?: CommonParameters): Promise<TaxableExpenseTypeLevel>;
    deleteFinanceTaxCodesByGrandparentIdExpenseTypeExemptionsByParentIdTaxableExpenseTypeLevelsById(id: number, parentId: number, grandparentId: number): Promise<NoContentResponse>;
    putFinanceTaxCodesByGrandparentIdExpenseTypeExemptionsByParentIdTaxableExpenseTypeLevelsById(id: number, parentId: number, grandparentId: number, taxableExpenseTypeLevel: TaxableExpenseTypeLevel): Promise<TaxableExpenseTypeLevel>;
    patchFinanceTaxCodesByGrandparentIdExpenseTypeExemptionsByParentIdTaxableExpenseTypeLevelsById(id: number, parentId: number, grandparentId: number, patchOperations: Array<PatchOperation>): Promise<TaxableExpenseTypeLevel>;
    getFinanceTaxCodesByGrandparentIdExpenseTypeExemptionsByParentIdTaxableExpenseTypeLevelsCount(parentId: number, grandparentId: number, params?: CommonParameters): Promise<Count>;
    getFinanceTaxCodesByGrandparentIdProductTypeExemptionsByParentIdTaxableProductTypeLevels(parentId: number, grandparentId: number, params?: CommonParameters): Promise<Array<TaxableProductTypeLevel>>;
    postFinanceTaxCodesByGrandparentIdProductTypeExemptionsByParentIdTaxableProductTypeLevels(parentId: number, grandparentId: number, taxableProductTypeLevel: TaxableProductTypeLevel): Promise<TaxableProductTypeLevel>;
    getFinanceTaxCodesByGrandparentIdProductTypeExemptionsByParentIdTaxableProductTypeLevelsById(id: number, parentId: number, grandparentId: number, params?: CommonParameters): Promise<TaxableProductTypeLevel>;
    deleteFinanceTaxCodesByGrandparentIdProductTypeExemptionsByParentIdTaxableProductTypeLevelsById(id: number, parentId: number, grandparentId: number): Promise<NoContentResponse>;
    putFinanceTaxCodesByGrandparentIdProductTypeExemptionsByParentIdTaxableProductTypeLevelsById(id: number, parentId: number, grandparentId: number, taxableProductTypeLevel: TaxableProductTypeLevel): Promise<TaxableProductTypeLevel>;
    patchFinanceTaxCodesByGrandparentIdProductTypeExemptionsByParentIdTaxableProductTypeLevelsById(id: number, parentId: number, grandparentId: number, patchOperations: Array<PatchOperation>): Promise<TaxableProductTypeLevel>;
    getFinanceTaxCodesByGrandparentIdProductTypeExemptionsByParentIdTaxableProductTypeLevelsCount(parentId: number, grandparentId: number, params?: CommonParameters): Promise<Count>;
    getFinanceTaxCodesByGrandparentIdTaxCodeXRefsByParentIdTaxableXRefLevels(parentId: number, grandparentId: number, params?: CommonParameters): Promise<Array<TaxableXRefLevel>>;
    postFinanceTaxCodesByGrandparentIdTaxCodeXRefsByParentIdTaxableXRefLevels(parentId: number, grandparentId: number, taxableXRefLevel: TaxableXRefLevel): Promise<TaxableXRefLevel>;
    getFinanceTaxCodesByGrandparentIdTaxCodeXRefsByParentIdTaxableXRefLevelsById(id: number, parentId: number, grandparentId: number, params?: CommonParameters): Promise<TaxableXRefLevel>;
    deleteFinanceTaxCodesByGrandparentIdTaxCodeXRefsByParentIdTaxableXRefLevelsById(id: number, parentId: number, grandparentId: number): Promise<NoContentResponse>;
    putFinanceTaxCodesByGrandparentIdTaxCodeXRefsByParentIdTaxableXRefLevelsById(id: number, parentId: number, grandparentId: number, taxableXRefLevel: TaxableXRefLevel): Promise<TaxableXRefLevel>;
    patchFinanceTaxCodesByGrandparentIdTaxCodeXRefsByParentIdTaxableXRefLevelsById(id: number, parentId: number, grandparentId: number, patchOperations: Array<PatchOperation>): Promise<TaxableXRefLevel>;
    getFinanceTaxCodesByGrandparentIdTaxCodeXRefsByParentIdTaxableXRefLevelsCount(parentId: number, grandparentId: number, params?: CommonParameters): Promise<Count>;
    getFinanceTaxCodesByGrandparentIdWorkRoleExemptionsByParentIdTaxableWorkRoleLevels(parentId: number, grandparentId: number, params?: CommonParameters): Promise<Array<TaxableWorkRoleLevel>>;
    postFinanceTaxCodesByGrandparentIdWorkRoleExemptionsByParentIdTaxableWorkRoleLevels(parentId: number, grandparentId: number, taxableWorkRoleLevel: TaxableWorkRoleLevel): Promise<TaxableWorkRoleLevel>;
    getFinanceTaxCodesByGrandparentIdWorkRoleExemptionsByParentIdTaxableWorkRoleLevelsById(id: number, parentId: number, grandparentId: number, params?: CommonParameters): Promise<TaxableWorkRoleLevel>;
    deleteFinanceTaxCodesByGrandparentIdWorkRoleExemptionsByParentIdTaxableWorkRoleLevelsById(id: number, parentId: number, grandparentId: number): Promise<NoContentResponse>;
    putFinanceTaxCodesByGrandparentIdWorkRoleExemptionsByParentIdTaxableWorkRoleLevelsById(id: number, parentId: number, grandparentId: number, taxableWorkRoleLevel: TaxableWorkRoleLevel): Promise<TaxableWorkRoleLevel>;
    patchFinanceTaxCodesByGrandparentIdWorkRoleExemptionsByParentIdTaxableWorkRoleLevelsById(id: number, parentId: number, grandparentId: number, patchOperations: Array<PatchOperation>): Promise<TaxableWorkRoleLevel>;
    getFinanceTaxCodesByGrandparentIdWorkRoleExemptionsByParentIdTaxableWorkRoleLevelsCount(parentId: number, grandparentId: number, params?: CommonParameters): Promise<Count>;
    getFinanceTaxCodesById(id: number, params?: CommonParameters): Promise<TaxCode>;
    deleteFinanceTaxCodesById(id: number): Promise<NoContentResponse>;
    putFinanceTaxCodesById(id: number, taxCode: TaxCode): Promise<TaxCode>;
    patchFinanceTaxCodesById(id: number, patchOperations: Array<PatchOperation>): Promise<TaxCode>;
    postFinanceTaxCodesByIdCopy(id: number): Promise<TaxCode>;
    getFinanceTaxCodesByIdInfo(id: number, params?: CommonParameters): Promise<TaxCodeInfo>;
    getFinanceTaxCodesByIdUsages(id: number, params?: CommonParameters): Promise<Array<Usage>>;
    getFinanceTaxCodesByIdUsagesList(id: number, params?: CommonParameters): Promise<Array<Usage>>;
    getFinanceTaxCodesByParentIdExpenseTypeExemptions(parentId: number, params?: CommonParameters): Promise<Array<ExpenseTypeExemption>>;
    postFinanceTaxCodesByParentIdExpenseTypeExemptions(parentId: number, expenseTypeExemption: ExpenseTypeExemption): Promise<ExpenseTypeExemption>;
    getFinanceTaxCodesByParentIdExpenseTypeExemptionsById(id: number, parentId: number, params?: CommonParameters): Promise<ExpenseTypeExemption>;
    deleteFinanceTaxCodesByParentIdExpenseTypeExemptionsById(id: number, parentId: number): Promise<NoContentResponse>;
    putFinanceTaxCodesByParentIdExpenseTypeExemptionsById(id: number, parentId: number, expenseTypeExemption: ExpenseTypeExemption): Promise<ExpenseTypeExemption>;
    patchFinanceTaxCodesByParentIdExpenseTypeExemptionsById(id: number, parentId: number, patchOperations: Array<PatchOperation>): Promise<ExpenseTypeExemption>;
    getFinanceTaxCodesByParentIdExpenseTypeExemptionsCount(parentId: number, params?: CommonParameters): Promise<Count>;
    getFinanceTaxCodesByParentIdProductTypeExemptions(parentId: number, params?: CommonParameters): Promise<Array<ProductTypeExemption>>;
    postFinanceTaxCodesByParentIdProductTypeExemptions(parentId: number, productTypeExemption: ProductTypeExemption): Promise<ProductTypeExemption>;
    getFinanceTaxCodesByParentIdProductTypeExemptionsById(id: number, parentId: number, params?: CommonParameters): Promise<ProductTypeExemption>;
    deleteFinanceTaxCodesByParentIdProductTypeExemptionsById(id: number, parentId: number): Promise<NoContentResponse>;
    putFinanceTaxCodesByParentIdProductTypeExemptionsById(id: number, parentId: number, productTypeExemption: ProductTypeExemption): Promise<ProductTypeExemption>;
    patchFinanceTaxCodesByParentIdProductTypeExemptionsById(id: number, parentId: number, patchOperations: Array<PatchOperation>): Promise<ProductTypeExemption>;
    getFinanceTaxCodesByParentIdProductTypeExemptionsCount(parentId: number, params?: CommonParameters): Promise<Count>;
    getFinanceTaxCodesByParentIdTaxCodeLevels(parentId: number, params?: CommonParameters): Promise<Array<TaxCodeLevel>>;
    postFinanceTaxCodesByParentIdTaxCodeLevels(parentId: number, taxCodeLevel: TaxCodeLevel): Promise<TaxCodeLevel>;
    getFinanceTaxCodesByParentIdTaxCodeLevelsById(id: number, parentId: number, params?: CommonParameters): Promise<TaxCodeLevel>;
    deleteFinanceTaxCodesByParentIdTaxCodeLevelsById(id: number, parentId: number): Promise<NoContentResponse>;
    putFinanceTaxCodesByParentIdTaxCodeLevelsById(id: number, parentId: number, taxCodeLevel: TaxCodeLevel): Promise<TaxCodeLevel>;
    patchFinanceTaxCodesByParentIdTaxCodeLevelsById(id: number, parentId: number, patchOperations: Array<PatchOperation>): Promise<TaxCodeLevel>;
    getFinanceTaxCodesByParentIdTaxCodeLevelsCount(parentId: number, params?: CommonParameters): Promise<Count>;
    getFinanceTaxCodesByParentIdTaxCodeXRefs(parentId: number, params?: CommonParameters): Promise<Array<TaxCodeXRef>>;
    postFinanceTaxCodesByParentIdTaxCodeXRefs(parentId: number, taxCodeXRef: TaxCodeXRef): Promise<TaxCodeXRef>;
    getFinanceTaxCodesByParentIdTaxCodeXRefsById(id: number, parentId: number, params?: CommonParameters): Promise<TaxCodeXRef>;
    deleteFinanceTaxCodesByParentIdTaxCodeXRefsById(id: number, parentId: number): Promise<NoContentResponse>;
    putFinanceTaxCodesByParentIdTaxCodeXRefsById(id: number, parentId: number, taxCodeXRef: TaxCodeXRef): Promise<TaxCodeXRef>;
    patchFinanceTaxCodesByParentIdTaxCodeXRefsById(id: number, parentId: number, patchOperations: Array<PatchOperation>): Promise<TaxCodeXRef>;
    getFinanceTaxCodesByParentIdTaxCodeXRefsCount(parentId: number, params?: CommonParameters): Promise<Count>;
    getFinanceTaxCodesByParentIdWorkRoleExemptions(parentId: number, params?: CommonParameters): Promise<Array<WorkRoleExemption>>;
    postFinanceTaxCodesByParentIdWorkRoleExemptions(parentId: number, workRoleExemption: WorkRoleExemption): Promise<WorkRoleExemption>;
    getFinanceTaxCodesByParentIdWorkRoleExemptionsById(id: number, parentId: number, params?: CommonParameters): Promise<WorkRoleExemption>;
    deleteFinanceTaxCodesByParentIdWorkRoleExemptionsById(id: number, parentId: number): Promise<NoContentResponse>;
    putFinanceTaxCodesByParentIdWorkRoleExemptionsById(id: number, parentId: number, workRoleExemption: WorkRoleExemption): Promise<WorkRoleExemption>;
    patchFinanceTaxCodesByParentIdWorkRoleExemptionsById(id: number, parentId: number, patchOperations: Array<PatchOperation>): Promise<WorkRoleExemption>;
    getFinanceTaxCodesByParentIdWorkRoleExemptionsCount(parentId: number, params?: CommonParameters): Promise<Count>;
    getFinanceTaxCodesCount(params?: CommonParameters): Promise<Count>;
    getFinanceTaxCodesInfo(params?: CommonParameters): Promise<Array<TaxCodeInfo>>;
    getFinanceTaxCodesInfoCount(params?: CommonParameters): Promise<Count>;
    getFinanceTaxIntegrations(params?: CommonParameters): Promise<Array<TaxIntegration>>;
    getFinanceTaxIntegrationsById(id: number, params?: CommonParameters): Promise<TaxIntegration>;
    putFinanceTaxIntegrationsById(id: number, taxIntegration: TaxIntegration): Promise<TaxIntegration>;
    patchFinanceTaxIntegrationsById(id: number, patchOperations: Array<PatchOperation>): Promise<TaxIntegration>;
    getFinanceTaxIntegrationsCount(params?: CommonParameters): Promise<Count>;
}
export {};
//# sourceMappingURL=FinanceAPI.d.ts.map