import Manage from '../Manage';
import { components } from '../ManageTypes';
import { CommonParameters, CWMOptions } from '../ManageAPI';
import { NoContentResponse } from '../types';
declare type schemas = components['schemas'];
/** {@link ActivityReference} */
export declare type ActivityReference = schemas['ActivityReference'];
/** {@link Campaign} */
export declare type Campaign = schemas['Campaign'];
/** {@link CampaignSubTypeCampaignSubType} */
export declare type CampaignSubTypeCampaignSubType = schemas['Campaign.SubType.CampaignSubType'];
/** {@link CampaignAudit} */
export declare type CampaignAudit = schemas['CampaignAudit'];
/** {@link CampaignStatus} */
export declare type CampaignStatus = schemas['CampaignStatus'];
/** {@link CampaignType} */
export declare type CampaignType = schemas['CampaignType'];
/** {@link CampaignTypeInfo} */
export declare type CampaignTypeInfo = schemas['CampaignTypeInfo'];
/** {@link Count} */
export declare type Count = schemas['Count'];
/** {@link EmailOpened} */
export declare type EmailOpened = schemas['EmailOpened'];
/** {@link FormSubmitted} */
export declare type FormSubmitted = schemas['FormSubmitted'];
/** {@link Group} */
export declare type Group = schemas['Group'];
/** {@link LinkClicked} */
export declare type LinkClicked = schemas['LinkClicked'];
/** {@link MarketingCompany} */
export declare type MarketingCompany = schemas['MarketingCompany'];
/** {@link MarketingContact} */
export declare type MarketingContact = schemas['MarketingContact'];
/** {@link OpportunityReference} */
export declare type OpportunityReference = schemas['OpportunityReference'];
/** {@link PatchOperation} */
export declare type PatchOperation = schemas['PatchOperation'];
/** {@link TypeSubTypeCampaignSubType} */
export declare type TypeSubTypeCampaignSubType = schemas['Type.SubType.CampaignSubType'];
/** {@link Usage} */
export declare type Usage = schemas['Usage'];
/**
 * @module MarketingAPI
 */
/**
 * Marketing module
 * @public
 */
export declare class MarketingAPI extends Manage {
    constructor(props: CWMOptions);
    getMarketingCampaigns(params?: CommonParameters): Promise<Array<Campaign>>;
    postMarketingCampaigns(campaign: Campaign): Promise<Campaign>;
    getMarketingCampaignsById(id: number, params?: CommonParameters): Promise<Campaign>;
    deleteMarketingCampaignsById(id: number): Promise<NoContentResponse>;
    putMarketingCampaignsById(id: number, campaign: Campaign): Promise<Campaign>;
    patchMarketingCampaignsById(id: number, patchOperations: Array<PatchOperation>): Promise<Campaign>;
    getMarketingCampaignsByIdActivities(id: number, params?: CommonParameters): Promise<Array<ActivityReference>>;
    getMarketingCampaignsByIdActivitiesCount(id: number, params?: CommonParameters): Promise<Count>;
    getMarketingCampaignsByIdOpportunities(id: number, params?: CommonParameters): Promise<Array<OpportunityReference>>;
    getMarketingCampaignsByIdOpportunitiesCount(id: number, params?: CommonParameters): Promise<Count>;
    getMarketingCampaignsByParentIdAudits(parentId: number, params?: CommonParameters): Promise<Array<CampaignAudit>>;
    postMarketingCampaignsByParentIdAudits(parentId: number, campaignAudit: CampaignAudit): Promise<CampaignAudit>;
    getMarketingCampaignsByParentIdAuditsById(id: number, parentId: number, params?: CommonParameters): Promise<CampaignAudit>;
    deleteMarketingCampaignsByParentIdAuditsById(id: number, parentId: number): Promise<NoContentResponse>;
    putMarketingCampaignsByParentIdAuditsById(id: number, parentId: number, campaignAudit: CampaignAudit): Promise<CampaignAudit>;
    patchMarketingCampaignsByParentIdAuditsById(id: number, parentId: number, patchOperations: Array<PatchOperation>): Promise<CampaignAudit>;
    getMarketingCampaignsByParentIdAuditsCount(parentId: number, params?: CommonParameters): Promise<Count>;
    getMarketingCampaignsByParentIdEmailsOpened(parentId: number, params?: CommonParameters): Promise<Array<EmailOpened>>;
    postMarketingCampaignsByParentIdEmailsOpened(parentId: number, emailOpened: EmailOpened): Promise<EmailOpened>;
    getMarketingCampaignsByParentIdEmailsOpenedById(id: number, parentId: number, params?: CommonParameters): Promise<EmailOpened>;
    deleteMarketingCampaignsByParentIdEmailsOpenedById(id: number, parentId: number): Promise<NoContentResponse>;
    putMarketingCampaignsByParentIdEmailsOpenedById(id: number, parentId: number, emailOpened: EmailOpened): Promise<EmailOpened>;
    patchMarketingCampaignsByParentIdEmailsOpenedById(id: number, parentId: number, patchOperations: Array<PatchOperation>): Promise<EmailOpened>;
    getMarketingCampaignsByParentIdEmailsOpenedCount(parentId: number, params?: CommonParameters): Promise<Count>;
    getMarketingCampaignsByParentIdFormsSubmitted(parentId: number, params?: CommonParameters): Promise<Array<FormSubmitted>>;
    postMarketingCampaignsByParentIdFormsSubmitted(parentId: number, formSubmitted: FormSubmitted): Promise<FormSubmitted>;
    getMarketingCampaignsByParentIdFormsSubmittedById(id: number, parentId: number, params?: CommonParameters): Promise<FormSubmitted>;
    deleteMarketingCampaignsByParentIdFormsSubmittedById(id: number, parentId: number): Promise<NoContentResponse>;
    putMarketingCampaignsByParentIdFormsSubmittedById(id: number, parentId: number, formSubmitted: FormSubmitted): Promise<FormSubmitted>;
    patchMarketingCampaignsByParentIdFormsSubmittedById(id: number, parentId: number, patchOperations: Array<PatchOperation>): Promise<FormSubmitted>;
    getMarketingCampaignsByParentIdFormsSubmittedCount(parentId: number, params?: CommonParameters): Promise<Count>;
    getMarketingCampaignsByParentIdLinksClicked(parentId: number, params?: CommonParameters): Promise<Array<LinkClicked>>;
    postMarketingCampaignsByParentIdLinksClicked(parentId: number, linkClicked: LinkClicked): Promise<LinkClicked>;
    getMarketingCampaignsByParentIdLinksClickedById(id: number, parentId: number, params?: CommonParameters): Promise<LinkClicked>;
    deleteMarketingCampaignsByParentIdLinksClickedById(id: number, parentId: number): Promise<NoContentResponse>;
    putMarketingCampaignsByParentIdLinksClickedById(id: number, parentId: number, linkClicked: LinkClicked): Promise<LinkClicked>;
    patchMarketingCampaignsByParentIdLinksClickedById(id: number, parentId: number, patchOperations: Array<PatchOperation>): Promise<LinkClicked>;
    getMarketingCampaignsByParentIdLinksClickedCount(parentId: number, params?: CommonParameters): Promise<Count>;
    getMarketingCampaignsCount(params?: CommonParameters): Promise<Count>;
    getMarketingCampaignsStatuses(params?: CommonParameters): Promise<Array<CampaignStatus>>;
    postMarketingCampaignsStatuses(campaignStatus: CampaignStatus): Promise<CampaignStatus>;
    getMarketingCampaignsStatusesById(id: number, params?: CommonParameters): Promise<CampaignStatus>;
    deleteMarketingCampaignsStatusesById(id: number): Promise<NoContentResponse>;
    putMarketingCampaignsStatusesById(id: number, campaignStatus: CampaignStatus): Promise<CampaignStatus>;
    patchMarketingCampaignsStatusesById(id: number, patchOperations: Array<PatchOperation>): Promise<CampaignStatus>;
    getMarketingCampaignsStatusesCount(params?: CommonParameters): Promise<Count>;
    getMarketingCampaignsSubTypes(params?: CommonParameters): Promise<Array<CampaignSubTypeCampaignSubType>>;
    postMarketingCampaignsSubTypes(campaignSubType: CampaignSubTypeCampaignSubType): Promise<CampaignSubTypeCampaignSubType>;
    getMarketingCampaignsSubTypesById(id: number, params?: CommonParameters): Promise<CampaignSubTypeCampaignSubType>;
    deleteMarketingCampaignsSubTypesById(id: number): Promise<NoContentResponse>;
    putMarketingCampaignsSubTypesById(id: number, campaignSubType: CampaignSubTypeCampaignSubType): Promise<CampaignSubTypeCampaignSubType>;
    patchMarketingCampaignsSubTypesById(id: number, patchOperations: Array<PatchOperation>): Promise<CampaignSubTypeCampaignSubType>;
    getMarketingCampaignsSubTypesCount(params?: CommonParameters): Promise<Count>;
    getMarketingCampaignsTypes(params?: CommonParameters): Promise<Array<CampaignType>>;
    postMarketingCampaignsTypes(campaignType: CampaignType): Promise<CampaignType>;
    getMarketingCampaignsTypesById(id: number, params?: CommonParameters): Promise<CampaignType>;
    deleteMarketingCampaignsTypesById(id: number): Promise<NoContentResponse>;
    putMarketingCampaignsTypesById(id: number, campaignType: CampaignType): Promise<CampaignType>;
    patchMarketingCampaignsTypesById(id: number, patchOperations: Array<PatchOperation>): Promise<CampaignType>;
    getMarketingCampaignsTypesByIdInfo(id: number, params?: CommonParameters): Promise<CampaignTypeInfo>;
    getMarketingCampaignsTypesByParentIdSubTypes(parentId: number, params?: CommonParameters): Promise<Array<TypeSubTypeCampaignSubType>>;
    getMarketingCampaignsTypesByParentIdSubTypesById(id: number, parentId: number, params?: CommonParameters): Promise<TypeSubTypeCampaignSubType>;
    getMarketingCampaignsTypesByParentIdSubTypesCount(parentId: number, params?: CommonParameters): Promise<Count>;
    getMarketingCampaignsTypesCount(params?: CommonParameters): Promise<Count>;
    getMarketingCampaignsTypesInfo(params?: CommonParameters): Promise<Array<CampaignTypeInfo>>;
    getMarketingCampaignsTypesInfoCount(params?: CommonParameters): Promise<Count>;
    getMarketingGroups(params?: CommonParameters): Promise<Array<Group>>;
    postMarketingGroups(group: Group): Promise<Group>;
    getMarketingGroupsById(id: number, params?: CommonParameters): Promise<Group>;
    deleteMarketingGroupsById(id: number): Promise<NoContentResponse>;
    putMarketingGroupsById(id: number, group: Group): Promise<Group>;
    patchMarketingGroupsById(id: number, patchOperations: Array<PatchOperation>): Promise<Group>;
    getMarketingGroupsByIdUsages(id: number, params?: CommonParameters): Promise<Array<Usage>>;
    getMarketingGroupsByIdUsagesList(id: number, params?: CommonParameters): Promise<Array<Usage>>;
    getMarketingGroupsByParentIdCompanies(parentId: number, params?: CommonParameters): Promise<Array<MarketingCompany>>;
    postMarketingGroupsByParentIdCompanies(parentId: number, marketingCompany: MarketingCompany): Promise<MarketingCompany>;
    getMarketingGroupsByParentIdCompaniesById(id: number, parentId: number, params?: CommonParameters): Promise<MarketingCompany>;
    deleteMarketingGroupsByParentIdCompaniesById(id: number, parentId: number): Promise<NoContentResponse>;
    putMarketingGroupsByParentIdCompaniesById(id: number, parentId: number, marketingCompany: MarketingCompany): Promise<MarketingCompany>;
    patchMarketingGroupsByParentIdCompaniesById(id: number, parentId: number, patchOperations: Array<PatchOperation>): Promise<MarketingCompany>;
    getMarketingGroupsByParentIdCompaniesCount(parentId: number, params?: CommonParameters): Promise<Count>;
    getMarketingGroupsByParentIdContacts(parentId: number, params?: CommonParameters): Promise<Array<MarketingContact>>;
    postMarketingGroupsByParentIdContacts(parentId: number, marketingContact: MarketingContact): Promise<MarketingContact>;
    getMarketingGroupsByParentIdContactsById(id: number, parentId: number, params?: CommonParameters): Promise<MarketingContact>;
    deleteMarketingGroupsByParentIdContactsById(id: number, parentId: number): Promise<NoContentResponse>;
    putMarketingGroupsByParentIdContactsById(id: number, parentId: number, marketingContact: MarketingContact): Promise<MarketingContact>;
    patchMarketingGroupsByParentIdContactsById(id: number, parentId: number, patchOperations: Array<PatchOperation>): Promise<MarketingContact>;
    getMarketingGroupsByParentIdContactsCount(parentId: number, params?: CommonParameters): Promise<Count>;
    getMarketingGroupsCount(params?: CommonParameters): Promise<Count>;
}
export {};
//# sourceMappingURL=MarketingAPI.d.ts.map