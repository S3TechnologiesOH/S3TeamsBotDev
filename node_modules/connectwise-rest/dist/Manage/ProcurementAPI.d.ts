import Manage from '../Manage';
import { components } from '../ManageTypes';
import { CommonParameters, CWMOptions } from '../ManageAPI';
import { NoContentResponse } from '../types';
declare type schemas = components['schemas'];
/** {@link AdjustmentDetail} */
export declare type AdjustmentDetail = schemas['AdjustmentDetail'];
/** {@link AdjustmentType} */
export declare type AdjustmentType = schemas['AdjustmentType'];
/** {@link AdjustmentTypeInfo} */
export declare type AdjustmentTypeInfo = schemas['AdjustmentTypeInfo'];
/** {@link BulkResult} */
export declare type BulkResult = schemas['BulkResult'];
/** {@link CatalogComponent} */
export declare type CatalogComponent = schemas['CatalogComponent'];
/** {@link CatalogInventory} */
export declare type CatalogInventory = schemas['CatalogInventory'];
/** {@link CatalogItem} */
export declare type CatalogItem = schemas['CatalogItem'];
/** {@link CatalogItemInfo} */
export declare type CatalogItemInfo = schemas['CatalogItemInfo'];
/** {@link CatalogPricing} */
export declare type CatalogPricing = schemas['CatalogPricing'];
/** {@link Category} */
export declare type Category = schemas['Category'];
/** {@link CategoryInfo} */
export declare type CategoryInfo = schemas['CategoryInfo'];
/** {@link Conversion} */
export declare type Conversion = schemas['Conversion'];
/** {@link Count} */
export declare type Count = schemas['Count'];
/** {@link IdCollection} */
export declare type IdCollection = schemas['IdCollection'];
/** {@link InventoryOnHand} */
export declare type InventoryOnHand = schemas['InventoryOnHand'];
/** {@link LegacySubCategory} */
export declare type LegacySubCategory = schemas['LegacySubCategory'];
/** {@link LegacySubCategoryInfo} */
export declare type LegacySubCategoryInfo = schemas['LegacySubCategoryInfo'];
/** {@link Manufacturer} */
export declare type Manufacturer = schemas['Manufacturer'];
/** {@link ManufacturerInfo} */
export declare type ManufacturerInfo = schemas['ManufacturerInfo'];
/** {@link MinimumStockByWarehouse} */
export declare type MinimumStockByWarehouse = schemas['MinimumStockByWarehouse'];
/** {@link OnHandSerialNumber} */
export declare type OnHandSerialNumber = schemas['OnHandSerialNumber'];
/** {@link PatchOperation} */
export declare type PatchOperation = schemas['PatchOperation'];
/** {@link PricingBreak} */
export declare type PricingBreak = schemas['PricingBreak'];
/** {@link PricingDetail} */
export declare type PricingDetail = schemas['PricingDetail'];
/** {@link PricingSchedule} */
export declare type PricingSchedule = schemas['PricingSchedule'];
/** {@link ProcurementAdjustment} */
export declare type ProcurementAdjustment = schemas['ProcurementAdjustment'];
/** {@link ProcurementSetting} */
export declare type ProcurementSetting = schemas['ProcurementSetting'];
/** {@link ProductComponent} */
export declare type ProductComponent = schemas['ProductComponent'];
/** {@link ProductDetach} */
export declare type ProductDetach = schemas['ProductDetach'];
/** {@link ProductItem} */
export declare type ProductItem = schemas['ProductItem'];
/** {@link ProductPickingShippingDetail} */
export declare type ProductPickingShippingDetail = schemas['ProductPickingShippingDetail'];
/** {@link ProductType} */
export declare type ProductType = schemas['ProductType'];
/** {@link ProductTypeInfo} */
export declare type ProductTypeInfo = schemas['ProductTypeInfo'];
/** {@link PurchaseOrder} */
export declare type PurchaseOrder = schemas['PurchaseOrder'];
/** {@link PurchaseOrderLineItem} */
export declare type PurchaseOrderLineItem = schemas['PurchaseOrderLineItem'];
/** {@link PurchaseOrderStatus} */
export declare type PurchaseOrderStatus = schemas['PurchaseOrderStatus'];
/** {@link PurchaseOrderStatusEmailTemplate} */
export declare type PurchaseOrderStatusEmailTemplate = schemas['PurchaseOrderStatusEmailTemplate'];
/** {@link PurchaseOrderStatusNotification} */
export declare type PurchaseOrderStatusNotification = schemas['PurchaseOrderStatusNotification'];
/** {@link PurchasingDemand} */
export declare type PurchasingDemand = schemas['PurchasingDemand'];
/** {@link RmaAction} */
export declare type RmaAction = schemas['RmaAction'];
/** {@link RmaActionInfo} */
export declare type RmaActionInfo = schemas['RmaActionInfo'];
/** {@link RmaDisposition} */
export declare type RmaDisposition = schemas['RmaDisposition'];
/** {@link RmaDispositionInfo} */
export declare type RmaDispositionInfo = schemas['RmaDispositionInfo'];
/** {@link RmaStatus} */
export declare type RmaStatus = schemas['RmaStatus'];
/** {@link RmaStatusEmailTemplate} */
export declare type RmaStatusEmailTemplate = schemas['RmaStatusEmailTemplate'];
/** {@link RmaStatusInfo} */
export declare type RmaStatusInfo = schemas['RmaStatusInfo'];
/** {@link RmaStatusNotification} */
export declare type RmaStatusNotification = schemas['RmaStatusNotification'];
/** {@link RmaTag} */
export declare type RmaTag = schemas['RmaTag'];
/** {@link ShipmentMethod} */
export declare type ShipmentMethod = schemas['ShipmentMethod'];
/** {@link ShipmentMethodInfo} */
export declare type ShipmentMethodInfo = schemas['ShipmentMethodInfo'];
/** {@link SubCategory} */
export declare type SubCategory = schemas['SubCategory'];
/** {@link SubCategoryInfo} */
export declare type SubCategoryInfo = schemas['SubCategoryInfo'];
/** {@link UnitOfMeasure} */
export declare type UnitOfMeasure = schemas['UnitOfMeasure'];
/** {@link Usage} */
export declare type Usage = schemas['Usage'];
/** {@link Warehouse} */
export declare type Warehouse = schemas['Warehouse'];
/** {@link WarehouseBin} */
export declare type WarehouseBin = schemas['WarehouseBin'];
/** {@link WarehouseBinInfo} */
export declare type WarehouseBinInfo = schemas['WarehouseBinInfo'];
/** {@link WarehouseInfo} */
export declare type WarehouseInfo = schemas['WarehouseInfo'];
/**
 * @module ProcurementAPI
 */
/**
 * Procurement module
 * @public
 */
export declare class ProcurementAPI extends Manage {
    constructor(props: CWMOptions);
    getProcurementAdjustments(params?: CommonParameters): Promise<Array<ProcurementAdjustment>>;
    postProcurementAdjustments(adjustment: ProcurementAdjustment): Promise<ProcurementAdjustment>;
    getProcurementAdjustmentsById(id: number, params?: CommonParameters): Promise<ProcurementAdjustment>;
    deleteProcurementAdjustmentsById(id: number): Promise<NoContentResponse>;
    putProcurementAdjustmentsById(id: number, adjustment: ProcurementAdjustment): Promise<ProcurementAdjustment>;
    patchProcurementAdjustmentsById(id: number, patchOperations: Array<PatchOperation>): Promise<ProcurementAdjustment>;
    getProcurementAdjustmentsByParentIdDetails(parentId: number, params?: CommonParameters): Promise<Array<AdjustmentDetail>>;
    postProcurementAdjustmentsByParentIdDetails(parentId: number, adjustmentDetail: AdjustmentDetail): Promise<AdjustmentDetail>;
    getProcurementAdjustmentsByParentIdDetailsById(id: number, parentId: number, params?: CommonParameters): Promise<AdjustmentDetail>;
    deleteProcurementAdjustmentsByParentIdDetailsById(id: number, parentId: number): Promise<NoContentResponse>;
    getProcurementAdjustmentsByParentIdDetailsCount(parentId: number, params?: CommonParameters): Promise<Count>;
    getProcurementAdjustmentsCount(params?: CommonParameters): Promise<Count>;
    getProcurementAdjustmentsTypes(params?: CommonParameters): Promise<Array<AdjustmentType>>;
    postProcurementAdjustmentsTypes(adjustmentTypes: AdjustmentType): Promise<AdjustmentType>;
    getProcurementAdjustmentsTypesById(id: number, params?: CommonParameters): Promise<AdjustmentType>;
    deleteProcurementAdjustmentsTypesById(id: number): Promise<NoContentResponse>;
    putProcurementAdjustmentsTypesById(id: number, adjustmentTypes: AdjustmentType): Promise<AdjustmentType>;
    patchProcurementAdjustmentsTypesById(id: number, patchOperations: Array<PatchOperation>): Promise<AdjustmentType>;
    getProcurementAdjustmentsTypesByIdInfo(id: number, params?: CommonParameters): Promise<AdjustmentTypeInfo>;
    getProcurementAdjustmentsTypesByIdUsages(id: number, params?: CommonParameters): Promise<Array<Usage>>;
    getProcurementAdjustmentsTypesByIdUsagesList(id: number, params?: CommonParameters): Promise<Array<Usage>>;
    getProcurementAdjustmentsTypesCount(params?: CommonParameters): Promise<Count>;
    getProcurementAdjustmentsTypesInfo(params?: CommonParameters): Promise<Array<AdjustmentTypeInfo>>;
    getProcurementAdjustmentsTypesInfoCount(params?: CommonParameters): Promise<Count>;
    getProcurementCatalog(params?: CommonParameters): Promise<Array<CatalogItem>>;
    postProcurementCatalog(catalogItem: CatalogItem): Promise<CatalogItem>;
    getProcurementCatalogByCatalogItemIdentifierQuantityOnHand(catalogItemIdentifier: string, warehouseBinId: number, params?: CommonParameters): Promise<Count>;
    getProcurementCatalogById(id: number, params?: CommonParameters): Promise<CatalogItem>;
    deleteProcurementCatalogById(id: number): Promise<NoContentResponse>;
    putProcurementCatalogById(id: number, catalogItem: CatalogItem): Promise<CatalogItem>;
    patchProcurementCatalogById(id: number, patchOperations: Array<PatchOperation>): Promise<CatalogItem>;
    getProcurementCatalogByIdInfo(id: number, params?: CommonParameters): Promise<CatalogItemInfo>;
    postProcurementCatalogByIdPricing(id: number, catalogPricing: CatalogPricing): Promise<CatalogPricing>;
    getProcurementCatalogByParentIdComponents(parentId: number, params?: CommonParameters): Promise<Array<CatalogComponent>>;
    postProcurementCatalogByParentIdComponents(parentId: number, catalogComponent: CatalogComponent): Promise<CatalogComponent>;
    getProcurementCatalogByParentIdComponentsById(id: number, parentId: number, params?: CommonParameters): Promise<CatalogComponent>;
    deleteProcurementCatalogByParentIdComponentsById(id: number, parentId: number): Promise<NoContentResponse>;
    putProcurementCatalogByParentIdComponentsById(id: number, parentId: number, catalogComponent: CatalogComponent): Promise<CatalogComponent>;
    patchProcurementCatalogByParentIdComponentsById(id: number, parentId: number, patchOperations: Array<PatchOperation>): Promise<CatalogComponent>;
    getProcurementCatalogByParentIdComponentsCount(parentId: number, params?: CommonParameters): Promise<Count>;
    getProcurementCatalogByParentIdInventory(parentId: number, params?: CommonParameters): Promise<Array<CatalogInventory>>;
    getProcurementCatalogByParentIdInventoryById(id: number, parentId: number, params?: CommonParameters): Promise<CatalogInventory>;
    getProcurementCatalogByParentIdInventoryCount(parentId: number, params?: CommonParameters): Promise<Count>;
    getProcurementCatalogByParentIdMinimumStockByWarehouse(parentId: number, params?: CommonParameters): Promise<Array<MinimumStockByWarehouse>>;
    postProcurementCatalogByParentIdMinimumStockByWarehouse(parentId: number, minimumStockByWarehouse: MinimumStockByWarehouse): Promise<MinimumStockByWarehouse>;
    getProcurementCatalogByParentIdMinimumStockByWarehouseById(id: number, parentId: number, params?: CommonParameters): Promise<MinimumStockByWarehouse>;
    deleteProcurementCatalogByParentIdMinimumStockByWarehouseById(id: number, parentId: number): Promise<NoContentResponse>;
    putProcurementCatalogByParentIdMinimumStockByWarehouseById(id: number, parentId: number, minimumStockByWarehouse: MinimumStockByWarehouse): Promise<MinimumStockByWarehouse>;
    patchProcurementCatalogByParentIdMinimumStockByWarehouseById(id: number, parentId: number, patchOperations: Array<PatchOperation>): Promise<MinimumStockByWarehouse>;
    getProcurementCatalogByParentIdMinimumStockByWarehouseCount(parentId: number, params?: CommonParameters): Promise<Count>;
    getProcurementCatalogCount(params?: CommonParameters): Promise<Count>;
    getProcurementCatalogInfo(params?: CommonParameters): Promise<Array<CatalogItemInfo>>;
    getProcurementCatalogInfoCount(params?: CommonParameters): Promise<Count>;
    getProcurementCategories(params?: CommonParameters): Promise<Array<Category>>;
    postProcurementCategories(category: Category): Promise<Category>;
    getProcurementCategoriesById(id: number, params?: CommonParameters): Promise<Category>;
    deleteProcurementCategoriesById(id: number): Promise<NoContentResponse>;
    putProcurementCategoriesById(id: number, category: Category): Promise<Category>;
    patchProcurementCategoriesById(id: number, patchOperations: Array<PatchOperation>): Promise<Category>;
    getProcurementCategoriesByIdInfo(id: number, params?: CommonParameters): Promise<CategoryInfo>;
    getProcurementCategoriesByParentIdSubcategories(parentId: number, params?: CommonParameters): Promise<Array<LegacySubCategory>>;
    postProcurementCategoriesByParentIdSubcategories(parentId: number, subCategory: LegacySubCategory): Promise<LegacySubCategory>;
    getProcurementCategoriesByParentIdSubcategoriesById(id: number, parentId: number, params?: CommonParameters): Promise<LegacySubCategory>;
    deleteProcurementCategoriesByParentIdSubcategoriesById(id: number, parentId: number): Promise<NoContentResponse>;
    putProcurementCategoriesByParentIdSubcategoriesById(id: number, parentId: number, subCategory: LegacySubCategory): Promise<LegacySubCategory>;
    patchProcurementCategoriesByParentIdSubcategoriesById(id: number, parentId: number, patchOperations: Array<PatchOperation>): Promise<LegacySubCategory>;
    getProcurementCategoriesByParentIdSubcategoriesByIdInfo(id: number, parentId: number, params?: CommonParameters): Promise<LegacySubCategoryInfo>;
    getProcurementCategoriesByParentIdSubcategoriesCount(parentId: number, params?: CommonParameters): Promise<Count>;
    getProcurementCategoriesByParentIdSubcategoriesInfo(parentId: number, params?: CommonParameters): Promise<Array<LegacySubCategoryInfo>>;
    getProcurementCategoriesByParentIdSubcategoriesInfoCount(parentId: number, params?: CommonParameters): Promise<Count>;
    getProcurementCategoriesCount(params?: CommonParameters): Promise<Count>;
    getProcurementCategoriesInfo(params?: CommonParameters): Promise<Array<CategoryInfo>>;
    getProcurementCategoriesInfoCount(params?: CommonParameters): Promise<Count>;
    getProcurementManufacturers(params?: CommonParameters): Promise<Array<Manufacturer>>;
    postProcurementManufacturers(manufacturer: Manufacturer): Promise<Manufacturer>;
    getProcurementManufacturersById(id: number, params?: CommonParameters): Promise<Manufacturer>;
    deleteProcurementManufacturersById(id: number): Promise<NoContentResponse>;
    putProcurementManufacturersById(id: number, manufacturer: Manufacturer): Promise<Manufacturer>;
    patchProcurementManufacturersById(id: number, patchOperations: Array<PatchOperation>): Promise<Manufacturer>;
    getProcurementManufacturersByIdInfo(id: number, params?: CommonParameters): Promise<ManufacturerInfo>;
    getProcurementManufacturersCount(params?: CommonParameters): Promise<Count>;
    getProcurementManufacturersCountInfo(params?: CommonParameters): Promise<Count>;
    getProcurementManufacturersInfo(params?: CommonParameters): Promise<Array<ManufacturerInfo>>;
    getProcurementOnhandserialnumbers(params?: CommonParameters): Promise<Array<OnHandSerialNumber>>;
    getProcurementOnhandserialnumbersById(id: number, params?: CommonParameters): Promise<OnHandSerialNumber>;
    getProcurementOnhandserialnumbersCount(params?: CommonParameters): Promise<Count>;
    getProcurementPricingschedules(params?: CommonParameters): Promise<Array<PricingSchedule>>;
    postProcurementPricingschedules(pricingSchedule: PricingSchedule): Promise<PricingSchedule>;
    getProcurementPricingschedulesByGrandparentIdDetailsByParentIdBreaks(parentId: number, grandparentId: number, params?: CommonParameters): Promise<Array<PricingBreak>>;
    postProcurementPricingschedulesByGrandparentIdDetailsByParentIdBreaks(parentId: number, grandparentId: number, pricingBreak: PricingBreak): Promise<PricingBreak>;
    getProcurementPricingschedulesByGrandparentIdDetailsByParentIdBreaksById(id: number, parentId: number, grandparentId: number, params?: CommonParameters): Promise<PricingBreak>;
    deleteProcurementPricingschedulesByGrandparentIdDetailsByParentIdBreaksById(id: number, parentId: number, grandparentId: number): Promise<NoContentResponse>;
    putProcurementPricingschedulesByGrandparentIdDetailsByParentIdBreaksById(id: number, parentId: number, grandparentId: number, pricingBreak: PricingBreak): Promise<PricingBreak>;
    patchProcurementPricingschedulesByGrandparentIdDetailsByParentIdBreaksById(id: number, parentId: number, grandparentId: number, patchOperations: Array<PatchOperation>): Promise<PricingBreak>;
    getProcurementPricingschedulesByGrandparentIdDetailsByParentIdBreaksCount(parentId: number, grandparentId: number, params?: CommonParameters): Promise<Count>;
    getProcurementPricingschedulesById(id: number, params?: CommonParameters): Promise<PricingSchedule>;
    deleteProcurementPricingschedulesById(id: number): Promise<NoContentResponse>;
    putProcurementPricingschedulesById(id: number, pricingSchedule: PricingSchedule): Promise<PricingSchedule>;
    patchProcurementPricingschedulesById(id: number, patchOperations: Array<PatchOperation>): Promise<PricingSchedule>;
    getProcurementPricingschedulesByParentIdDetails(parentId: number, params?: CommonParameters): Promise<Array<PricingDetail>>;
    postProcurementPricingschedulesByParentIdDetails(parentId: number, pricingDetail: PricingDetail): Promise<PricingDetail>;
    getProcurementPricingschedulesByParentIdDetailsById(id: number, parentId: number, params?: CommonParameters): Promise<PricingDetail>;
    deleteProcurementPricingschedulesByParentIdDetailsById(id: number, parentId: number): Promise<NoContentResponse>;
    putProcurementPricingschedulesByParentIdDetailsById(id: number, parentId: number, pricingDetail: PricingDetail): Promise<PricingDetail>;
    patchProcurementPricingschedulesByParentIdDetailsById(id: number, parentId: number, patchOperations: Array<PatchOperation>): Promise<PricingDetail>;
    getProcurementPricingschedulesByParentIdDetailsCount(parentId: number, params?: CommonParameters): Promise<Count>;
    getProcurementPricingschedulesCount(params?: CommonParameters): Promise<Count>;
    getProcurementProducts(params?: CommonParameters): Promise<Array<ProductItem>>;
    postProcurementProducts(productItem: ProductItem): Promise<ProductItem>;
    getProcurementProductsById(id: number, params?: CommonParameters): Promise<ProductItem>;
    deleteProcurementProductsById(id: number): Promise<NoContentResponse>;
    putProcurementProductsById(id: number, productItem: ProductItem): Promise<ProductItem>;
    patchProcurementProductsById(id: number, patchOperations: Array<PatchOperation>): Promise<ProductItem>;
    postProcurementProductsByIdDetach(id: number, detach: ProductDetach): Promise<NoContentResponse>;
    getProcurementProductsByParentIdComponents(parentId: number, params?: CommonParameters): Promise<Array<ProductComponent>>;
    postProcurementProductsByParentIdComponents(parentId: number, productComponent: ProductComponent): Promise<Array<ProductComponent>>;
    getProcurementProductsByParentIdComponentsById(id: number, parentId: number, params?: CommonParameters): Promise<Array<ProductComponent>>;
    deleteProcurementProductsByParentIdComponentsById(id: number, parentId: number): Promise<NoContentResponse>;
    putProcurementProductsByParentIdComponentsById(id: number, parentId: number, productComponent: ProductComponent): Promise<Array<ProductComponent>>;
    patchProcurementProductsByParentIdComponentsById(id: number, parentId: number, patchOperations: Array<PatchOperation>): Promise<Array<ProductComponent>>;
    getProcurementProductsByParentIdComponentsCount(parentId: number, params?: CommonParameters): Promise<Count>;
    getProcurementProductsByParentIdPickingShippingDetails(parentId: number, params?: CommonParameters): Promise<Array<ProductPickingShippingDetail>>;
    postProcurementProductsByParentIdPickingShippingDetails(parentId: number, productPickingShippingDetails: ProductPickingShippingDetail): Promise<Array<ProductPickingShippingDetail>>;
    getProcurementProductsByParentIdPickingShippingDetailsById(id: number, parentId: number, params?: CommonParameters): Promise<Array<ProductPickingShippingDetail>>;
    deleteProcurementProductsByParentIdPickingShippingDetailsById(id: number, parentId: number): Promise<NoContentResponse>;
    putProcurementProductsByParentIdPickingShippingDetailsById(id: number, parentId: number, productPickingShippingDetails: ProductPickingShippingDetail): Promise<Array<ProductPickingShippingDetail>>;
    patchProcurementProductsByParentIdPickingShippingDetailsById(id: number, parentId: number, patchOperations: Array<PatchOperation>): Promise<Array<ProductPickingShippingDetail>>;
    getProcurementProductsByParentIdPickingShippingDetailsCount(parentId: number, params?: CommonParameters): Promise<Count>;
    getProcurementProductsCount(params?: CommonParameters): Promise<Count>;
    getProcurementPurchaseorders(params?: CommonParameters): Promise<Array<PurchaseOrder>>;
    postProcurementPurchaseorders(purchaseOrder: PurchaseOrder): Promise<PurchaseOrder>;
    getProcurementPurchaseordersById(id: number, params?: CommonParameters): Promise<PurchaseOrder>;
    deleteProcurementPurchaseordersById(id: number): Promise<NoContentResponse>;
    putProcurementPurchaseordersById(id: number, purchaseOrder: PurchaseOrder): Promise<PurchaseOrder>;
    patchProcurementPurchaseordersById(id: number, patchOperations: Array<PatchOperation>): Promise<PurchaseOrder>;
    getProcurementPurchaseordersByParentIdLineitems(parentId: number, params?: CommonParameters): Promise<Array<PurchaseOrderLineItem>>;
    postProcurementPurchaseordersByParentIdLineitems(parentId: number, purchaseOrderLineItem: PurchaseOrderLineItem): Promise<PurchaseOrderLineItem>;
    getProcurementPurchaseordersByParentIdLineitemsById(id: number, parentId: number, params?: CommonParameters): Promise<PurchaseOrderLineItem>;
    deleteProcurementPurchaseordersByParentIdLineitemsById(id: number, parentId: number): Promise<NoContentResponse>;
    putProcurementPurchaseordersByParentIdLineitemsById(id: number, parentId: number, purchaseOrderLineItem: PurchaseOrderLineItem): Promise<PurchaseOrderLineItem>;
    patchProcurementPurchaseordersByParentIdLineitemsById(id: number, parentId: number, patchOperations: Array<PatchOperation>): Promise<PurchaseOrderLineItem>;
    postProcurementPurchaseordersByParentIdLineitemsBulk(parentId: number, purchaseOrderLineItems: Array<PurchaseOrderLineItem>): Promise<BulkResult>;
    deleteProcurementPurchaseordersByParentIdLineitemsBulk(parentId: number, purchaseOrderLineItems: IdCollection): Promise<BulkResult>;
    putProcurementPurchaseordersByParentIdLineitemsBulk(parentId: number, purchaseOrderLineItems: Array<PurchaseOrderLineItem>): Promise<BulkResult>;
    getProcurementPurchaseordersByParentIdLineitemsCount(parentId: number, params?: CommonParameters): Promise<Count>;
    getProcurementPurchaseordersCount(params?: CommonParameters): Promise<Count>;
    getProcurementPurchaseorderstatuses(params?: CommonParameters): Promise<Array<PurchaseOrderStatus>>;
    postProcurementPurchaseorderstatuses(poStatus: PurchaseOrderStatus): Promise<PurchaseOrderStatus>;
    getProcurementPurchaseorderstatusesById(id: number, params?: CommonParameters): Promise<PurchaseOrderStatus>;
    deleteProcurementPurchaseorderstatusesById(id: number): Promise<NoContentResponse>;
    patchProcurementPurchaseorderstatusesById(id: number, patchOperations: Array<PatchOperation>): Promise<PurchaseOrderStatus>;
    putProcurementPurchaseorderstatusesById(id: number, purchaseOrderStatus: PurchaseOrderStatus): Promise<PurchaseOrderStatus>;
    getProcurementPurchaseorderstatusesByIdUsages(id: number, params?: CommonParameters): Promise<Array<Usage>>;
    getProcurementPurchaseorderstatusesByIdUsagesList(id: number, params?: CommonParameters): Promise<Array<Usage>>;
    getProcurementPurchaseorderstatusesByParentIdEmailtemplates(parentId: number, params?: CommonParameters): Promise<Array<PurchaseOrderStatusEmailTemplate>>;
    postProcurementPurchaseorderstatusesByParentIdEmailtemplates(parentId: number, purchaseOrderStatusEmailTemplate: PurchaseOrderStatusEmailTemplate): Promise<PurchaseOrderStatusEmailTemplate>;
    getProcurementPurchaseorderstatusesByParentIdEmailtemplatesById(id: number, parentId: number, params?: CommonParameters): Promise<PurchaseOrderStatusEmailTemplate>;
    deleteProcurementPurchaseorderstatusesByParentIdEmailtemplatesById(id: number, parentId: number): Promise<NoContentResponse>;
    putProcurementPurchaseorderstatusesByParentIdEmailtemplatesById(id: number, parentId: number, purchaseOrderStatusEmailTemplate: PurchaseOrderStatusEmailTemplate): Promise<PurchaseOrderStatusEmailTemplate>;
    patchProcurementPurchaseorderstatusesByParentIdEmailtemplatesById(id: number, parentId: number, patchOperations: Array<PatchOperation>): Promise<PurchaseOrderStatusEmailTemplate>;
    getProcurementPurchaseorderstatusesByParentIdEmailtemplatesCount(parentId: number, params?: CommonParameters): Promise<Count>;
    getProcurementPurchaseorderstatusesByParentIdNotifications(parentId: number, params?: CommonParameters): Promise<Array<PurchaseOrderStatusNotification>>;
    postProcurementPurchaseorderstatusesByParentIdNotifications(parentId: number, purchaseOrderStatusNotification: PurchaseOrderStatusNotification): Promise<PurchaseOrderStatusNotification>;
    getProcurementPurchaseorderstatusesByParentIdNotificationsById(id: number, parentId: number, params?: CommonParameters): Promise<PurchaseOrderStatusNotification>;
    deleteProcurementPurchaseorderstatusesByParentIdNotificationsById(id: number, parentId: number): Promise<NoContentResponse>;
    putProcurementPurchaseorderstatusesByParentIdNotificationsById(id: number, parentId: number, purchaseOrderStatusNotification: PurchaseOrderStatusNotification): Promise<PurchaseOrderStatusNotification>;
    patchProcurementPurchaseorderstatusesByParentIdNotificationsById(id: number, parentId: number, patchOperations: Array<PatchOperation>): Promise<PurchaseOrderStatusNotification>;
    getProcurementPurchaseorderstatusesByParentIdNotificationsCount(parentId: number, params?: CommonParameters): Promise<Count>;
    getProcurementPurchaseorderstatusesCount(params?: CommonParameters): Promise<Count>;
    postProcurementPurchasingDemands(purchasingDemand: PurchasingDemand): Promise<PurchasingDemand>;
    getProcurementRmaActions(params?: CommonParameters): Promise<Array<RmaAction>>;
    postProcurementRmaActions(rmaAction: RmaAction): Promise<RmaAction>;
    getProcurementRmaActionsById(id: number, params?: CommonParameters): Promise<RmaAction>;
    deleteProcurementRmaActionsById(id: number): Promise<NoContentResponse>;
    putProcurementRmaActionsById(id: number, rmaAction: RmaAction): Promise<RmaAction>;
    patchProcurementRmaActionsById(id: number, patchOperations: Array<PatchOperation>): Promise<RmaAction>;
    getProcurementRmaActionsByIdInfo(id: number, params?: CommonParameters): Promise<RmaActionInfo>;
    getProcurementRmaActionsCount(params?: CommonParameters): Promise<Count>;
    getProcurementRmaActionsInfo(params?: CommonParameters): Promise<Array<RmaActionInfo>>;
    getProcurementRmaActionsInfoCount(params?: CommonParameters): Promise<Count>;
    getProcurementRMADispositions(params?: CommonParameters): Promise<Array<RmaDisposition>>;
    postProcurementRMADispositions(rmaDisposition: RmaDisposition): Promise<RmaDisposition>;
    getProcurementRMADispositionsById(id: number, params?: CommonParameters): Promise<RmaDisposition>;
    deleteProcurementRMADispositionsById(id: number): Promise<NoContentResponse>;
    putProcurementRMADispositionsById(id: number, rmaDisposition: RmaDisposition): Promise<RmaDisposition>;
    patchProcurementRMADispositionsById(id: number, patchOperations: Array<PatchOperation>): Promise<RmaDisposition>;
    getProcurementRMADispositionsByIdInfo(id: number, params?: CommonParameters): Promise<RmaDispositionInfo>;
    getProcurementRMADispositionsCount(params?: CommonParameters): Promise<Count>;
    getProcurementRMADispositionsInfo(params?: CommonParameters): Promise<Array<RmaDispositionInfo>>;
    getProcurementRMADispositionsInfoCount(params?: CommonParameters): Promise<Count>;
    getProcurementRmaStatuses(params?: CommonParameters): Promise<Array<RmaStatus>>;
    postProcurementRmaStatuses(rmaStatus: RmaStatus): Promise<RmaStatus>;
    getProcurementRmaStatusesById(id: number, params?: CommonParameters): Promise<RmaStatus>;
    deleteProcurementRmaStatusesById(id: number): Promise<NoContentResponse>;
    putProcurementRmaStatusesById(id: number, rmaStatus: RmaStatus): Promise<RmaStatus>;
    patchProcurementRmaStatusesById(id: number, patchOperations: Array<PatchOperation>): Promise<RmaStatus>;
    getProcurementRmaStatusesByIdInfo(id: number, params?: CommonParameters): Promise<RmaStatusInfo>;
    getProcurementRmaStatusesByIdUsages(id: number, params?: CommonParameters): Promise<Array<Usage>>;
    getProcurementRmaStatusesByIdUsagesList(id: number, params?: CommonParameters): Promise<Array<Usage>>;
    postProcurementRmaStatusesByParentIdEmailtemplates(parentId: number, rmaStatusEmailTemplate: RmaStatusEmailTemplate): Promise<RmaStatusEmailTemplate>;
    getProcurementRmaStatusesByParentIdEmailTemplates(parentId: number, params?: CommonParameters): Promise<Array<RmaStatusEmailTemplate>>;
    getProcurementRmaStatusesByParentIdEmailtemplatesById(id: number, parentId: number, params?: CommonParameters): Promise<RmaStatusEmailTemplate>;
    deleteProcurementRmaStatusesByParentIdEmailtemplatesById(id: number, parentId: number): Promise<NoContentResponse>;
    putProcurementRmaStatusesByParentIdEmailtemplatesById(id: number, parentId: number, rmaStatusEmailTemplate: RmaStatusEmailTemplate): Promise<RmaStatusEmailTemplate>;
    patchProcurementRmaStatusesByParentIdEmailtemplatesById(id: number, parentId: number, patchOperations: Array<PatchOperation>): Promise<RmaStatusEmailTemplate>;
    getProcurementRmaStatusesByParentIdEmailtemplatesCount(parentId: number, params?: CommonParameters): Promise<Count>;
    getProcurementRmaStatusesByParentIdNotifications(parentId: number, params?: CommonParameters): Promise<Array<RmaStatusNotification>>;
    postProcurementRmaStatusesByParentIdNotifications(parentId: number, rmaStatusNotification: RmaStatusNotification): Promise<RmaStatusNotification>;
    getProcurementRmaStatusesByParentIdNotificationsById(id: number, parentId: number, params?: CommonParameters): Promise<RmaStatusNotification>;
    deleteProcurementRmaStatusesByParentIdNotificationsById(id: number, parentId: number): Promise<NoContentResponse>;
    putProcurementRmaStatusesByParentIdNotificationsById(id: number, parentId: number, rmaStatusNotification: RmaStatusNotification): Promise<RmaStatusNotification>;
    patchProcurementRmaStatusesByParentIdNotificationsById(id: number, parentId: number, patchOperations: Array<PatchOperation>): Promise<RmaStatusNotification>;
    getProcurementRmaStatusesByParentIdNotificationsCount(parentId: number, params?: CommonParameters): Promise<Count>;
    getProcurementRmaStatusesCount(params?: CommonParameters): Promise<Count>;
    getProcurementRmaStatusesInfo(params?: CommonParameters): Promise<Array<RmaStatusInfo>>;
    getProcurementRmaStatusesInfoCount(params?: CommonParameters): Promise<Count>;
    getProcurementRmaTags(params?: CommonParameters): Promise<Array<RmaTag>>;
    postProcurementRmaTags(rmaTag: RmaTag): Promise<RmaTag>;
    getProcurementRmaTagsById(id: number, params?: CommonParameters): Promise<RmaTag>;
    deleteProcurementRmaTagsById(id: number): Promise<NoContentResponse>;
    putProcurementRmaTagsById(id: number, rmaTag: RmaTag): Promise<RmaTag>;
    patchProcurementRmaTagsById(id: number, patchOperations: Array<PatchOperation>): Promise<RmaTag>;
    getProcurementRmaTagsCount(params?: CommonParameters): Promise<Count>;
    getProcurementRmaTagsDefault(productId: number, billingLogId: number, ticketId: number, projectId: number, salesOrderId: number, companyId: number, params?: CommonParameters): Promise<RmaTag>;
    getProcurementSettings(params?: CommonParameters): Promise<Array<ProcurementSetting>>;
    getProcurementSettingsById(id: number, params?: CommonParameters): Promise<ProcurementSetting>;
    putProcurementSettingsById(id: number, procurementSetting: ProcurementSetting): Promise<ProcurementSetting>;
    patchProcurementSettingsById(id: number, patchOperations: Array<PatchOperation>): Promise<ProcurementSetting>;
    getProcurementSettingsCount(params?: CommonParameters): Promise<Count>;
    getProcurementShipmentmethods(params?: CommonParameters): Promise<Array<ShipmentMethod>>;
    postProcurementShipmentmethods(shipmentMethod: ShipmentMethod): Promise<ShipmentMethod>;
    getProcurementShipmentmethodsById(id: number, params?: CommonParameters): Promise<ShipmentMethod>;
    deleteProcurementShipmentmethodsById(id: number): Promise<NoContentResponse>;
    putProcurementShipmentmethodsById(id: number, shipmentMethod: ShipmentMethod): Promise<ShipmentMethod>;
    patchProcurementShipmentmethodsById(id: number, patchOperations: Array<PatchOperation>): Promise<ShipmentMethod>;
    getProcurementShipmentmethodsByIdInfo(id: number, params?: CommonParameters): Promise<ShipmentMethodInfo>;
    getProcurementShipmentmethodsByIdUsages(id: number, params?: CommonParameters): Promise<Array<Usage>>;
    getProcurementShipmentmethodsByIdUsagesList(id: number, params?: CommonParameters): Promise<Array<Usage>>;
    getProcurementShipmentmethodsCount(params?: CommonParameters): Promise<Count>;
    getProcurementShipmentmethodsInfo(params?: CommonParameters): Promise<Array<ShipmentMethodInfo>>;
    getProcurementShipmentmethodsInfoCount(params?: CommonParameters): Promise<Count>;
    getProcurementSubcategories(params?: CommonParameters): Promise<Array<SubCategory>>;
    postProcurementSubcategories(subCategory: SubCategory): Promise<SubCategory>;
    getProcurementSubcategoriesById(id: number, params?: CommonParameters): Promise<SubCategory>;
    deleteProcurementSubcategoriesById(id: number): Promise<NoContentResponse>;
    putProcurementSubcategoriesById(id: number, subCategory: SubCategory): Promise<SubCategory>;
    patchProcurementSubcategoriesById(id: number, patchOperations: Array<PatchOperation>): Promise<SubCategory>;
    getProcurementSubcategoriesByIdInfo(id: number, params?: CommonParameters): Promise<SubCategoryInfo>;
    getProcurementSubcategoriesByIdUsages(id: number, params?: CommonParameters): Promise<Array<Usage>>;
    getProcurementSubcategoriesByIdUsagesList(id: number, params?: CommonParameters): Promise<Array<Usage>>;
    getProcurementSubcategoriesCount(params?: CommonParameters): Promise<Count>;
    getProcurementSubcategoriesInfo(params?: CommonParameters): Promise<Array<SubCategoryInfo>>;
    getProcurementSubcategoriesInfoCount(params?: CommonParameters): Promise<Count>;
    getProcurementTypes(params?: CommonParameters): Promise<Array<ProductType>>;
    postProcurementTypes(productTypes: ProductType): Promise<ProductType>;
    getProcurementTypesById(id: number, params?: CommonParameters): Promise<ProductType>;
    deleteProcurementTypesById(id: number): Promise<NoContentResponse>;
    putProcurementTypesById(id: number, productTypes: ProductType): Promise<ProductType>;
    patchProcurementTypesById(id: number, patchOperations: Array<PatchOperation>): Promise<ProductType>;
    getProcurementTypesByIdInfo(id: number, params?: CommonParameters): Promise<ProductTypeInfo>;
    getProcurementTypesByIdUsages(id: number, params?: CommonParameters): Promise<Array<Usage>>;
    getProcurementTypesByIdUsagesList(id: number, params?: CommonParameters): Promise<Array<Usage>>;
    getProcurementTypesCount(params?: CommonParameters): Promise<Count>;
    getProcurementTypesInfo(params?: CommonParameters): Promise<Array<ProductTypeInfo>>;
    getProcurementTypesInfoCount(params?: CommonParameters): Promise<Count>;
    getProcurementUnitOfMeasures(params?: CommonParameters): Promise<Array<UnitOfMeasure>>;
    postProcurementUnitOfMeasures(unitOfMeasure: UnitOfMeasure): Promise<UnitOfMeasure>;
    getProcurementUnitOfMeasuresById(id: number, params?: CommonParameters): Promise<UnitOfMeasure>;
    deleteProcurementUnitOfMeasuresById(id: number): Promise<NoContentResponse>;
    putProcurementUnitOfMeasuresById(id: number, unitOfMeasure: UnitOfMeasure): Promise<UnitOfMeasure>;
    patchProcurementUnitOfMeasuresById(id: number, patchOperations: Array<PatchOperation>): Promise<UnitOfMeasure>;
    getProcurementUnitOfMeasuresByParentIdConversions(parentId: number, params?: CommonParameters): Promise<Array<Conversion>>;
    postProcurementUnitOfMeasuresByParentIdConversions(parentId: number, conversion: Conversion): Promise<Conversion>;
    getProcurementUnitOfMeasuresByParentIdConversionsById(id: number, parentId: number, params?: CommonParameters): Promise<Conversion>;
    deleteProcurementUnitOfMeasuresByParentIdConversionsById(id: number, parentId: number): Promise<NoContentResponse>;
    putProcurementUnitOfMeasuresByParentIdConversionsById(id: number, parentId: number, conversion: Conversion): Promise<Conversion>;
    patchProcurementUnitOfMeasuresByParentIdConversionsById(id: number, parentId: number, patchOperations: Array<PatchOperation>): Promise<Conversion>;
    getProcurementUnitOfMeasuresByParentIdConversionsCount(parentId: number, params?: CommonParameters): Promise<Count>;
    getProcurementUnitOfMeasuresCount(params?: CommonParameters): Promise<Count>;
    getProcurementWarehouseBins(params?: CommonParameters): Promise<Array<WarehouseBin>>;
    postProcurementWarehouseBins(warehouseBin: WarehouseBin): Promise<WarehouseBin>;
    getProcurementWarehouseBinsById(id: number, params?: CommonParameters): Promise<WarehouseBin>;
    deleteProcurementWarehouseBinsById(id: number): Promise<NoContentResponse>;
    putProcurementWarehouseBinsById(id: number, warehouseBin: WarehouseBin): Promise<WarehouseBin>;
    patchProcurementWarehouseBinsById(id: number, patchOperations: Array<PatchOperation>): Promise<WarehouseBin>;
    getProcurementWarehouseBinsByIdInfo(id: number, params?: CommonParameters): Promise<WarehouseBinInfo>;
    getProcurementWarehouseBinsByParentIdInventoryOnHand(parentId: number, params?: CommonParameters): Promise<Array<InventoryOnHand>>;
    getProcurementWarehouseBinsByParentIdInventoryOnHandById(id: number, parentId: number, params?: CommonParameters): Promise<InventoryOnHand>;
    getProcurementWarehouseBinsByParentIdInventoryOnHandCount(parentId: number, params?: CommonParameters): Promise<Count>;
    getProcurementWarehouseBinsCount(params?: CommonParameters): Promise<Count>;
    getProcurementWarehouseBinsInfo(params?: CommonParameters): Promise<Array<WarehouseBinInfo>>;
    getProcurementWarehouseBinsInfoCount(params?: CommonParameters): Promise<Count>;
    getProcurementWarehouses(params?: CommonParameters): Promise<Array<Warehouse>>;
    postProcurementWarehouses(warehouse: Warehouse): Promise<Warehouse>;
    getProcurementWarehousesById(id: number, params?: CommonParameters): Promise<Warehouse>;
    deleteProcurementWarehousesById(id: number): Promise<NoContentResponse>;
    putProcurementWarehousesById(id: number, warehouse: Warehouse): Promise<Warehouse>;
    patchProcurementWarehousesById(id: number, patchOperations: Array<PatchOperation>): Promise<Warehouse>;
    getProcurementWarehousesByIdInfo(id: number, params?: CommonParameters): Promise<WarehouseInfo>;
    getProcurementWarehousesCount(params?: CommonParameters): Promise<Count>;
    getProcurementWarehousesInfo(params?: CommonParameters): Promise<Array<WarehouseInfo>>;
    getProcurementWarehousesInfoCount(params?: CommonParameters): Promise<Count>;
}
export {};
//# sourceMappingURL=ProcurementAPI.d.ts.map