import Manage from '../Manage';
import { components } from '../ManageTypes';
import { CommonParameters, CWMOptions } from '../ManageAPI';
import { NoContentResponse } from '../types';
declare type schemas = components['schemas'];
/** {@link ActivityReference} */
export declare type ActivityReference = schemas['ActivityReference'];
/** {@link ConfigurationReference} */
export declare type ConfigurationReference = schemas['ConfigurationReference'];
/** {@link ConvertItem} */
export declare type ConvertItem = schemas['ConvertItem'];
/** {@link Count} */
export declare type Count = schemas['Count'];
/** {@link DocumentReference} */
export declare type DocumentReference = schemas['DocumentReference'];
/** {@link FilterValues} */
export declare type FilterValues = schemas['FilterValues'];
/** {@link PatchOperation} */
export declare type PatchOperation = schemas['PatchOperation'];
/** {@link PhaseStatus} */
export declare type PhaseStatus = schemas['PhaseStatus'];
/** {@link ProductReference} */
export declare type ProductReference = schemas['ProductReference'];
/** {@link Project} */
export declare type Project = schemas['Project'];
/** {@link ProjectBoardTeam} */
export declare type ProjectBoardTeam = schemas['ProjectBoardTeam'];
/** {@link ProjectBoardTeamInfo} */
export declare type ProjectBoardTeamInfo = schemas['ProjectBoardTeamInfo'];
/** {@link ProjectBoardTeamMember} */
export declare type ProjectBoardTeamMember = schemas['ProjectBoardTeamMember'];
/** {@link ProjectContact} */
export declare type ProjectContact = schemas['ProjectContact'];
/** {@link ProjectNote} */
export declare type ProjectNote = schemas['ProjectNote'];
/** {@link ProjectPhase} */
export declare type ProjectPhase = schemas['ProjectPhase'];
/** {@link ProjectSecurityRole} */
export declare type ProjectSecurityRole = schemas['ProjectSecurityRole'];
/** {@link ProjectSecurityRoleSetting} */
export declare type ProjectSecurityRoleSetting = schemas['ProjectSecurityRoleSetting'];
/** {@link ProjectStatus} */
export declare type ProjectStatus = schemas['ProjectStatus'];
/** {@link ProjectStatusInfo} */
export declare type ProjectStatusInfo = schemas['ProjectStatusInfo'];
/** {@link ProjectTeamMember} */
export declare type ProjectTeamMember = schemas['ProjectTeamMember'];
/** {@link ProjectTicket} */
export declare type ProjectTicket = schemas['ProjectTicket'];
/** {@link ProjectTicketNote} */
export declare type ProjectTicketNote = schemas['ProjectTicketNote'];
/** {@link ProjectType} */
export declare type ProjectType = schemas['ProjectType'];
/** {@link ProjectTypeInfo} */
export declare type ProjectTypeInfo = schemas['ProjectTypeInfo'];
/** {@link ScheduleEntryReference} */
export declare type ScheduleEntryReference = schemas['ScheduleEntryReference'];
/** {@link StatusIndicator} */
export declare type StatusIndicator = schemas['StatusIndicator'];
/** {@link SuccessResponse} */
export declare type SuccessResponse = schemas['SuccessResponse'];
/** {@link TicketNote} */
export declare type TicketNote = schemas['TicketNote'];
/** {@link TicketTask} */
export declare type TicketTask = schemas['TicketTask'];
/** {@link TimeEntryReference} */
export declare type TimeEntryReference = schemas['TimeEntryReference'];
/** {@link Usage} */
export declare type Usage = schemas['Usage'];
/**
 * @module ProjectAPI
 */
/**
 * Project module
 * @public
 */
export declare class ProjectAPI extends Manage {
    constructor(props: CWMOptions);
    getProjectBoardsByGrandparentIdTeamsByParentIdMembers(parentId: number, grandparentId: number, params?: CommonParameters): Promise<Array<ProjectBoardTeamMember>>;
    postProjectBoardsByGrandparentIdTeamsByParentIdMembers(parentId: number, grandparentId: number, teamMember: ProjectBoardTeamMember): Promise<ProjectBoardTeamMember>;
    getProjectBoardsByGrandparentIdTeamsByParentIdMembersById(id: number, parentId: number, grandparentId: number, params?: CommonParameters): Promise<ProjectBoardTeamMember>;
    deleteProjectBoardsByGrandparentIdTeamsByParentIdMembersById(id: number, parentId: number, grandparentId: number): Promise<NoContentResponse>;
    putProjectBoardsByGrandparentIdTeamsByParentIdMembersById(id: number, parentId: number, grandparentId: number, teamMember: ProjectBoardTeamMember): Promise<ProjectBoardTeamMember>;
    patchProjectBoardsByGrandparentIdTeamsByParentIdMembersById(id: number, parentId: number, grandparentId: number, patchOperations: Array<PatchOperation>): Promise<ProjectBoardTeamMember>;
    getProjectBoardsByParentIdTeams(parentId: number, params?: CommonParameters): Promise<Array<ProjectBoardTeam>>;
    postProjectBoardsByParentIdTeams(parentId: number, team: ProjectBoardTeam): Promise<ProjectBoardTeam>;
    getProjectBoardsByParentIdTeamsById(id: number, parentId: number, params?: CommonParameters): Promise<ProjectBoardTeam>;
    deleteProjectBoardsByParentIdTeamsById(id: number, parentId: number): Promise<NoContentResponse>;
    putProjectBoardsByParentIdTeamsById(id: number, parentId: number, team: ProjectBoardTeam): Promise<ProjectBoardTeam>;
    patchProjectBoardsByParentIdTeamsById(id: number, parentId: number, patchOperations: Array<PatchOperation>): Promise<ProjectBoardTeam>;
    getProjectBoardsByParentIdTeamsByIdInfo(id: number, parentId: number, params?: CommonParameters): Promise<ProjectBoardTeamInfo>;
    getProjectBoardsByParentIdTeamsByIdInfoCount(id: number, parentId: number, params?: CommonParameters): Promise<Count>;
    getProjectBoardsByParentIdTeamsCount(parentId: number, params?: CommonParameters): Promise<Count>;
    getProjectBoardsByParentIdTeamsInfo(parentId: number, params?: CommonParameters): Promise<Array<ProjectBoardTeamInfo>>;
    getProjectPhaseStatuses(params?: CommonParameters): Promise<Array<PhaseStatus>>;
    postProjectPhaseStatuses(phaseStatus: PhaseStatus): Promise<PhaseStatus>;
    getProjectPhaseStatusesById(id: number, params?: CommonParameters): Promise<PhaseStatus>;
    deleteProjectPhaseStatusesById(id: number): Promise<NoContentResponse>;
    putProjectPhaseStatusesById(id: number, phaseStatus: PhaseStatus): Promise<PhaseStatus>;
    patchProjectPhaseStatusesById(id: number, patchOperations: Array<PatchOperation>): Promise<PhaseStatus>;
    getProjectPhaseStatusesByIdUsages(id: number, params?: CommonParameters): Promise<Array<Usage>>;
    getProjectPhaseStatusesByIdUsagesList(id: number, params?: CommonParameters): Promise<Array<Usage>>;
    getProjectPhaseStatusesCount(params?: CommonParameters): Promise<Count>;
    getProjectProjects(params?: CommonParameters): Promise<Array<Project>>;
    postProjectProjects(project: Project): Promise<Project>;
    getProjectProjectsById(id: number, params?: CommonParameters): Promise<Project>;
    deleteProjectProjectsById(id: number): Promise<NoContentResponse>;
    putProjectProjectsById(id: number, project: Project): Promise<Project>;
    patchProjectProjectsById(id: number, patchOperations: Array<PatchOperation>): Promise<Project>;
    getProjectProjectsByParentIdContacts(parentId: number, params?: CommonParameters): Promise<Array<ProjectContact>>;
    postProjectProjectsByParentIdContacts(parentId: number, contact: ProjectContact): Promise<ProjectContact>;
    getProjectProjectsByParentIdContactsById(id: number, parentId: number, params?: CommonParameters): Promise<ProjectContact>;
    deleteProjectProjectsByParentIdContactsById(id: number, parentId: number): Promise<NoContentResponse>;
    getProjectProjectsByParentIdNotes(parentId: number, params?: CommonParameters): Promise<Array<ProjectNote>>;
    postProjectProjectsByParentIdNotes(parentId: number, note: ProjectNote): Promise<ProjectNote>;
    getProjectProjectsByParentIdNotesById(id: number, parentId: number, params?: CommonParameters): Promise<ProjectNote>;
    deleteProjectProjectsByParentIdNotesById(id: number, parentId: number): Promise<NoContentResponse>;
    putProjectProjectsByParentIdNotesById(id: number, parentId: number, note: ProjectNote): Promise<ProjectNote>;
    patchProjectProjectsByParentIdNotesById(id: number, parentId: number, patchOperations: Array<PatchOperation>): Promise<ProjectNote>;
    getProjectProjectsByParentIdNotesCount(parentId: number, params?: CommonParameters): Promise<Count>;
    getProjectProjectsByParentIdPhases(parentId: number, params?: CommonParameters): Promise<Array<ProjectPhase>>;
    postProjectProjectsByParentIdPhases(parentId: number, projectPhase: ProjectPhase): Promise<ProjectPhase>;
    getProjectProjectsByParentIdPhasesById(id: number, parentId: number, params?: CommonParameters): Promise<ProjectPhase>;
    deleteProjectProjectsByParentIdPhasesById(id: number, parentId: number): Promise<NoContentResponse>;
    putProjectProjectsByParentIdPhasesById(id: number, parentId: number, projectPhase: ProjectPhase): Promise<ProjectPhase>;
    patchProjectProjectsByParentIdPhasesById(id: number, parentId: number, patchOperations: Array<PatchOperation>): Promise<ProjectPhase>;
    getProjectProjectsByParentIdPhasesCount(parentId: number, params?: CommonParameters): Promise<Count>;
    getProjectProjectsByParentIdTeamMembers(parentId: number, params?: CommonParameters): Promise<Array<ProjectTeamMember>>;
    postProjectProjectsByParentIdTeamMembers(parentId: number, teamMember: ProjectTeamMember): Promise<ProjectTeamMember>;
    getProjectProjectsByParentIdTeamMembersById(id: number, parentId: number, params?: CommonParameters): Promise<ProjectTeamMember>;
    deleteProjectProjectsByParentIdTeamMembersById(id: number, parentId: number): Promise<NoContentResponse>;
    putProjectProjectsByParentIdTeamMembersById(id: number, parentId: number, teamMember: ProjectTeamMember): Promise<ProjectTeamMember>;
    patchProjectProjectsByParentIdTeamMembersById(id: number, parentId: number, patchOperations: Array<PatchOperation>): Promise<ProjectTeamMember>;
    getProjectProjectsByParentIdTeamMembersCount(parentId: number, params?: CommonParameters): Promise<Count>;
    getProjectProjectsCount(params?: CommonParameters): Promise<Count>;
    getProjectProjectTypes(params?: CommonParameters): Promise<Array<ProjectType>>;
    postProjectProjectTypes(projectType: ProjectType): Promise<ProjectType>;
    getProjectProjectTypesById(id: number, params?: CommonParameters): Promise<ProjectType>;
    deleteProjectProjectTypesById(id: number): Promise<NoContentResponse>;
    putProjectProjectTypesById(id: number, projectType: ProjectType): Promise<ProjectType>;
    patchProjectProjectTypesById(id: number, patchOperations: Array<PatchOperation>): Promise<ProjectType>;
    getProjectProjectTypesByIdInfo(id: number, params?: CommonParameters): Promise<ProjectTypeInfo>;
    getProjectProjectTypesByIdUsages(id: number, params?: CommonParameters): Promise<Array<Usage>>;
    getProjectProjectTypesByIdUsagesList(id: number, params?: CommonParameters): Promise<Array<Usage>>;
    getProjectProjectTypesCount(params?: CommonParameters): Promise<Count>;
    getProjectProjectTypesInfo(params?: CommonParameters): Promise<Array<ProjectTypeInfo>>;
    getProjectProjectTypesInfoCount(params?: CommonParameters): Promise<Count>;
    getProjectSecurityRoles(params?: CommonParameters): Promise<Array<ProjectSecurityRole>>;
    postProjectSecurityRoles(projectSecurityRole: ProjectSecurityRole): Promise<ProjectSecurityRole>;
    getProjectSecurityRolesById(id: number, params?: CommonParameters): Promise<ProjectSecurityRole>;
    deleteProjectSecurityRolesById(id: number): Promise<NoContentResponse>;
    putProjectSecurityRolesById(id: number, projectSecurityRole: ProjectSecurityRole): Promise<ProjectSecurityRole>;
    patchProjectSecurityRolesById(id: number, patchOperations: Array<PatchOperation>): Promise<ProjectSecurityRole>;
    getProjectSecurityRolesByParentIdSettings(parentId: number, params?: CommonParameters): Promise<Array<ProjectSecurityRoleSetting>>;
    getProjectSecurityRolesByParentIdSettingsById(id: number, parentId: number, params?: CommonParameters): Promise<ProjectSecurityRoleSetting>;
    putProjectSecurityRolesByParentIdSettingsById(id: number, parentId: number, projectSecurityRoleSetting: ProjectSecurityRoleSetting): Promise<ProjectSecurityRoleSetting>;
    patchProjectSecurityRolesByParentIdSettingsById(id: number, parentId: number, patchOperations: Array<PatchOperation>): Promise<ProjectSecurityRoleSetting>;
    getProjectSecurityRolesByParentIdSettingsCount(parentId: number, params?: CommonParameters): Promise<Count>;
    getProjectSecurityRolesCount(params?: CommonParameters): Promise<Count>;
    getProjectStatuses(params?: CommonParameters): Promise<Array<ProjectStatus>>;
    postProjectStatuses(projectStatus: ProjectStatus): Promise<ProjectStatus>;
    getProjectStatusesById(id: number, params?: CommonParameters): Promise<ProjectStatus>;
    deleteProjectStatusesById(id: number): Promise<NoContentResponse>;
    putProjectStatusesById(id: number, projectStatus: ProjectStatus): Promise<ProjectStatus>;
    patchProjectStatusesById(id: number, patchOperations: Array<PatchOperation>): Promise<ProjectStatus>;
    getProjectStatusesByIdInfo(id: number, params?: CommonParameters): Promise<ProjectStatusInfo>;
    getProjectStatusesCount(params?: CommonParameters): Promise<Count>;
    getProjectStatusesInfo(params?: CommonParameters): Promise<Array<ProjectStatusInfo>>;
    getProjectStatusesInfoCount(params?: CommonParameters): Promise<Count>;
    getProjectStatusIndicators(params?: CommonParameters): Promise<Array<StatusIndicator>>;
    getProjectStatusIndicatorsById(id: number, params?: CommonParameters): Promise<StatusIndicator>;
    getProjectStatusIndicatorsCount(params?: CommonParameters): Promise<Count>;
    postProjectTicketNoteByIdMarkAs(id: number, item: ProjectTicketNote): Promise<any>;
    getProjectTickets(params?: CommonParameters): Promise<Array<ProjectTicket>>;
    postProjectTickets(ticket: ProjectTicket): Promise<ProjectTicket>;
    getProjectTicketsById(id: number, params?: CommonParameters): Promise<ProjectTicket>;
    deleteProjectTicketsById(id: number): Promise<NoContentResponse>;
    putProjectTicketsById(id: number, ticket: ProjectTicket): Promise<ProjectTicket>;
    patchProjectTicketsById(id: number, patchOperations: Array<PatchOperation>): Promise<ProjectTicket>;
    getProjectTicketsByParentIdActivities(parentId: number, params?: CommonParameters): Promise<Array<ActivityReference>>;
    getProjectTicketsByParentIdActivitiesCount(parentId: number, params?: CommonParameters): Promise<Count>;
    getProjectTicketsByParentIdAllNotes(parentId: number, params?: CommonParameters): Promise<Array<ProjectTicketNote>>;
    getProjectTicketsByParentIdConfigurations(parentId: number, params?: CommonParameters): Promise<Array<ConfigurationReference>>;
    postProjectTicketsByParentIdConfigurations(parentId: number, configuration: ConfigurationReference): Promise<ConfigurationReference>;
    getProjectTicketsByParentIdConfigurationsById(id: number, parentId: number, params?: CommonParameters): Promise<ConfigurationReference>;
    deleteProjectTicketsByParentIdConfigurationsById(id: number, parentId: number): Promise<NoContentResponse>;
    getProjectTicketsByParentIdConfigurationsCount(parentId: number, params?: CommonParameters): Promise<Count>;
    postProjectTicketsByParentIdConvert(parentId: number, item: ConvertItem): Promise<SuccessResponse>;
    getProjectTicketsByParentIdDocuments(parentId: number, params?: CommonParameters): Promise<Array<DocumentReference>>;
    getProjectTicketsByParentIdDocumentsCount(parentId: number, params?: CommonParameters): Promise<Count>;
    getProjectTicketsByParentIdNotes(parentId: number, params?: CommonParameters): Promise<Array<TicketNote>>;
    postProjectTicketsByParentIdNotes(parentId: number, ticketNote: TicketNote): Promise<TicketNote>;
    getProjectTicketsByParentIdNotesById(id: number, parentId: number, params?: CommonParameters): Promise<TicketNote>;
    deleteProjectTicketsByParentIdNotesById(id: number, parentId: number): Promise<NoContentResponse>;
    putProjectTicketsByParentIdNotesById(id: number, parentId: number, ticketNote: TicketNote): Promise<TicketNote>;
    patchProjectTicketsByParentIdNotesById(id: number, parentId: number, patchOperations: Array<PatchOperation>): Promise<TicketNote>;
    getProjectTicketsByParentIdNotesCount(parentId: number, params?: CommonParameters): Promise<Count>;
    getProjectTicketsByParentIdProducts(parentId: number, params?: CommonParameters): Promise<Array<ProductReference>>;
    getProjectTicketsByParentIdProductsCount(parentId: number, params?: CommonParameters): Promise<Count>;
    getProjectTicketsByParentIdScheduleentries(parentId: number, params?: CommonParameters): Promise<Array<ScheduleEntryReference>>;
    getProjectTicketsByParentIdScheduleentriesCount(parentId: number, params?: CommonParameters): Promise<Count>;
    getProjectTicketsByParentIdTasks(parentId: number, params?: CommonParameters): Promise<Array<TicketTask>>;
    postProjectTicketsByParentIdTasks(parentId: number, ticketTask: TicketTask): Promise<TicketTask>;
    getProjectTicketsByParentIdTasksById(id: number, parentId: number, params?: CommonParameters): Promise<TicketTask>;
    deleteProjectTicketsByParentIdTasksById(id: number, parentId: number): Promise<NoContentResponse>;
    putProjectTicketsByParentIdTasksById(id: number, parentId: number, ticketTask: TicketTask): Promise<TicketTask>;
    patchProjectTicketsByParentIdTasksById(id: number, parentId: number, patchOperations: Array<PatchOperation>): Promise<TicketTask>;
    getProjectTicketsByParentIdTasksCount(parentId: number, params?: CommonParameters): Promise<Count>;
    getProjectTicketsByParentIdTimeentries(parentId: number, params?: CommonParameters): Promise<Array<TimeEntryReference>>;
    getProjectTicketsByParentIdTimeentriesCount(parentId: number, params?: CommonParameters): Promise<Count>;
    getProjectTicketsCount(params?: CommonParameters): Promise<Count>;
    postProjectTicketsSearch(filterValues: FilterValues): Promise<Array<ProjectTicket>>;
}
export {};
//# sourceMappingURL=ProjectAPI.d.ts.map