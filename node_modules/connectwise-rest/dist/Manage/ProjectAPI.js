"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProjectAPI = void 0;
/* This file was auto-generated, do not manually edit. */
const Manage_1 = __importDefault(require("../Manage"));
/**
 * @module ProjectAPI
 */
/**
 * Project module
 * @public
 */
class ProjectAPI extends Manage_1.default {
    constructor(props) {
        super(props);
    }
    getProjectBoardsByGrandparentIdTeamsByParentIdMembers(parentId, grandparentId, params = {}) {
        return this.request({
            path: `/project/boards/${grandparentId}/teams/${parentId}/members`,
            method: 'get',
            params,
        });
    }
    postProjectBoardsByGrandparentIdTeamsByParentIdMembers(parentId, grandparentId, teamMember) {
        return this.request({
            path: `/project/boards/${grandparentId}/teams/${parentId}/members`,
            method: 'post',
            data: teamMember,
        });
    }
    getProjectBoardsByGrandparentIdTeamsByParentIdMembersById(id, parentId, grandparentId, params = {}) {
        return this.request({
            path: `/project/boards/${grandparentId}/teams/${parentId}/members/${id}`,
            method: 'get',
            params,
        });
    }
    deleteProjectBoardsByGrandparentIdTeamsByParentIdMembersById(id, parentId, grandparentId) {
        return this.request({
            path: `/project/boards/${grandparentId}/teams/${parentId}/members/${id}`,
            method: 'delete',
        });
    }
    putProjectBoardsByGrandparentIdTeamsByParentIdMembersById(id, parentId, grandparentId, teamMember) {
        return this.request({
            path: `/project/boards/${grandparentId}/teams/${parentId}/members/${id}`,
            method: 'put',
            data: teamMember,
        });
    }
    patchProjectBoardsByGrandparentIdTeamsByParentIdMembersById(id, parentId, grandparentId, patchOperations) {
        return this.request({
            path: `/project/boards/${grandparentId}/teams/${parentId}/members/${id}`,
            method: 'patch',
            data: patchOperations,
        });
    }
    getProjectBoardsByParentIdTeams(parentId, params = {}) {
        return this.request({
            path: `/project/boards/${parentId}/teams`,
            method: 'get',
            params,
        });
    }
    postProjectBoardsByParentIdTeams(parentId, team) {
        return this.request({
            path: `/project/boards/${parentId}/teams`,
            method: 'post',
            data: team,
        });
    }
    getProjectBoardsByParentIdTeamsById(id, parentId, params = {}) {
        return this.request({
            path: `/project/boards/${parentId}/teams/${id}`,
            method: 'get',
            params,
        });
    }
    deleteProjectBoardsByParentIdTeamsById(id, parentId) {
        return this.request({
            path: `/project/boards/${parentId}/teams/${id}`,
            method: 'delete',
        });
    }
    putProjectBoardsByParentIdTeamsById(id, parentId, team) {
        return this.request({
            path: `/project/boards/${parentId}/teams/${id}`,
            method: 'put',
            data: team,
        });
    }
    patchProjectBoardsByParentIdTeamsById(id, parentId, patchOperations) {
        return this.request({
            path: `/project/boards/${parentId}/teams/${id}`,
            method: 'patch',
            data: patchOperations,
        });
    }
    getProjectBoardsByParentIdTeamsByIdInfo(id, parentId, params = {}) {
        return this.request({
            path: `/project/boards/${parentId}/teams/${id}/info`,
            method: 'get',
            params,
        });
    }
    getProjectBoardsByParentIdTeamsByIdInfoCount(id, parentId, params = {}) {
        return this.request({
            path: `/project/boards/${parentId}/teams/${id}/info/count`,
            method: 'get',
            params,
        });
    }
    getProjectBoardsByParentIdTeamsCount(parentId, params = {}) {
        return this.request({
            path: `/project/boards/${parentId}/teams/count`,
            method: 'get',
            params,
        });
    }
    getProjectBoardsByParentIdTeamsInfo(parentId, params = {}) {
        return this.request({
            path: `/project/boards/${parentId}/teams/info`,
            method: 'get',
            params,
        });
    }
    getProjectPhaseStatuses(params = {}) {
        return this.request({
            path: `/project/phaseStatuses`,
            method: 'get',
            params,
        });
    }
    postProjectPhaseStatuses(phaseStatus) {
        return this.request({
            path: `/project/phaseStatuses`,
            method: 'post',
            data: phaseStatus,
        });
    }
    getProjectPhaseStatusesById(id, params = {}) {
        return this.request({
            path: `/project/phaseStatuses/${id}`,
            method: 'get',
            params,
        });
    }
    deleteProjectPhaseStatusesById(id) {
        return this.request({
            path: `/project/phaseStatuses/${id}`,
            method: 'delete',
        });
    }
    putProjectPhaseStatusesById(id, phaseStatus) {
        return this.request({
            path: `/project/phaseStatuses/${id}`,
            method: 'put',
            data: phaseStatus,
        });
    }
    patchProjectPhaseStatusesById(id, patchOperations) {
        return this.request({
            path: `/project/phaseStatuses/${id}`,
            method: 'patch',
            data: patchOperations,
        });
    }
    getProjectPhaseStatusesByIdUsages(id, params = {}) {
        return this.request({
            path: `/project/phaseStatuses/${id}/usages`,
            method: 'get',
            params,
        });
    }
    getProjectPhaseStatusesByIdUsagesList(id, params = {}) {
        return this.request({
            path: `/project/phaseStatuses/${id}/usages/list`,
            method: 'get',
            params,
        });
    }
    getProjectPhaseStatusesCount(params = {}) {
        return this.request({
            path: `/project/phaseStatuses/count`,
            method: 'get',
            params,
        });
    }
    getProjectProjects(params = {}) {
        return this.request({
            path: `/project/projects`,
            method: 'get',
            params,
        });
    }
    postProjectProjects(project) {
        return this.request({
            path: `/project/projects`,
            method: 'post',
            data: project,
        });
    }
    getProjectProjectsById(id, params = {}) {
        return this.request({
            path: `/project/projects/${id}`,
            method: 'get',
            params,
        });
    }
    deleteProjectProjectsById(id) {
        return this.request({
            path: `/project/projects/${id}`,
            method: 'delete',
        });
    }
    putProjectProjectsById(id, project) {
        return this.request({
            path: `/project/projects/${id}`,
            method: 'put',
            data: project,
        });
    }
    patchProjectProjectsById(id, patchOperations) {
        return this.request({
            path: `/project/projects/${id}`,
            method: 'patch',
            data: patchOperations,
        });
    }
    getProjectProjectsByParentIdContacts(parentId, params = {}) {
        return this.request({
            path: `/project/projects/${parentId}/contacts`,
            method: 'get',
            params,
        });
    }
    postProjectProjectsByParentIdContacts(parentId, contact) {
        return this.request({
            path: `/project/projects/${parentId}/contacts`,
            method: 'post',
            data: contact,
        });
    }
    getProjectProjectsByParentIdContactsById(id, parentId, params = {}) {
        return this.request({
            path: `/project/projects/${parentId}/contacts/${id}`,
            method: 'get',
            params,
        });
    }
    deleteProjectProjectsByParentIdContactsById(id, parentId) {
        return this.request({
            path: `/project/projects/${parentId}/contacts/${id}`,
            method: 'delete',
        });
    }
    getProjectProjectsByParentIdNotes(parentId, params = {}) {
        return this.request({
            path: `/project/projects/${parentId}/notes`,
            method: 'get',
            params,
        });
    }
    postProjectProjectsByParentIdNotes(parentId, note) {
        return this.request({
            path: `/project/projects/${parentId}/notes`,
            method: 'post',
            data: note,
        });
    }
    getProjectProjectsByParentIdNotesById(id, parentId, params = {}) {
        return this.request({
            path: `/project/projects/${parentId}/notes/${id}`,
            method: 'get',
            params,
        });
    }
    deleteProjectProjectsByParentIdNotesById(id, parentId) {
        return this.request({
            path: `/project/projects/${parentId}/notes/${id}`,
            method: 'delete',
        });
    }
    putProjectProjectsByParentIdNotesById(id, parentId, note) {
        return this.request({
            path: `/project/projects/${parentId}/notes/${id}`,
            method: 'put',
            data: note,
        });
    }
    patchProjectProjectsByParentIdNotesById(id, parentId, patchOperations) {
        return this.request({
            path: `/project/projects/${parentId}/notes/${id}`,
            method: 'patch',
            data: patchOperations,
        });
    }
    getProjectProjectsByParentIdNotesCount(parentId, params = {}) {
        return this.request({
            path: `/project/projects/${parentId}/notes/count`,
            method: 'get',
            params,
        });
    }
    getProjectProjectsByParentIdPhases(parentId, params = {}) {
        return this.request({
            path: `/project/projects/${parentId}/phases`,
            method: 'get',
            params,
        });
    }
    postProjectProjectsByParentIdPhases(parentId, projectPhase) {
        return this.request({
            path: `/project/projects/${parentId}/phases`,
            method: 'post',
            data: projectPhase,
        });
    }
    getProjectProjectsByParentIdPhasesById(id, parentId, params = {}) {
        return this.request({
            path: `/project/projects/${parentId}/phases/${id}`,
            method: 'get',
            params,
        });
    }
    deleteProjectProjectsByParentIdPhasesById(id, parentId) {
        return this.request({
            path: `/project/projects/${parentId}/phases/${id}`,
            method: 'delete',
        });
    }
    putProjectProjectsByParentIdPhasesById(id, parentId, projectPhase) {
        return this.request({
            path: `/project/projects/${parentId}/phases/${id}`,
            method: 'put',
            data: projectPhase,
        });
    }
    patchProjectProjectsByParentIdPhasesById(id, parentId, patchOperations) {
        return this.request({
            path: `/project/projects/${parentId}/phases/${id}`,
            method: 'patch',
            data: patchOperations,
        });
    }
    getProjectProjectsByParentIdPhasesCount(parentId, params = {}) {
        return this.request({
            path: `/project/projects/${parentId}/phases/count`,
            method: 'get',
            params,
        });
    }
    getProjectProjectsByParentIdTeamMembers(parentId, params = {}) {
        return this.request({
            path: `/project/projects/${parentId}/teamMembers`,
            method: 'get',
            params,
        });
    }
    postProjectProjectsByParentIdTeamMembers(parentId, teamMember) {
        return this.request({
            path: `/project/projects/${parentId}/teamMembers`,
            method: 'post',
            data: teamMember,
        });
    }
    getProjectProjectsByParentIdTeamMembersById(id, parentId, params = {}) {
        return this.request({
            path: `/project/projects/${parentId}/teamMembers/${id}`,
            method: 'get',
            params,
        });
    }
    deleteProjectProjectsByParentIdTeamMembersById(id, parentId) {
        return this.request({
            path: `/project/projects/${parentId}/teamMembers/${id}`,
            method: 'delete',
        });
    }
    putProjectProjectsByParentIdTeamMembersById(id, parentId, teamMember) {
        return this.request({
            path: `/project/projects/${parentId}/teamMembers/${id}`,
            method: 'put',
            data: teamMember,
        });
    }
    patchProjectProjectsByParentIdTeamMembersById(id, parentId, patchOperations) {
        return this.request({
            path: `/project/projects/${parentId}/teamMembers/${id}`,
            method: 'patch',
            data: patchOperations,
        });
    }
    getProjectProjectsByParentIdTeamMembersCount(parentId, params = {}) {
        return this.request({
            path: `/project/projects/${parentId}/teamMembers/count`,
            method: 'get',
            params,
        });
    }
    getProjectProjectsCount(params = {}) {
        return this.request({
            path: `/project/projects/count`,
            method: 'get',
            params,
        });
    }
    getProjectProjectTypes(params = {}) {
        return this.request({
            path: `/project/projectTypes`,
            method: 'get',
            params,
        });
    }
    postProjectProjectTypes(projectType) {
        return this.request({
            path: `/project/projectTypes`,
            method: 'post',
            data: projectType,
        });
    }
    getProjectProjectTypesById(id, params = {}) {
        return this.request({
            path: `/project/projectTypes/${id}`,
            method: 'get',
            params,
        });
    }
    deleteProjectProjectTypesById(id) {
        return this.request({
            path: `/project/projectTypes/${id}`,
            method: 'delete',
        });
    }
    putProjectProjectTypesById(id, projectType) {
        return this.request({
            path: `/project/projectTypes/${id}`,
            method: 'put',
            data: projectType,
        });
    }
    patchProjectProjectTypesById(id, patchOperations) {
        return this.request({
            path: `/project/projectTypes/${id}`,
            method: 'patch',
            data: patchOperations,
        });
    }
    getProjectProjectTypesByIdInfo(id, params = {}) {
        return this.request({
            path: `/project/projectTypes/${id}/info`,
            method: 'get',
            params,
        });
    }
    getProjectProjectTypesByIdUsages(id, params = {}) {
        return this.request({
            path: `/project/projectTypes/${id}/usages`,
            method: 'get',
            params,
        });
    }
    getProjectProjectTypesByIdUsagesList(id, params = {}) {
        return this.request({
            path: `/project/projectTypes/${id}/usages/list`,
            method: 'get',
            params,
        });
    }
    getProjectProjectTypesCount(params = {}) {
        return this.request({
            path: `/project/projectTypes/count`,
            method: 'get',
            params,
        });
    }
    getProjectProjectTypesInfo(params = {}) {
        return this.request({
            path: `/project/projectTypes/info`,
            method: 'get',
            params,
        });
    }
    getProjectProjectTypesInfoCount(params = {}) {
        return this.request({
            path: `/project/projectTypes/info/count`,
            method: 'get',
            params,
        });
    }
    getProjectSecurityRoles(params = {}) {
        return this.request({
            path: `/project/securityRoles`,
            method: 'get',
            params,
        });
    }
    postProjectSecurityRoles(projectSecurityRole) {
        return this.request({
            path: `/project/securityRoles`,
            method: 'post',
            data: projectSecurityRole,
        });
    }
    getProjectSecurityRolesById(id, params = {}) {
        return this.request({
            path: `/project/securityRoles/${id}`,
            method: 'get',
            params,
        });
    }
    deleteProjectSecurityRolesById(id) {
        return this.request({
            path: `/project/securityRoles/${id}`,
            method: 'delete',
        });
    }
    putProjectSecurityRolesById(id, projectSecurityRole) {
        return this.request({
            path: `/project/securityRoles/${id}`,
            method: 'put',
            data: projectSecurityRole,
        });
    }
    patchProjectSecurityRolesById(id, patchOperations) {
        return this.request({
            path: `/project/securityRoles/${id}`,
            method: 'patch',
            data: patchOperations,
        });
    }
    getProjectSecurityRolesByParentIdSettings(parentId, params = {}) {
        return this.request({
            path: `/project/securityRoles/${parentId}/settings`,
            method: 'get',
            params,
        });
    }
    getProjectSecurityRolesByParentIdSettingsById(id, parentId, params = {}) {
        return this.request({
            path: `/project/securityRoles/${parentId}/settings/${id}`,
            method: 'get',
            params,
        });
    }
    putProjectSecurityRolesByParentIdSettingsById(id, parentId, projectSecurityRoleSetting) {
        return this.request({
            path: `/project/securityRoles/${parentId}/settings/${id}`,
            method: 'put',
            data: projectSecurityRoleSetting,
        });
    }
    patchProjectSecurityRolesByParentIdSettingsById(id, parentId, patchOperations) {
        return this.request({
            path: `/project/securityRoles/${parentId}/settings/${id}`,
            method: 'patch',
            data: patchOperations,
        });
    }
    getProjectSecurityRolesByParentIdSettingsCount(parentId, params = {}) {
        return this.request({
            path: `/project/securityRoles/${parentId}/settings/count`,
            method: 'get',
            params,
        });
    }
    getProjectSecurityRolesCount(params = {}) {
        return this.request({
            path: `/project/securityRoles/count`,
            method: 'get',
            params,
        });
    }
    getProjectStatuses(params = {}) {
        return this.request({
            path: `/project/statuses`,
            method: 'get',
            params,
        });
    }
    postProjectStatuses(projectStatus) {
        return this.request({
            path: `/project/statuses`,
            method: 'post',
            data: projectStatus,
        });
    }
    getProjectStatusesById(id, params = {}) {
        return this.request({
            path: `/project/statuses/${id}`,
            method: 'get',
            params,
        });
    }
    deleteProjectStatusesById(id) {
        return this.request({
            path: `/project/statuses/${id}`,
            method: 'delete',
        });
    }
    putProjectStatusesById(id, projectStatus) {
        return this.request({
            path: `/project/statuses/${id}`,
            method: 'put',
            data: projectStatus,
        });
    }
    patchProjectStatusesById(id, patchOperations) {
        return this.request({
            path: `/project/statuses/${id}`,
            method: 'patch',
            data: patchOperations,
        });
    }
    getProjectStatusesByIdInfo(id, params = {}) {
        return this.request({
            path: `/project/statuses/${id}/info`,
            method: 'get',
            params,
        });
    }
    getProjectStatusesCount(params = {}) {
        return this.request({
            path: `/project/statuses/count`,
            method: 'get',
            params,
        });
    }
    getProjectStatusesInfo(params = {}) {
        return this.request({
            path: `/project/statuses/info`,
            method: 'get',
            params,
        });
    }
    getProjectStatusesInfoCount(params = {}) {
        return this.request({
            path: `/project/statuses/info/count`,
            method: 'get',
            params,
        });
    }
    getProjectStatusIndicators(params = {}) {
        return this.request({
            path: `/project/statusIndicators`,
            method: 'get',
            params,
        });
    }
    getProjectStatusIndicatorsById(id, params = {}) {
        return this.request({
            path: `/project/statusIndicators/${id}`,
            method: 'get',
            params,
        });
    }
    getProjectStatusIndicatorsCount(params = {}) {
        return this.request({
            path: `/project/statusIndicators/count`,
            method: 'get',
            params,
        });
    }
    postProjectTicketNoteByIdMarkAs(id, item) {
        return this.request({
            path: `/project/ticketNote/${id}/markAs/`,
            method: 'post',
            data: item,
        });
    }
    getProjectTickets(params = {}) {
        return this.request({
            path: `/project/tickets`,
            method: 'get',
            params,
        });
    }
    postProjectTickets(ticket) {
        return this.request({
            path: `/project/tickets`,
            method: 'post',
            data: ticket,
        });
    }
    getProjectTicketsById(id, params = {}) {
        return this.request({
            path: `/project/tickets/${id}`,
            method: 'get',
            params,
        });
    }
    deleteProjectTicketsById(id) {
        return this.request({
            path: `/project/tickets/${id}`,
            method: 'delete',
        });
    }
    putProjectTicketsById(id, ticket) {
        return this.request({
            path: `/project/tickets/${id}`,
            method: 'put',
            data: ticket,
        });
    }
    patchProjectTicketsById(id, patchOperations) {
        return this.request({
            path: `/project/tickets/${id}`,
            method: 'patch',
            data: patchOperations,
        });
    }
    getProjectTicketsByParentIdActivities(parentId, params = {}) {
        return this.request({
            path: `/project/tickets/${parentId}/activities`,
            method: 'get',
            params,
        });
    }
    getProjectTicketsByParentIdActivitiesCount(parentId, params = {}) {
        return this.request({
            path: `/project/tickets/${parentId}/activities/count`,
            method: 'get',
            params,
        });
    }
    getProjectTicketsByParentIdAllNotes(parentId, params = {}) {
        return this.request({
            path: `/project/tickets/${parentId}/allNotes`,
            method: 'get',
            params,
        });
    }
    getProjectTicketsByParentIdConfigurations(parentId, params = {}) {
        return this.request({
            path: `/project/tickets/${parentId}/configurations`,
            method: 'get',
            params,
        });
    }
    postProjectTicketsByParentIdConfigurations(parentId, configuration) {
        return this.request({
            path: `/project/tickets/${parentId}/configurations`,
            method: 'post',
            data: configuration,
        });
    }
    getProjectTicketsByParentIdConfigurationsById(id, parentId, params = {}) {
        return this.request({
            path: `/project/tickets/${parentId}/configurations/${id}`,
            method: 'get',
            params,
        });
    }
    deleteProjectTicketsByParentIdConfigurationsById(id, parentId) {
        return this.request({
            path: `/project/tickets/${parentId}/configurations/${id}`,
            method: 'delete',
        });
    }
    getProjectTicketsByParentIdConfigurationsCount(parentId, params = {}) {
        return this.request({
            path: `/project/tickets/${parentId}/configurations/count`,
            method: 'get',
            params,
        });
    }
    postProjectTicketsByParentIdConvert(parentId, item) {
        return this.request({
            path: `/project/tickets/${parentId}/convert`,
            method: 'post',
            data: item,
        });
    }
    getProjectTicketsByParentIdDocuments(parentId, params = {}) {
        return this.request({
            path: `/project/tickets/${parentId}/documents`,
            method: 'get',
            params,
        });
    }
    getProjectTicketsByParentIdDocumentsCount(parentId, params = {}) {
        return this.request({
            path: `/project/tickets/${parentId}/documents/count`,
            method: 'get',
            params,
        });
    }
    getProjectTicketsByParentIdNotes(parentId, params = {}) {
        return this.request({
            path: `/project/tickets/${parentId}/notes`,
            method: 'get',
            params,
        });
    }
    postProjectTicketsByParentIdNotes(parentId, ticketNote) {
        return this.request({
            path: `/project/tickets/${parentId}/notes`,
            method: 'post',
            data: ticketNote,
        });
    }
    getProjectTicketsByParentIdNotesById(id, parentId, params = {}) {
        return this.request({
            path: `/project/tickets/${parentId}/notes/${id}`,
            method: 'get',
            params,
        });
    }
    deleteProjectTicketsByParentIdNotesById(id, parentId) {
        return this.request({
            path: `/project/tickets/${parentId}/notes/${id}`,
            method: 'delete',
        });
    }
    putProjectTicketsByParentIdNotesById(id, parentId, ticketNote) {
        return this.request({
            path: `/project/tickets/${parentId}/notes/${id}`,
            method: 'put',
            data: ticketNote,
        });
    }
    patchProjectTicketsByParentIdNotesById(id, parentId, patchOperations) {
        return this.request({
            path: `/project/tickets/${parentId}/notes/${id}`,
            method: 'patch',
            data: patchOperations,
        });
    }
    getProjectTicketsByParentIdNotesCount(parentId, params = {}) {
        return this.request({
            path: `/project/tickets/${parentId}/notes/count`,
            method: 'get',
            params,
        });
    }
    getProjectTicketsByParentIdProducts(parentId, params = {}) {
        return this.request({
            path: `/project/tickets/${parentId}/products`,
            method: 'get',
            params,
        });
    }
    getProjectTicketsByParentIdProductsCount(parentId, params = {}) {
        return this.request({
            path: `/project/tickets/${parentId}/products/count`,
            method: 'get',
            params,
        });
    }
    getProjectTicketsByParentIdScheduleentries(parentId, params = {}) {
        return this.request({
            path: `/project/tickets/${parentId}/scheduleentries`,
            method: 'get',
            params,
        });
    }
    getProjectTicketsByParentIdScheduleentriesCount(parentId, params = {}) {
        return this.request({
            path: `/project/tickets/${parentId}/scheduleentries/count`,
            method: 'get',
            params,
        });
    }
    getProjectTicketsByParentIdTasks(parentId, params = {}) {
        return this.request({
            path: `/project/tickets/${parentId}/tasks`,
            method: 'get',
            params,
        });
    }
    postProjectTicketsByParentIdTasks(parentId, ticketTask) {
        return this.request({
            path: `/project/tickets/${parentId}/tasks`,
            method: 'post',
            data: ticketTask,
        });
    }
    getProjectTicketsByParentIdTasksById(id, parentId, params = {}) {
        return this.request({
            path: `/project/tickets/${parentId}/tasks/${id}`,
            method: 'get',
            params,
        });
    }
    deleteProjectTicketsByParentIdTasksById(id, parentId) {
        return this.request({
            path: `/project/tickets/${parentId}/tasks/${id}`,
            method: 'delete',
        });
    }
    putProjectTicketsByParentIdTasksById(id, parentId, ticketTask) {
        return this.request({
            path: `/project/tickets/${parentId}/tasks/${id}`,
            method: 'put',
            data: ticketTask,
        });
    }
    patchProjectTicketsByParentIdTasksById(id, parentId, patchOperations) {
        return this.request({
            path: `/project/tickets/${parentId}/tasks/${id}`,
            method: 'patch',
            data: patchOperations,
        });
    }
    getProjectTicketsByParentIdTasksCount(parentId, params = {}) {
        return this.request({
            path: `/project/tickets/${parentId}/tasks/count`,
            method: 'get',
            params,
        });
    }
    getProjectTicketsByParentIdTimeentries(parentId, params = {}) {
        return this.request({
            path: `/project/tickets/${parentId}/timeentries`,
            method: 'get',
            params,
        });
    }
    getProjectTicketsByParentIdTimeentriesCount(parentId, params = {}) {
        return this.request({
            path: `/project/tickets/${parentId}/timeentries/count`,
            method: 'get',
            params,
        });
    }
    getProjectTicketsCount(params = {}) {
        return this.request({
            path: `/project/tickets/count`,
            method: 'get',
            params,
        });
    }
    postProjectTicketsSearch(filterValues) {
        return this.request({
            path: `/project/tickets/search`,
            method: 'post',
            data: filterValues,
        });
    }
}
exports.ProjectAPI = ProjectAPI;
//# sourceMappingURL=ProjectAPI.js.map