import Manage from '../Manage';
import { components } from '../ManageTypes';
import { CommonParameters, CWMOptions } from '../ManageAPI';
import { NoContentResponse } from '../types';
declare type schemas = components['schemas'];
/** {@link Activity} */
export declare type Activity = schemas['Activity'];
/** {@link ActivityStatus} */
export declare type ActivityStatus = schemas['ActivityStatus'];
/** {@link ActivityStatusInfo} */
export declare type ActivityStatusInfo = schemas['ActivityStatusInfo'];
/** {@link ActivityType} */
export declare type ActivityType = schemas['ActivityType'];
/** {@link Agreement} */
export declare type Agreement = schemas['Agreement'];
/** {@link Commission} */
export declare type Commission = schemas['Commission'];
/** {@link Count} */
export declare type Count = schemas['Count'];
/** {@link Forecast} */
export declare type Forecast = schemas['Forecast'];
/** {@link ForecastItem} */
export declare type ForecastItem = schemas['ForecastItem'];
/** {@link Opportunity} */
export declare type Opportunity = schemas['Opportunity'];
/** {@link OpportunityContact} */
export declare type OpportunityContact = schemas['OpportunityContact'];
/** {@link OpportunityNote} */
export declare type OpportunityNote = schemas['OpportunityNote'];
/** {@link OpportunityRating} */
export declare type OpportunityRating = schemas['OpportunityRating'];
/** {@link OpportunityRatingInfo} */
export declare type OpportunityRatingInfo = schemas['OpportunityRatingInfo'];
/** {@link OpportunityStage} */
export declare type OpportunityStage = schemas['OpportunityStage'];
/** {@link OpportunityStageInfo} */
export declare type OpportunityStageInfo = schemas['OpportunityStageInfo'];
/** {@link OpportunityStatus} */
export declare type OpportunityStatus = schemas['OpportunityStatus'];
/** {@link OpportunityStatusInfo} */
export declare type OpportunityStatusInfo = schemas['OpportunityStatusInfo'];
/** {@link OpportunityToAgreementConversion} */
export declare type OpportunityToAgreementConversion = schemas['OpportunityToAgreementConversion'];
/** {@link OpportunityToProjectConversion} */
export declare type OpportunityToProjectConversion = schemas['OpportunityToProjectConversion'];
/** {@link OpportunityToSalesOrderConversion} */
export declare type OpportunityToSalesOrderConversion = schemas['OpportunityToSalesOrderConversion'];
/** {@link OpportunityToServiceTicketConversion} */
export declare type OpportunityToServiceTicketConversion = schemas['OpportunityToServiceTicketConversion'];
/** {@link OpportunityType} */
export declare type OpportunityType = schemas['OpportunityType'];
/** {@link OpportunityTypeInfo} */
export declare type OpportunityTypeInfo = schemas['OpportunityTypeInfo'];
/** {@link Order} */
export declare type Order = schemas['Order'];
/** {@link OrderStatus} */
export declare type OrderStatus = schemas['OrderStatus'];
/** {@link OrderStatusEmailTemplate} */
export declare type OrderStatusEmailTemplate = schemas['OrderStatusEmailTemplate'];
/** {@link OrderStatusInfo} */
export declare type OrderStatusInfo = schemas['OrderStatusInfo'];
/** {@link OrderStatusNotification} */
export declare type OrderStatusNotification = schemas['OrderStatusNotification'];
/** {@link PatchOperation} */
export declare type PatchOperation = schemas['PatchOperation'];
/** {@link Project} */
export declare type Project = schemas['Project'];
/** {@link Role} */
export declare type Role = schemas['Role'];
/** {@link SalesProbability} */
export declare type SalesProbability = schemas['SalesProbability'];
/** {@link SalesProbabilityInfo} */
export declare type SalesProbabilityInfo = schemas['SalesProbabilityInfo'];
/** {@link SalesQuota} */
export declare type SalesQuota = schemas['SalesQuota'];
/** {@link SalesTeam} */
export declare type SalesTeam = schemas['SalesTeam'];
/** {@link SalesTeamMember} */
export declare type SalesTeamMember = schemas['SalesTeamMember'];
/** {@link SuccessResponse} */
export declare type SuccessResponse = schemas['SuccessResponse'];
/** {@link Team} */
export declare type Team = schemas['Team'];
/** {@link Ticket} */
export declare type Ticket = schemas['Ticket'];
/** {@link Usage} */
export declare type Usage = schemas['Usage'];
/**
 * @module SalesAPI
 */
/**
 * Sales module
 * @public
 */
export declare class SalesAPI extends Manage {
    constructor(props: CWMOptions);
    getSalesActivities(params?: CommonParameters): Promise<Array<Activity>>;
    postSalesActivities(activity: Activity): Promise<Activity>;
    getSalesActivitiesById(id: number, params?: CommonParameters): Promise<Activity>;
    deleteSalesActivitiesById(id: number): Promise<NoContentResponse>;
    putSalesActivitiesById(id: number, activity: Activity): Promise<Activity>;
    patchSalesActivitiesById(id: number, patchOperations: Array<PatchOperation>): Promise<Activity>;
    getSalesActivitiesCount(params?: CommonParameters): Promise<Count>;
    getSalesActivitiesStatuses(params?: CommonParameters): Promise<Array<ActivityStatus>>;
    postSalesActivitiesStatuses(activityStatus: ActivityStatus): Promise<ActivityStatus>;
    getSalesActivitiesStatusesById(id: number, params?: CommonParameters): Promise<ActivityStatus>;
    deleteSalesActivitiesStatusesById(id: number): Promise<NoContentResponse>;
    putSalesActivitiesStatusesById(id: number, activityStatus: ActivityStatus): Promise<ActivityStatus>;
    patchSalesActivitiesStatusesById(id: number, patchOperations: Array<PatchOperation>): Promise<ActivityStatus>;
    getSalesActivitiesStatusesByIdInfo(id: number, params?: CommonParameters): Promise<ActivityStatusInfo>;
    getSalesActivitiesStatusesCount(params?: CommonParameters): Promise<Count>;
    getSalesActivitiesStatusesInfo(params?: CommonParameters): Promise<Array<ActivityStatusInfo>>;
    getSalesActivitiesStatusesInfoCount(params?: CommonParameters): Promise<Count>;
    getSalesActivitiesTypes(params?: CommonParameters): Promise<Array<ActivityType>>;
    postSalesActivitiesTypes(activityType: ActivityType): Promise<ActivityType>;
    getSalesActivitiesTypesById(id: number, params?: CommonParameters): Promise<ActivityType>;
    deleteSalesActivitiesTypesById(id: number): Promise<NoContentResponse>;
    putSalesActivitiesTypesById(id: number, activityType: ActivityType): Promise<ActivityType>;
    patchSalesActivitiesTypesById(id: number, patchOperations: Array<PatchOperation>): Promise<ActivityType>;
    getSalesActivitiesTypesByIdUsages(id: number, params?: CommonParameters): Promise<Array<Usage>>;
    getSalesActivitiesTypesByIdUsagesList(id: number, params?: CommonParameters): Promise<Array<Usage>>;
    getSalesActivitiesTypesCount(params?: CommonParameters): Promise<Count>;
    getSalesCommissions(params?: CommonParameters): Promise<Array<Commission>>;
    postSalesCommissions(commission: Commission): Promise<Commission>;
    getSalesCommissionsById(id: number, params?: CommonParameters): Promise<Commission>;
    deleteSalesCommissionsById(id: number): Promise<NoContentResponse>;
    putSalesCommissionsById(id: number, commission: Commission): Promise<Commission>;
    patchSalesCommissionsById(id: number, patchOperations: Array<PatchOperation>): Promise<Commission>;
    getSalesCommissionsByIdUsages(id: number, params?: CommonParameters): Promise<Array<Usage>>;
    getSalesCommissionsByIdUsagesList(id: number, params?: CommonParameters): Promise<Array<Usage>>;
    getSalesCommissionsCount(params?: CommonParameters): Promise<Count>;
    getSalesOpportunities(params?: CommonParameters): Promise<Array<Opportunity>>;
    postSalesOpportunities(opportunity: Opportunity): Promise<Opportunity>;
    getSalesOpportunitiesById(id: number, params?: CommonParameters): Promise<Opportunity>;
    deleteSalesOpportunitiesById(id: number): Promise<NoContentResponse>;
    putSalesOpportunitiesById(id: number, opportunity: Opportunity): Promise<Opportunity>;
    patchSalesOpportunitiesById(id: number, patchOperations: Array<PatchOperation>): Promise<Opportunity>;
    postSalesOpportunitiesByIdConvertToAgreement(id: number, conversion: OpportunityToAgreementConversion): Promise<Agreement>;
    postSalesOpportunitiesByIdConvertToProject(id: number, conversion: OpportunityToProjectConversion): Promise<Project>;
    postSalesOpportunitiesByIdConvertToSalesOrder(id: number, conversion: OpportunityToSalesOrderConversion): Promise<Order>;
    postSalesOpportunitiesByIdConvertToServiceTicket(id: number, conversion: OpportunityToServiceTicketConversion): Promise<Ticket>;
    getSalesOpportunitiesByParentIdContacts(parentId: number, params?: CommonParameters): Promise<Array<OpportunityContact>>;
    postSalesOpportunitiesByParentIdContacts(parentId: number, opportunityContact: OpportunityContact): Promise<OpportunityContact>;
    getSalesOpportunitiesByParentIdContactsById(id: number, parentId: number, params?: CommonParameters): Promise<OpportunityContact>;
    deleteSalesOpportunitiesByParentIdContactsById(id: number, parentId: number): Promise<NoContentResponse>;
    putSalesOpportunitiesByParentIdContactsById(id: number, parentId: number, opportunityContact: OpportunityContact): Promise<OpportunityContact>;
    patchSalesOpportunitiesByParentIdContactsById(id: number, parentId: number, patchOperations: Array<PatchOperation>): Promise<OpportunityContact>;
    getSalesOpportunitiesByParentIdContactsCount(parentId: number, params?: CommonParameters): Promise<Count>;
    getSalesOpportunitiesByParentIdForecast(parentId: number, params?: CommonParameters): Promise<Array<Forecast>>;
    postSalesOpportunitiesByParentIdForecast(parentId: number, forecast: Forecast): Promise<Forecast>;
    deleteSalesOpportunitiesByParentIdForecast(parentId: number): Promise<NoContentResponse>;
    putSalesOpportunitiesByParentIdForecast(parentId: number, forecast: Forecast): Promise<Forecast>;
    patchSalesOpportunitiesByParentIdForecast(parentId: number, patchOperations: Array<PatchOperation>): Promise<Forecast>;
    getSalesOpportunitiesByParentIdForecastById(id: number, parentId: number, params?: CommonParameters): Promise<ForecastItem>;
    postSalesOpportunitiesByParentIdForecastById(id: number, parentId: number, forecast: ForecastItem): Promise<ForecastItem>;
    deleteSalesOpportunitiesByParentIdForecastById(id: number, parentId: number): Promise<NoContentResponse>;
    putSalesOpportunitiesByParentIdForecastById(id: number, parentId: number, forecast: ForecastItem): Promise<ForecastItem>;
    patchSalesOpportunitiesByParentIdForecastById(id: number, parentId: number, patchOperations: Array<PatchOperation>): Promise<ForecastItem>;
    postSalesOpportunitiesByParentIdForecastCopyById(id: number, parentId: number): Promise<SuccessResponse>;
    getSalesOpportunitiesByParentIdForecastCount(parentId: number, params?: CommonParameters): Promise<Count>;
    getSalesOpportunitiesByParentIdNotes(parentId: number, params?: CommonParameters): Promise<Array<OpportunityNote>>;
    postSalesOpportunitiesByParentIdNotes(parentId: number, note: OpportunityNote): Promise<OpportunityNote>;
    getSalesOpportunitiesByParentIdNotesById(id: number, parentId: number, params?: CommonParameters): Promise<OpportunityNote>;
    deleteSalesOpportunitiesByParentIdNotesById(id: number, parentId: number): Promise<NoContentResponse>;
    putSalesOpportunitiesByParentIdNotesById(id: number, parentId: number, note: OpportunityNote): Promise<OpportunityNote>;
    patchSalesOpportunitiesByParentIdNotesById(id: number, parentId: number, patchOperations: Array<PatchOperation>): Promise<OpportunityNote>;
    getSalesOpportunitiesByParentIdNotesCount(parentId: number, params?: CommonParameters): Promise<Array<OpportunityNote>>;
    getSalesOpportunitiesByParentIdTeam(parentId: number, params?: CommonParameters): Promise<Array<Team>>;
    postSalesOpportunitiesByParentIdTeam(parentId: number, team: Team): Promise<Team>;
    getSalesOpportunitiesByParentIdTeamById(id: number, parentId: number, params?: CommonParameters): Promise<Team>;
    deleteSalesOpportunitiesByParentIdTeamById(id: number, parentId: number): Promise<NoContentResponse>;
    putSalesOpportunitiesByParentIdTeamById(id: number, parentId: number, team: Team): Promise<Team>;
    patchSalesOpportunitiesByParentIdTeamById(id: number, parentId: number, patchOperations: Array<PatchOperation>): Promise<Team>;
    getSalesOpportunitiesByParentIdTeamCount(parentId: number, params?: CommonParameters): Promise<Count>;
    getSalesOpportunitiesCount(params?: CommonParameters): Promise<Count>;
    getSalesOpportunitiesDefault(params?: CommonParameters): Promise<Opportunity>;
    getSalesOpportunitiesRatings(params?: CommonParameters): Promise<Array<OpportunityRating>>;
    postSalesOpportunitiesRatings(opportunityRating: OpportunityRating): Promise<OpportunityRating>;
    getSalesOpportunitiesRatingsById(id: number, params?: CommonParameters): Promise<OpportunityRating>;
    deleteSalesOpportunitiesRatingsById(id: number): Promise<NoContentResponse>;
    putSalesOpportunitiesRatingsById(id: number, opportunityRating: OpportunityRating): Promise<OpportunityRating>;
    patchSalesOpportunitiesRatingsById(id: number, patchOperations: Array<PatchOperation>): Promise<OpportunityRating>;
    getSalesOpportunitiesRatingsByIdInfo(id: number, params?: CommonParameters): Promise<OpportunityRatingInfo>;
    getSalesOpportunitiesRatingsCount(params?: CommonParameters): Promise<Count>;
    getSalesOpportunitiesRatingsInfo(params?: CommonParameters): Promise<Array<OpportunityRatingInfo>>;
    getSalesOpportunitiesRatingsInfoCount(params?: CommonParameters): Promise<Count>;
    getSalesOpportunitiesStatuses(params?: CommonParameters): Promise<Array<OpportunityStatus>>;
    postSalesOpportunitiesStatuses(status: OpportunityStatus): Promise<OpportunityStatus>;
    getSalesOpportunitiesStatusesById(id: number, params?: CommonParameters): Promise<OpportunityStatus>;
    deleteSalesOpportunitiesStatusesById(id: number): Promise<NoContentResponse>;
    putSalesOpportunitiesStatusesById(id: number, status: OpportunityStatus): Promise<OpportunityStatus>;
    patchSalesOpportunitiesStatusesById(id: number, patchOperations: Array<PatchOperation>): Promise<OpportunityStatus>;
    getSalesOpportunitiesStatusesByIdInfo(id: number, params?: CommonParameters): Promise<OpportunityStatusInfo>;
    getSalesOpportunitiesStatusesByIdUsages(id: number, params?: CommonParameters): Promise<Array<Usage>>;
    getSalesOpportunitiesStatusesByIdUsagesList(id: number, params?: CommonParameters): Promise<Array<Usage>>;
    getSalesOpportunitiesStatusesCount(params?: CommonParameters): Promise<Count>;
    getSalesOpportunitiesStatusesInfo(params?: CommonParameters): Promise<Array<OpportunityStatusInfo>>;
    getSalesOpportunitiesStatusesInfoCount(params?: CommonParameters): Promise<Count>;
    getSalesOpportunitiesTypes(params?: CommonParameters): Promise<Array<OpportunityType>>;
    postSalesOpportunitiesTypes(opportunityType: OpportunityType): Promise<OpportunityType>;
    getSalesOpportunitiesTypesById(id: number, params?: CommonParameters): Promise<OpportunityType>;
    deleteSalesOpportunitiesTypesById(id: number): Promise<NoContentResponse>;
    putSalesOpportunitiesTypesById(id: number, opportunityType: OpportunityType): Promise<OpportunityType>;
    patchSalesOpportunitiesTypesById(id: number, patchOperations: Array<PatchOperation>): Promise<OpportunityType>;
    getSalesOpportunitiesTypesByIdInfo(id: number, params?: CommonParameters): Promise<OpportunityTypeInfo>;
    getSalesOpportunitiesTypesByIdUsages(id: number, params?: CommonParameters): Promise<Array<Usage>>;
    getSalesOpportunitiesTypesByIdUsagesList(id: number, params?: CommonParameters): Promise<Array<Usage>>;
    getSalesOpportunitiesTypesCount(params?: CommonParameters): Promise<Count>;
    getSalesOpportunitiesTypesInfo(params?: CommonParameters): Promise<Array<OpportunityTypeInfo>>;
    getSalesOpportunitiesTypesInfoCount(params?: CommonParameters): Promise<Count>;
    getSalesOrders(params?: CommonParameters): Promise<Array<Order>>;
    postSalesOrders(order: Order): Promise<Order>;
    getSalesOrdersById(id: number, params?: CommonParameters): Promise<Order>;
    deleteSalesOrdersById(id: number): Promise<NoContentResponse>;
    putSalesOrdersById(id: number, order: Order): Promise<Order>;
    patchSalesOrdersById(id: number, patchOperations: Array<PatchOperation>): Promise<Order>;
    postSalesOrdersByIdConvertToServiceTicket(id: number): Promise<Ticket>;
    getSalesOrdersCount(params?: CommonParameters): Promise<Count>;
    getSalesOrdersStatuses(params?: CommonParameters): Promise<Array<OrderStatus>>;
    postSalesOrdersStatuses(status: OrderStatus): Promise<Array<OrderStatus>>;
    getSalesOrdersStatusesById(id: number, params?: CommonParameters): Promise<OrderStatus>;
    deleteSalesOrdersStatusesById(id: number): Promise<NoContentResponse>;
    putSalesOrdersStatusesById(id: number, status: OrderStatus): Promise<OrderStatus>;
    patchSalesOrdersStatusesById(id: number, patchOperations: Array<PatchOperation>): Promise<OrderStatus>;
    getSalesOrdersStatusesByIdInfo(id: number, params?: CommonParameters): Promise<OrderStatusInfo>;
    getSalesOrdersStatusesByIdUsages(id: number, params?: CommonParameters): Promise<Array<Usage>>;
    getSalesOrdersStatusesByIdUsagesList(id: number, params?: CommonParameters): Promise<Array<Usage>>;
    getSalesOrdersStatusesByParentIdEmailtemplates(parentId: number, params?: CommonParameters): Promise<Array<OrderStatusEmailTemplate>>;
    postSalesOrdersStatusesByParentIdEmailtemplates(parentId: number, orderStatusEmailTemplate: OrderStatusEmailTemplate): Promise<OrderStatusEmailTemplate>;
    getSalesOrdersStatusesByParentIdEmailtemplatesById(id: number, parentId: number, params?: CommonParameters): Promise<OrderStatusEmailTemplate>;
    deleteSalesOrdersStatusesByParentIdEmailtemplatesById(id: number, parentId: number): Promise<NoContentResponse>;
    putSalesOrdersStatusesByParentIdEmailtemplatesById(id: number, parentId: number, orderStatusEmailTemplate: OrderStatusEmailTemplate): Promise<OrderStatusEmailTemplate>;
    patchSalesOrdersStatusesByParentIdEmailtemplatesById(id: number, parentId: number, patchOperations: Array<PatchOperation>): Promise<OrderStatusEmailTemplate>;
    getSalesOrdersStatusesByParentIdEmailtemplatesCount(parentId: number, params?: CommonParameters): Promise<Count>;
    getSalesOrdersStatusesByParentIdNotifications(parentId: number, params?: CommonParameters): Promise<Array<OrderStatusNotification>>;
    postSalesOrdersStatusesByParentIdNotifications(parentId: number, orderStatusNotification: OrderStatusNotification): Promise<OrderStatusNotification>;
    getSalesOrdersStatusesByParentIdNotificationsById(id: number, parentId: number, params?: CommonParameters): Promise<OrderStatusNotification>;
    deleteSalesOrdersStatusesByParentIdNotificationsById(id: number, parentId: number): Promise<NoContentResponse>;
    putSalesOrdersStatusesByParentIdNotificationsById(id: number, parentId: number, orderStatusNotification: OrderStatusNotification): Promise<OrderStatusNotification>;
    patchSalesOrdersStatusesByParentIdNotificationsById(id: number, parentId: number, patchOperations: Array<PatchOperation>): Promise<OrderStatusNotification>;
    getSalesOrdersStatusesByParentIdNotificationsCount(parentId: number, params?: CommonParameters): Promise<Count>;
    getSalesOrdersStatusesCount(params?: CommonParameters): Promise<Count>;
    getSalesOrdersStatusesInfo(params?: CommonParameters): Promise<Array<OrderStatusInfo>>;
    getSalesOrdersStatusesInfoCount(params?: CommonParameters): Promise<Count>;
    getSalesProbabilities(params?: CommonParameters): Promise<Array<SalesProbability>>;
    postSalesProbabilities(probability: SalesProbability): Promise<SalesProbability>;
    getSalesProbabilitiesById(id: number, params?: CommonParameters): Promise<SalesProbability>;
    deleteSalesProbabilitiesById(id: number): Promise<NoContentResponse>;
    putSalesProbabilitiesById(id: number, probability: SalesProbability): Promise<SalesProbability>;
    patchSalesProbabilitiesById(id: number, patchOperations: Array<PatchOperation>): Promise<SalesProbability>;
    getSalesProbabilitiesByIdInfo(id: number, params?: CommonParameters): Promise<SalesProbabilityInfo>;
    getSalesProbabilitiesCount(params?: CommonParameters): Promise<Count>;
    getSalesProbabilitiesInfo(params?: CommonParameters): Promise<Array<SalesProbabilityInfo>>;
    getSalesProbabilitiesInfoCount(params?: CommonParameters): Promise<Count>;
    getSalesQuotas(params?: CommonParameters): Promise<Array<SalesQuota>>;
    postSalesQuotas(salesQuota: SalesQuota): Promise<SalesQuota>;
    getSalesQuotasById(id: number, params?: CommonParameters): Promise<SalesQuota>;
    deleteSalesQuotasById(id: number): Promise<NoContentResponse>;
    putSalesQuotasById(id: number, salesQuota: SalesQuota): Promise<SalesQuota>;
    patchSalesQuotasById(id: number, patchOperations: Array<PatchOperation>): Promise<SalesQuota>;
    getSalesQuotasCount(params?: CommonParameters): Promise<Count>;
    getSalesRoles(params?: CommonParameters): Promise<Array<Role>>;
    postSalesRoles(role: Role): Promise<Role>;
    getSalesRolesById(id: number, params?: CommonParameters): Promise<Role>;
    deleteSalesRolesById(id: number): Promise<NoContentResponse>;
    putSalesRolesById(id: number, role: Role): Promise<Role>;
    patchSalesRolesById(id: number, patchOperations: Array<PatchOperation>): Promise<Role>;
    getSalesRolesCount(params?: CommonParameters): Promise<Count>;
    getSalesSalesTeams(params?: CommonParameters): Promise<Array<SalesTeam>>;
    postSalesSalesTeams(salesTeam: SalesTeam): Promise<SalesTeam>;
    getSalesSalesTeamsById(id: number, params?: CommonParameters): Promise<SalesTeam>;
    deleteSalesSalesTeamsById(id: number): Promise<NoContentResponse>;
    putSalesSalesTeamsById(id: number, salesTeam: SalesTeam): Promise<SalesTeam>;
    patchSalesSalesTeamsById(id: number, patchOperations: Array<PatchOperation>): Promise<SalesTeam>;
    getSalesSalesTeamsByParentIdMembers(parentId: number, params?: CommonParameters): Promise<Array<SalesTeamMember>>;
    postSalesSalesTeamsByParentIdMembers(parentId: number, salesTeamMember: SalesTeamMember): Promise<SalesTeamMember>;
    getSalesSalesTeamsByParentIdMembersById(id: number, parentId: number, params?: CommonParameters): Promise<SalesTeamMember>;
    deleteSalesSalesTeamsByParentIdMembersById(id: number, parentId: number): Promise<NoContentResponse>;
    putSalesSalesTeamsByParentIdMembersById(id: number, parentId: number, salesTeamMember: SalesTeamMember): Promise<SalesTeamMember>;
    patchSalesSalesTeamsByParentIdMembersById(id: number, parentId: number, patchOperations: Array<PatchOperation>): Promise<SalesTeamMember>;
    getSalesSalesTeamsByParentIdMembersCount(parentId: number, params?: CommonParameters): Promise<Count>;
    getSalesSalesTeamsCount(params?: CommonParameters): Promise<Count>;
    getSalesScheduleHolidaylistsInfoCount(params?: CommonParameters): Promise<Count>;
    getSalesServicePriorityInfoCount(params?: CommonParameters): Promise<Count>;
    getSalesStages(params?: CommonParameters): Promise<Array<OpportunityStage>>;
    postSalesStages(stage: OpportunityStage): Promise<OpportunityStage>;
    getSalesStagesById(id: number, params?: CommonParameters): Promise<OpportunityStage>;
    deleteSalesStagesById(id: number): Promise<NoContentResponse>;
    putSalesStagesById(id: number, stage: OpportunityStage): Promise<OpportunityStage>;
    patchSalesStagesById(id: number, patchOperations: Array<PatchOperation>): Promise<OpportunityStage>;
    getSalesStagesByIdInfo(id: number, params?: CommonParameters): Promise<OpportunityStageInfo>;
    getSalesStagesByIdUsages(id: number, params?: CommonParameters): Promise<Array<Usage>>;
    getSalesStagesByIdUsagesList(id: number, params?: CommonParameters): Promise<Array<Usage>>;
    getSalesStagesCount(params?: CommonParameters): Promise<Count>;
    getSalesStagesInfo(params?: CommonParameters): Promise<Array<OpportunityStageInfo>>;
    getSalesStagesInfoCount(params?: CommonParameters): Promise<Count>;
}
export {};
//# sourceMappingURL=SalesAPI.d.ts.map