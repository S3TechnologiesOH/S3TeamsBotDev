import Manage from '../Manage';
import { components } from '../ManageTypes';
import { CommonParameters, CWMOptions } from '../ManageAPI';
import { NoContentResponse } from '../types';
declare type schemas = components['schemas'];
/** {@link Calendar} */
export declare type Calendar = schemas['Calendar'];
/** {@link CalendarInfo} */
export declare type CalendarInfo = schemas['CalendarInfo'];
/** {@link Count} */
export declare type Count = schemas['Count'];
/** {@link Holiday} */
export declare type Holiday = schemas['Holiday'];
/** {@link HolidayList} */
export declare type HolidayList = schemas['HolidayList'];
/** {@link HolidayListInfo} */
export declare type HolidayListInfo = schemas['HolidayListInfo'];
/** {@link PatchOperation} */
export declare type PatchOperation = schemas['PatchOperation'];
/** {@link PortalCalendar} */
export declare type PortalCalendar = schemas['PortalCalendar'];
/** {@link ScheduleColor} */
export declare type ScheduleColor = schemas['ScheduleColor'];
/** {@link ScheduleDetail} */
export declare type ScheduleDetail = schemas['ScheduleDetail'];
/** {@link ScheduleEntry} */
export declare type ScheduleEntry = schemas['ScheduleEntry'];
/** {@link ScheduleEntryDetail} */
export declare type ScheduleEntryDetail = schemas['ScheduleEntryDetail'];
/** {@link ScheduleReminderTime} */
export declare type ScheduleReminderTime = schemas['ScheduleReminderTime'];
/** {@link ScheduleStatus} */
export declare type ScheduleStatus = schemas['ScheduleStatus'];
/** {@link ScheduleType} */
export declare type ScheduleType = schemas['ScheduleType'];
/** {@link ScheduleTypeInfo} */
export declare type ScheduleTypeInfo = schemas['ScheduleTypeInfo'];
/** {@link Usage} */
export declare type Usage = schemas['Usage'];
/**
 * @module ScheduleAPI
 */
/**
 * Schedule module
 * @public
 */
export declare class ScheduleAPI extends Manage {
    constructor(props: CWMOptions);
    getScheduleCalendars(params?: CommonParameters): Promise<Array<Calendar>>;
    postScheduleCalendars(calendar: Calendar): Promise<Calendar>;
    getScheduleCalendarsById(id: number, params?: CommonParameters): Promise<Calendar>;
    patchScheduleCalendarsById(id: number, patchOperations: Array<PatchOperation>): Promise<Calendar>;
    putScheduleCalendarsById(id: number, calendar: Calendar): Promise<Calendar>;
    deleteScheduleCalendarsById(id: number): Promise<NoContentResponse>;
    postScheduleCalendarsByIdCopy(id: number): Promise<Calendar>;
    getScheduleCalendarsByIdInfo(id: number, params?: CommonParameters): Promise<CalendarInfo>;
    getScheduleCalendarsByIdUsages(id: number, params?: CommonParameters): Promise<Array<Usage>>;
    getScheduleCalendarsByIdUsagesList(id: number, params?: CommonParameters): Promise<Array<Usage>>;
    getScheduleCalendarsCount(params?: CommonParameters): Promise<Calendar>;
    getScheduleCalendarsInfo(params?: CommonParameters): Promise<Array<CalendarInfo>>;
    getScheduleCalendarsInfoCount(params?: CommonParameters): Promise<CalendarInfo>;
    getScheduleColors(params?: CommonParameters): Promise<Array<ScheduleColor>>;
    getScheduleColorsById(id: number, params?: CommonParameters): Promise<ScheduleColor>;
    putScheduleColorsById(id: number, scheduleColor: ScheduleColor): Promise<ScheduleColor>;
    patchScheduleColorsById(id: number, patchOperations: Array<PatchOperation>): Promise<ScheduleColor>;
    postScheduleColorsByIdClear(id: number): Promise<ScheduleColor>;
    getScheduleColorsCount(params?: CommonParameters): Promise<Count>;
    postScheduleColorsReset(): Promise<Array<ScheduleColor>>;
    getScheduleDetails(params?: CommonParameters): Promise<Array<ScheduleEntryDetail>>;
    getScheduleDetailsById(id: number, params?: CommonParameters): Promise<ScheduleEntryDetail>;
    getScheduleDetailsCount(params?: CommonParameters): Promise<Count>;
    getScheduleEntries(params?: CommonParameters): Promise<Array<ScheduleEntry>>;
    postScheduleEntries(scheduleEntry: ScheduleEntry): Promise<ScheduleEntry>;
    getScheduleEntriesById(id: number, params?: CommonParameters): Promise<ScheduleEntry>;
    deleteScheduleEntriesById(id: number): Promise<NoContentResponse>;
    putScheduleEntriesById(id: number, scheduleEntry: ScheduleEntry): Promise<ScheduleEntry>;
    patchScheduleEntriesById(id: number, patchOperations: Array<PatchOperation>): Promise<ScheduleEntry>;
    getScheduleEntriesByParentIdDetails(parentId: number, params?: CommonParameters): Promise<Array<ScheduleDetail>>;
    getScheduleEntriesByParentIdDetailsById(id: number, parentId: number, params?: CommonParameters): Promise<ScheduleDetail>;
    getScheduleEntriesByParentIdDetailsCount(parentId: number, params?: CommonParameters): Promise<Count>;
    getScheduleEntriesCount(params?: CommonParameters): Promise<Count>;
    getScheduleHolidayLists(params?: CommonParameters): Promise<Array<HolidayList>>;
    postScheduleHolidayLists(holidayList: HolidayList): Promise<HolidayList>;
    getScheduleHolidayListsById(id: number, params?: CommonParameters): Promise<HolidayList>;
    deleteScheduleHolidayListsById(id: number): Promise<NoContentResponse>;
    putScheduleHolidayListsById(id: number, holidayList: HolidayList): Promise<HolidayList>;
    patchScheduleHolidayListsById(id: number, patchOperations: Array<PatchOperation>): Promise<HolidayList>;
    getScheduleHolidaylistsByIdInfo(id: number, params?: CommonParameters): Promise<HolidayListInfo>;
    getScheduleHolidayListsByIdUsages(id: number, params?: CommonParameters): Promise<Array<Usage>>;
    getScheduleHolidayListsByIdUsagesList(id: number, params?: CommonParameters): Promise<Array<Usage>>;
    getScheduleHolidayListsByParentIdHolidays(parentId: number, params?: CommonParameters): Promise<Array<Holiday>>;
    postScheduleHolidayListsByParentIdHolidays(parentId: number, holiday: Holiday): Promise<Holiday>;
    getScheduleHolidayListsByParentIdHolidaysById(id: number, parentId: number, params?: CommonParameters): Promise<Holiday>;
    deleteScheduleHolidayListsByParentIdHolidaysById(id: number, parentId: number): Promise<NoContentResponse>;
    putScheduleHolidayListsByParentIdHolidaysById(id: number, parentId: number, holiday: Holiday): Promise<Holiday>;
    patchScheduleHolidayListsByParentIdHolidaysById(id: number, parentId: number, patchOperations: Array<PatchOperation>): Promise<Holiday>;
    getScheduleHolidayListsByParentIdHolidaysCount(parentId: number, params?: CommonParameters): Promise<Count>;
    postScheduleHolidayListsCopy(copy: HolidayList): Promise<HolidayList>;
    getScheduleHolidayListsCount(params?: CommonParameters): Promise<Count>;
    getScheduleHolidaylistsInfo(params?: CommonParameters): Promise<Array<HolidayListInfo>>;
    getSchedulePortalcalendars(params?: CommonParameters): Promise<Array<PortalCalendar>>;
    getSchedulePortalcalendarsById(id: number, params?: CommonParameters): Promise<PortalCalendar>;
    putSchedulePortalcalendarsById(id: number, portalCalendar: PortalCalendar): Promise<PortalCalendar>;
    patchSchedulePortalcalendarsById(id: number, patchOperations: Array<PatchOperation>): Promise<PortalCalendar>;
    getSchedulePortalcalendarsCount(params?: CommonParameters): Promise<Count>;
    getScheduleReminderTimes(params?: CommonParameters): Promise<Array<ScheduleReminderTime>>;
    getScheduleReminderTimesById(id: number, params?: CommonParameters): Promise<ScheduleReminderTime>;
    putScheduleReminderTimesById(id: number, reminderTime: ScheduleReminderTime): Promise<ScheduleReminderTime>;
    patchScheduleReminderTimesById(id: number, patchOperations: Array<PatchOperation>): Promise<ScheduleReminderTime>;
    getScheduleReminderTimesCount(params?: CommonParameters): Promise<Count>;
    getScheduleStatuses(params?: CommonParameters): Promise<Array<ScheduleStatus>>;
    postScheduleStatuses(scheduleStatus: ScheduleStatus): Promise<ScheduleStatus>;
    getScheduleStatusesById(id: number, params?: CommonParameters): Promise<ScheduleStatus>;
    deleteScheduleStatusesById(id: number): Promise<NoContentResponse>;
    putScheduleStatusesById(id: number, scheduleStatus: ScheduleStatus): Promise<ScheduleStatus>;
    patchScheduleStatusesById(id: number, patchOperations: Array<PatchOperation>): Promise<ScheduleStatus>;
    getScheduleStatusesCount(params?: CommonParameters): Promise<Count>;
    getScheduleTypes(params?: CommonParameters): Promise<Array<ScheduleType>>;
    postScheduleTypes(scheduleType: ScheduleType): Promise<ScheduleType>;
    getScheduleTypesById(id: number, params?: CommonParameters): Promise<ScheduleType>;
    deleteScheduleTypesById(id: number): Promise<NoContentResponse>;
    putScheduleTypesById(id: number, scheduleType: ScheduleType): Promise<ScheduleType>;
    patchScheduleTypesById(id: number, patchOperations: Array<PatchOperation>): Promise<ScheduleType>;
    getScheduleTypesByIdInfo(id: number, params?: CommonParameters): Promise<ScheduleTypeInfo>;
    getScheduleTypesByIdUsages(id: number, params?: CommonParameters): Promise<Array<Usage>>;
    getScheduleTypesByIdUsagesList(id: number, params?: CommonParameters): Promise<Array<Usage>>;
    getScheduleTypesCount(params?: CommonParameters): Promise<Count>;
    getScheduleTypesInfo(params?: CommonParameters): Promise<Array<ScheduleTypeInfo>>;
    getScheduleTypesInfoCount(params?: CommonParameters): Promise<Count>;
}
export {};
//# sourceMappingURL=ScheduleAPI.d.ts.map