import Manage from '../Manage';
import { components } from '../ManageTypes';
import { CommonParameters, CWMOptions } from '../ManageAPI';
import { NoContentResponse, OctetStreamResponse } from '../types';
declare type schemas = components['schemas'];
/** {@link ActivityReference} */
export declare type ActivityReference = schemas['ActivityReference'];
/** {@link Board} */
export declare type Board = schemas['Board'];
/** {@link BoardAutoAssignResource} */
export declare type BoardAutoAssignResource = schemas['BoardAutoAssignResource'];
/** {@link BoardAutoTemplate} */
export declare type BoardAutoTemplate = schemas['BoardAutoTemplate'];
/** {@link BoardCopy} */
export declare type BoardCopy = schemas['BoardCopy'];
/** {@link BoardExcludedMember} */
export declare type BoardExcludedMember = schemas['BoardExcludedMember'];
/** {@link BoardInfo} */
export declare type BoardInfo = schemas['BoardInfo'];
/** {@link BoardItem} */
export declare type BoardItem = schemas['BoardItem'];
/** {@link BoardItemAssociation} */
export declare type BoardItemAssociation = schemas['BoardItemAssociation'];
/** {@link BoardNotification} */
export declare type BoardNotification = schemas['BoardNotification'];
/** {@link BoardStatus} */
export declare type BoardStatus = schemas['BoardStatus'];
/** {@link BoardStatusInfo} */
export declare type BoardStatusInfo = schemas['BoardStatusInfo'];
/** {@link BoardStatusNotification} */
export declare type BoardStatusNotification = schemas['BoardStatusNotification'];
/** {@link BoardSubType} */
export declare type BoardSubType = schemas['BoardSubType'];
/** {@link BoardSubTypeInfo} */
export declare type BoardSubTypeInfo = schemas['BoardSubTypeInfo'];
/** {@link BoardTeam} */
export declare type BoardTeam = schemas['BoardTeam'];
/** {@link BoardTeamInfo} */
export declare type BoardTeamInfo = schemas['BoardTeamInfo'];
/** {@link BoardType} */
export declare type BoardType = schemas['BoardType'];
/** {@link BoardTypeInfo} */
export declare type BoardTypeInfo = schemas['BoardTypeInfo'];
/** {@link BoardTypeSubTypeItemAssociation} */
export declare type BoardTypeSubTypeItemAssociation = schemas['BoardTypeSubTypeItemAssociation'];
/** {@link Code} */
export declare type Code = schemas['Code'];
/** {@link ConfigurationReference} */
export declare type ConfigurationReference = schemas['ConfigurationReference'];
/** {@link ConvertToProject} */
export declare type ConvertToProject = schemas['ConvertToProject'];
/** {@link Count} */
export declare type Count = schemas['Count'];
/** {@link DocumentReference} */
export declare type DocumentReference = schemas['DocumentReference'];
/** {@link FilterValues} */
export declare type FilterValues = schemas['FilterValues'];
/** {@link Impact} */
export declare type Impact = schemas['Impact'];
/** {@link KnowledgeBaseArticle} */
export declare type KnowledgeBaseArticle = schemas['KnowledgeBaseArticle'];
/** {@link KnowledgeBaseCategory} */
export declare type KnowledgeBaseCategory = schemas['KnowledgeBaseCategory'];
/** {@link KnowledgeBaseSettings} */
export declare type KnowledgeBaseSettings = schemas['KnowledgeBaseSettings'];
/** {@link KnowledgeBaseSubCategory} */
export declare type KnowledgeBaseSubCategory = schemas['KnowledgeBaseSubCategory'];
/** {@link PatchOperation} */
export declare type PatchOperation = schemas['PatchOperation'];
/** {@link Priority} */
export declare type Priority = schemas['Priority'];
/** {@link PriorityInfo} */
export declare type PriorityInfo = schemas['PriorityInfo'];
/** {@link ProductReference} */
export declare type ProductReference = schemas['ProductReference'];
/** {@link SLA} */
export declare type SLA = schemas['SLA'];
/** {@link SLAInfo} */
export declare type SLAInfo = schemas['SLAInfo'];
/** {@link SLAPriority} */
export declare type SLAPriority = schemas['SLAPriority'];
/** {@link ScheduleEntryReference} */
export declare type ScheduleEntryReference = schemas['ScheduleEntryReference'];
/** {@link SchedulingMemberInfo} */
export declare type SchedulingMemberInfo = schemas['SchedulingMemberInfo'];
/** {@link ServiceEmailTemplate} */
export declare type ServiceEmailTemplate = schemas['ServiceEmailTemplate'];
/** {@link ServiceLocation} */
export declare type ServiceLocation = schemas['ServiceLocation'];
/** {@link ServiceLocationInfo} */
export declare type ServiceLocationInfo = schemas['ServiceLocationInfo'];
/** {@link ServiceNote} */
export declare type ServiceNote = schemas['ServiceNote'];
/** {@link ServiceSignoff} */
export declare type ServiceSignoff = schemas['ServiceSignoff'];
/** {@link ServiceSignoffInfo} */
export declare type ServiceSignoffInfo = schemas['ServiceSignoffInfo'];
/** {@link ServiceSurvey} */
export declare type ServiceSurvey = schemas['ServiceSurvey'];
/** {@link ServiceSurveyQuestion} */
export declare type ServiceSurveyQuestion = schemas['ServiceSurveyQuestion'];
/** {@link ServiceTeam} */
export declare type ServiceTeam = schemas['ServiceTeam'];
/** {@link ServiceTemplate} */
export declare type ServiceTemplate = schemas['ServiceTemplate'];
/** {@link ServiceTemplateInfo} */
export declare type ServiceTemplateInfo = schemas['ServiceTemplateInfo'];
/** {@link ServiceTicketLink} */
export declare type ServiceTicketLink = schemas['ServiceTicketLink'];
/** {@link ServiceTicketLinkInfo} */
export declare type ServiceTicketLinkInfo = schemas['ServiceTicketLinkInfo'];
/** {@link ServiceTicketNote} */
export declare type ServiceTicketNote = schemas['ServiceTicketNote'];
/** {@link Severity} */
export declare type Severity = schemas['Severity'];
/** {@link Source} */
export declare type Source = schemas['Source'];
/** {@link SourceInfo} */
export declare type SourceInfo = schemas['SourceInfo'];
/** {@link SuccessResponse} */
export declare type SuccessResponse = schemas['SuccessResponse'];
/** {@link SurveyOption} */
export declare type SurveyOption = schemas['SurveyOption'];
/** {@link SurveyResult} */
export declare type SurveyResult = schemas['SurveyResult'];
/** {@link Task} */
export declare type Task = schemas['Task'];
/** {@link TeamMember} */
export declare type TeamMember = schemas['TeamMember'];
/** {@link TemplateGeneratedCountsModel} */
export declare type TemplateGeneratedCountsModel = schemas['TemplateGeneratedCountsModel'];
/** {@link Ticket} */
export declare type Ticket = schemas['Ticket'];
/** {@link TicketBundle} */
export declare type TicketBundle = schemas['TicketBundle'];
/** {@link TicketInfo} */
export declare type TicketInfo = schemas['TicketInfo'];
/** {@link TicketMerge} */
export declare type TicketMerge = schemas['TicketMerge'];
/** {@link TicketSync} */
export declare type TicketSync = schemas['TicketSync'];
/** {@link TimeEntryReference} */
export declare type TimeEntryReference = schemas['TimeEntryReference'];
/** {@link Usage} */
export declare type Usage = schemas['Usage'];
/**
 * @module ServiceAPI
 */
/**
 * Service module
 * @public
 */
export declare class ServiceAPI extends Manage {
    constructor(props: CWMOptions);
    getServiceBoards(params?: CommonParameters): Promise<Array<Board>>;
    postServiceBoards(board: Board): Promise<Board>;
    getServiceBoardsByGrandparentIdItemsByParentIdAssociations(parentId: number, grandparentId: number, params?: CommonParameters): Promise<Array<BoardItemAssociation>>;
    getServiceBoardsByGrandparentIdItemsByParentIdAssociationsById(id: number, parentId: number, grandparentId: number, params?: CommonParameters): Promise<BoardItemAssociation>;
    putServiceBoardsByGrandparentIdItemsByParentIdAssociationsById(id: number, parentId: number, grandparentId: number, itemAssociation: BoardItemAssociation): Promise<BoardItemAssociation>;
    patchServiceBoardsByGrandparentIdItemsByParentIdAssociationsById(id: number, parentId: number, grandparentId: number, patchOperations: Array<PatchOperation>): Promise<BoardItemAssociation>;
    getServiceBoardsByGrandparentIdItemsByParentIdAssociationsCount(parentId: number, grandparentId: number, params?: CommonParameters): Promise<Count>;
    getServiceBoardsByGrandparentIdStatusesByParentIdNotifications(parentId: number, grandparentId: number, params?: CommonParameters): Promise<Array<BoardStatusNotification>>;
    postServiceBoardsByGrandparentIdStatusesByParentIdNotifications(parentId: number, grandparentId: number, boardStatusNotification: BoardStatusNotification): Promise<BoardStatusNotification>;
    getServiceBoardsByGrandparentIdStatusesByParentIdNotificationsById(id: number, parentId: number, grandparentId: number, params?: CommonParameters): Promise<BoardStatusNotification>;
    deleteServiceBoardsByGrandparentIdStatusesByParentIdNotificationsById(id: number, parentId: number, grandparentId: number): Promise<NoContentResponse>;
    putServiceBoardsByGrandparentIdStatusesByParentIdNotificationsById(id: number, parentId: number, grandparentId: number, boardStatusNotification: BoardStatusNotification): Promise<BoardStatusNotification>;
    patchServiceBoardsByGrandparentIdStatusesByParentIdNotificationsById(id: number, parentId: number, grandparentId: number, patchOperations: Array<PatchOperation>): Promise<BoardStatusNotification>;
    getServiceBoardsByGrandparentIdStatusesByParentIdNotificationsCount(parentId: number, grandparentId: number, params?: CommonParameters): Promise<Count>;
    getServiceBoardsById(id: number, params?: CommonParameters): Promise<Board>;
    deleteServiceBoardsById(id: number): Promise<NoContentResponse>;
    putServiceBoardsById(id: number, board: Board): Promise<Board>;
    patchServiceBoardsById(id: number, patchOperations: Array<PatchOperation>): Promise<Board>;
    getServiceBoardsByIdUsages(id: number, params?: CommonParameters): Promise<Array<Usage>>;
    getServiceBoardsByIdUsagesList(id: number, params?: CommonParameters): Promise<Array<Usage>>;
    getServiceBoardsByParentIdAutoAssignResources(parentId: number, params?: CommonParameters): Promise<Array<BoardAutoAssignResource>>;
    postServiceBoardsByParentIdAutoAssignResources(parentId: number, boardAutoAssignResource: BoardAutoAssignResource): Promise<BoardAutoAssignResource>;
    getServiceBoardsByParentIdAutoAssignResourcesById(id: number, parentId: number, params?: CommonParameters): Promise<BoardAutoAssignResource>;
    deleteServiceBoardsByParentIdAutoAssignResourcesById(id: number, parentId: number): Promise<NoContentResponse>;
    putServiceBoardsByParentIdAutoAssignResourcesById(id: number, parentId: number, boardAutoAssignResource: BoardAutoAssignResource): Promise<BoardAutoAssignResource>;
    patchServiceBoardsByParentIdAutoAssignResourcesById(id: number, parentId: number, patchOperations: Array<PatchOperation>): Promise<BoardAutoAssignResource>;
    getServiceBoardsByParentIdAutoAssignResourcesCount(parentId: number, params?: CommonParameters): Promise<Count>;
    getServiceBoardsByParentIdAutoTemplates(parentId: number, params?: CommonParameters): Promise<Array<BoardAutoTemplate>>;
    postServiceBoardsByParentIdAutoTemplates(parentId: number, boardAutoTemplate: BoardAutoTemplate): Promise<BoardAutoTemplate>;
    getServiceBoardsByParentIdAutoTemplatesById(id: number, parentId: number, params?: CommonParameters): Promise<BoardAutoTemplate>;
    deleteServiceBoardsByParentIdAutoTemplatesById(id: number, parentId: number): Promise<NoContentResponse>;
    putServiceBoardsByParentIdAutoTemplatesById(id: number, parentId: number, boardAutoTemplate: BoardAutoTemplate): Promise<BoardAutoTemplate>;
    patchServiceBoardsByParentIdAutoTemplatesById(id: number, parentId: number, patchOperations: Array<PatchOperation>): Promise<BoardAutoTemplate>;
    getServiceBoardsByParentIdAutoTemplatesCount(parentId: number, params?: CommonParameters): Promise<Count>;
    getServiceBoardsByParentIdExcludedMembers(parentId: number, params?: CommonParameters): Promise<Array<BoardExcludedMember>>;
    postServiceBoardsByParentIdExcludedMembers(parentId: number, boardExcludedMember: BoardExcludedMember): Promise<BoardExcludedMember>;
    getServiceBoardsByParentIdExcludedMembersById(id: number, parentId: number, params?: CommonParameters): Promise<BoardExcludedMember>;
    deleteServiceBoardsByParentIdExcludedMembersById(id: number, parentId: number): Promise<NoContentResponse>;
    getServiceBoardsByParentIdExcludedMembersCount(parentId: number, params?: CommonParameters): Promise<Count>;
    getServiceBoardsByParentIdItems(parentId: number, params?: CommonParameters): Promise<Array<BoardItem>>;
    postServiceBoardsByParentIdItems(parentId: number, boardItem: BoardItem): Promise<BoardItem>;
    getServiceBoardsByParentIdItemsById(id: number, parentId: number, params?: CommonParameters): Promise<BoardItem>;
    deleteServiceBoardsByParentIdItemsById(id: number, parentId: number): Promise<NoContentResponse>;
    putServiceBoardsByParentIdItemsById(id: number, parentId: number, boardItem: BoardItem): Promise<BoardItem>;
    patchServiceBoardsByParentIdItemsById(id: number, parentId: number, patchOperations: Array<PatchOperation>): Promise<BoardItem>;
    getServiceBoardsByParentIdItemsByIdUsages(id: number, parentId: number, params?: CommonParameters): Promise<Array<Usage>>;
    getServiceBoardsByParentIdItemsByIdUsagesList(id: number, parentId: number, params?: CommonParameters): Promise<Array<Usage>>;
    getServiceBoardsByParentIdItemsCount(parentId: number, params?: CommonParameters): Promise<Count>;
    getServiceBoardsByParentIdNotifications(parentId: number, params?: CommonParameters): Promise<Array<BoardNotification>>;
    postServiceBoardsByParentIdNotifications(parentId: number, boardNotification: BoardNotification): Promise<BoardNotification>;
    getServiceBoardsByParentIdNotificationsById(id: number, parentId: number, params?: CommonParameters): Promise<BoardNotification>;
    deleteServiceBoardsByParentIdNotificationsById(id: number, parentId: number): Promise<NoContentResponse>;
    putServiceBoardsByParentIdNotificationsById(id: number, parentId: number, boardNotification: BoardNotification): Promise<BoardNotification>;
    patchServiceBoardsByParentIdNotificationsById(id: number, parentId: number, patchOperations: Array<PatchOperation>): Promise<BoardNotification>;
    getServiceBoardsByParentIdNotificationsCount(parentId: number, params?: CommonParameters): Promise<Count>;
    getServiceBoardsByParentIdStatuses(parentId: number, params?: CommonParameters): Promise<Array<BoardStatus>>;
    postServiceBoardsByParentIdStatuses(parentId: number, boardStatus: BoardStatus): Promise<BoardStatus>;
    getServiceBoardsByParentIdStatusesById(id: number, parentId: number, params?: CommonParameters): Promise<BoardStatus>;
    deleteServiceBoardsByParentIdStatusesById(id: number, parentId: number): Promise<NoContentResponse>;
    putServiceBoardsByParentIdStatusesById(id: number, parentId: number, boardStatus: BoardStatus): Promise<BoardStatus>;
    patchServiceBoardsByParentIdStatusesById(id: number, parentId: number, patchOperations: Array<PatchOperation>): Promise<BoardStatus>;
    getServiceBoardsByParentIdStatusesByIdInfo(parentId: number, id: number, params?: CommonParameters): Promise<BoardStatusInfo>;
    getServiceBoardsByParentIdStatusesByIdUsages(id: number, parentId: number, params?: CommonParameters): Promise<Array<Usage>>;
    getServiceBoardsByParentIdStatusesByIdUsagesList(id: number, parentId: number, params?: CommonParameters): Promise<Array<Usage>>;
    getServiceBoardsByParentIdStatusesCount(parentId: number, params?: CommonParameters): Promise<Count>;
    getServiceBoardsByParentIdStatusesInfo(parentId: number, params?: CommonParameters): Promise<Array<BoardStatusInfo>>;
    getServiceBoardsByParentIdStatusesInfoCount(parentId: number, params?: CommonParameters): Promise<Count>;
    getServiceBoardsByParentIdSubtypes(parentId: number, params?: CommonParameters): Promise<Array<BoardSubType>>;
    postServiceBoardsByParentIdSubtypes(parentId: number, boardSubType: BoardSubType): Promise<BoardSubType>;
    getServiceBoardsByParentIdSubtypesById(id: number, parentId: number, params?: CommonParameters): Promise<BoardSubType>;
    deleteServiceBoardsByParentIdSubtypesById(id: number, parentId: number): Promise<NoContentResponse>;
    putServiceBoardsByParentIdSubtypesById(id: number, parentId: number, boardSubType: BoardSubType): Promise<BoardSubType>;
    patchServiceBoardsByParentIdSubtypesById(id: number, parentId: number, patchOperations: Array<PatchOperation>): Promise<BoardSubType>;
    getServiceBoardsByParentIdSubtypesByIdInfo(parentId: number, id: number, params?: CommonParameters): Promise<BoardSubTypeInfo>;
    getServiceBoardsByParentIdSubtypesByIdUsages(id: number, parentId: number, params?: CommonParameters): Promise<Array<Usage>>;
    getServiceBoardsByParentIdSubtypesByIdUsagesList(id: number, parentId: number, params?: CommonParameters): Promise<Array<Usage>>;
    getServiceBoardsByParentIdSubtypesCount(parentId: number, params?: CommonParameters): Promise<Count>;
    getServiceBoardsByParentIdSubtypesInfo(parentId: number, params?: CommonParameters): Promise<Array<BoardSubTypeInfo>>;
    getServiceBoardsByParentIdSubtypesInfoCount(parentId: number, params?: CommonParameters): Promise<Count>;
    getServiceBoardsByParentIdTeams(parentId: number, params?: CommonParameters): Promise<Array<BoardTeam>>;
    postServiceBoardsByParentIdTeams(parentId: number, _boardTeam: BoardTeam): Promise<BoardTeam>;
    getServiceBoardsByParentIdTeamsById(id: number, parentId: number, params?: CommonParameters): Promise<BoardTeam>;
    deleteServiceBoardsByParentIdTeamsById(id: number, parentId: number): Promise<NoContentResponse>;
    putServiceBoardsByParentIdTeamsById(id: number, parentId: number, _boardTeam: BoardTeam): Promise<BoardTeam>;
    patchServiceBoardsByParentIdTeamsById(id: number, parentId: number, patchOperations: Array<PatchOperation>): Promise<BoardTeam>;
    getServiceBoardsByParentIdTeamsByIdInfo(id: number, parentId: number, params?: CommonParameters): Promise<BoardTeamInfo>;
    getServiceBoardsByParentIdTeamsByIdUsagesList(id: number, parentId: number, params?: CommonParameters): Promise<Array<Usage>>;
    getServiceBoardsByParentIdTeamsCount(parentId: number, params?: CommonParameters): Promise<Count>;
    getServiceBoardsByParentIdTeamsInfo(parentId: number, params?: CommonParameters): Promise<Array<BoardTeamInfo>>;
    getServiceBoardsByParentIdTeamsInfoCount(parentId: number, params?: CommonParameters): Promise<Count>;
    getServiceBoardsByParentIdTypes(parentId: number, params?: CommonParameters): Promise<Array<BoardType>>;
    postServiceBoardsByParentIdTypes(parentId: number, boardType: BoardType): Promise<BoardType>;
    getServiceBoardsByParentIdTypesById(id: number, parentId: number, params?: CommonParameters): Promise<BoardType>;
    deleteServiceBoardsByParentIdTypesById(id: number, parentId: number): Promise<NoContentResponse>;
    putServiceBoardsByParentIdTypesById(id: number, parentId: number, boardType: BoardType): Promise<BoardType>;
    patchServiceBoardsByParentIdTypesById(id: number, parentId: number, patchOperations: Array<PatchOperation>): Promise<BoardType>;
    getServiceBoardsByParentIdTypesByIdUsages(id: number, parentId: number, params?: CommonParameters): Promise<Array<Usage>>;
    getServiceBoardsByParentIdTypesByIdUsagesList(id: number, parentId: number, params?: CommonParameters): Promise<Array<Usage>>;
    getServiceBoardsByParentIdTypesCount(parentId: number, params?: CommonParameters): Promise<Count>;
    getServiceBoardsByParentIdTypeSubTypeItemAssociations(parentId: number, params?: CommonParameters): Promise<Array<BoardTypeSubTypeItemAssociation>>;
    getServiceBoardsByParentIdTypeSubTypeItemAssociationsById(id: number, parentId: number, params?: CommonParameters): Promise<BoardTypeSubTypeItemAssociation>;
    getServiceBoardsByParentIdTypeSubTypeItemAssociationsCount(parentId: number, params?: CommonParameters): Promise<Count>;
    postServiceBoardsCopy(copy: BoardCopy): Promise<Board>;
    getServiceBoardsCount(params?: CommonParameters): Promise<Count>;
    getServiceCodes(params?: CommonParameters): Promise<Array<Code>>;
    postServiceCodes(code: Code): Promise<Code>;
    getServiceCodesById(id: number, params?: CommonParameters): Promise<Code>;
    deleteServiceCodesById(id: number): Promise<NoContentResponse>;
    putServiceCodesById(id: number, code: Code): Promise<Code>;
    patchServiceCodesById(id: number, patchOperations: Array<PatchOperation>): Promise<Code>;
    getServiceCodesCount(params?: CommonParameters): Promise<Count>;
    getServiceEmailTemplates(params?: CommonParameters): Promise<Array<ServiceEmailTemplate>>;
    postServiceEmailTemplates(serviceEmailTemplate: ServiceEmailTemplate): Promise<ServiceEmailTemplate>;
    getServiceEmailTemplatesById(id: number, params?: CommonParameters): Promise<ServiceEmailTemplate>;
    deleteServiceEmailTemplatesById(id: number): Promise<NoContentResponse>;
    putServiceEmailTemplatesById(id: number, serviceEmailTemplate: ServiceEmailTemplate): Promise<ServiceEmailTemplate>;
    patchServiceEmailTemplatesById(id: number, patchOperations: Array<PatchOperation>): Promise<ServiceEmailTemplate>;
    getServiceEmailTemplatesByIdUsages(id: number, params?: CommonParameters): Promise<Array<Usage>>;
    getServiceEmailTemplatesByIdUsagesList(id: number, params?: CommonParameters): Promise<Array<Usage>>;
    getServiceEmailTemplatesCount(params?: CommonParameters): Promise<Count>;
    getServiceImpacts(params?: CommonParameters): Promise<Array<Impact>>;
    getServiceImpactsById(id: number, params?: CommonParameters): Promise<Impact>;
    putServiceImpactsById(id: number, impact: Impact): Promise<Impact>;
    patchServiceImpactsById(id: number, patchOperations: Array<PatchOperation>): Promise<Impact>;
    getServiceImpactsCount(params?: CommonParameters): Promise<Count>;
    getServiceInfoBoards(params?: CommonParameters): Promise<Array<BoardInfo>>;
    getServiceInfoBoardsById(id: number, params?: CommonParameters): Promise<BoardInfo>;
    getServiceInfoBoardsCount(params?: CommonParameters): Promise<Count>;
    getServiceInfoBoardtypes(params?: CommonParameters): Promise<Array<BoardTypeInfo>>;
    getServiceInfoBoardtypesById(id: number, params?: CommonParameters): Promise<BoardTypeInfo>;
    getServiceInfoBoardtypesCount(params?: CommonParameters): Promise<Count>;
    getServiceKnowledgeBaseArticles(params?: CommonParameters): Promise<Array<KnowledgeBaseArticle>>;
    postServiceKnowledgeBaseArticles(knowledgeBaseArticle: KnowledgeBaseArticle): Promise<KnowledgeBaseArticle>;
    getServiceKnowledgeBaseArticlesById(id: number, params?: CommonParameters): Promise<KnowledgeBaseArticle>;
    deleteServiceKnowledgeBaseArticlesById(id: number): Promise<NoContentResponse>;
    putServiceKnowledgeBaseArticlesById(id: number, knowledgeBaseArticle: KnowledgeBaseArticle): Promise<KnowledgeBaseArticle>;
    patchServiceKnowledgeBaseArticlesById(id: number, patchOperations: Array<PatchOperation>): Promise<KnowledgeBaseArticle>;
    getServiceKnowledgeBaseArticlesCount(params?: CommonParameters): Promise<Count>;
    getServiceKnowledgeBaseCategories(params?: CommonParameters): Promise<Array<KnowledgeBaseCategory>>;
    postServiceKnowledgeBaseCategories(knowledgeBaseCategory: KnowledgeBaseCategory): Promise<KnowledgeBaseCategory>;
    getServiceKnowledgeBaseCategoriesById(id: number, params?: CommonParameters): Promise<KnowledgeBaseCategory>;
    deleteServiceKnowledgeBaseCategoriesById(id: number): Promise<NoContentResponse>;
    putServiceKnowledgeBaseCategoriesById(id: number, knowledgeBaseCategory: KnowledgeBaseCategory): Promise<KnowledgeBaseCategory>;
    patchServiceKnowledgeBaseCategoriesById(id: number, patchOperations: Array<PatchOperation>): Promise<KnowledgeBaseCategory>;
    getServiceKnowledgeBaseCategoriesCount(params?: CommonParameters): Promise<Count>;
    getServiceKnowledgebasesettings(params?: CommonParameters): Promise<KnowledgeBaseSettings>;
    postServiceKnowledgebasesettings(knowledgeBaseSettings: KnowledgeBaseSettings): Promise<KnowledgeBaseSettings>;
    getServiceKnowledgebasesettingsById(id: number, params?: CommonParameters): Promise<KnowledgeBaseSettings>;
    putServiceKnowledgebasesettingsById(id: number, knowledgeBaseSettings: KnowledgeBaseSettings): Promise<KnowledgeBaseSettings>;
    patchServiceKnowledgebasesettingsById(id: number, patchOperations: Array<PatchOperation>): Promise<KnowledgeBaseSettings>;
    getServiceKnowledgeBaseSubCategories(params?: CommonParameters): Promise<Array<KnowledgeBaseSubCategory>>;
    postServiceKnowledgeBaseSubCategories(knowledgeBaseSubCategory: KnowledgeBaseSubCategory): Promise<KnowledgeBaseSubCategory>;
    getServiceKnowledgeBaseSubCategoriesById(id: number, params?: CommonParameters): Promise<KnowledgeBaseSubCategory>;
    deleteServiceKnowledgeBaseSubCategoriesById(id: number): Promise<NoContentResponse>;
    putServiceKnowledgeBaseSubCategoriesById(id: number, knowledgeBaseSubCategory: KnowledgeBaseSubCategory): Promise<KnowledgeBaseSubCategory>;
    patchServiceKnowledgeBaseSubCategoriesById(id: number, patchOperations: Array<PatchOperation>): Promise<KnowledgeBaseSubCategory>;
    getServiceKnowledgeBaseSubCategoriesByIdUsages(id: number, params?: CommonParameters): Promise<Array<Usage>>;
    getServiceKnowledgeBaseSubCategoriesByIdUsagesList(id: number, params?: CommonParameters): Promise<Array<Usage>>;
    getServiceKnowledgeBaseSubCategoriesCount(params?: CommonParameters): Promise<Count>;
    getServiceLocations(params?: CommonParameters): Promise<Array<ServiceLocation>>;
    postServiceLocations(location: ServiceLocation): Promise<ServiceLocation>;
    getServiceLocationsById(id: number, params?: CommonParameters): Promise<ServiceLocation>;
    deleteServiceLocationsById(id: number): Promise<NoContentResponse>;
    putServiceLocationsById(id: number, location: ServiceLocation): Promise<ServiceLocation>;
    patchServiceLocationsById(id: number, patchOperations: Array<PatchOperation>): Promise<ServiceLocation>;
    getServiceLocationsByIdInfo(id: number, params?: CommonParameters): Promise<ServiceLocationInfo>;
    getServiceLocationsCount(params?: CommonParameters): Promise<Count>;
    getServiceLocationsInfo(params?: CommonParameters): Promise<Array<ServiceLocationInfo>>;
    getServiceLocationsInfoCount(params?: CommonParameters): Promise<Count>;
    getServicePriorities(params?: CommonParameters): Promise<Array<Priority>>;
    postServicePriorities(priority: Priority): Promise<Priority>;
    getServicePrioritiesById(id: number, params?: CommonParameters): Promise<Priority>;
    deleteServicePrioritiesById(id: number): Promise<NoContentResponse>;
    putServicePrioritiesById(id: number, priority: Priority): Promise<Priority>;
    patchServicePrioritiesById(id: number, patchOperations: Array<PatchOperation>): Promise<Priority>;
    getServicePrioritiesByIdImage(id: number, useDefaultFlag: boolean, lastModified: string, params?: CommonParameters): Promise<OctetStreamResponse>;
    getServicePrioritiesByIdUsages(id: number, params?: CommonParameters): Promise<Array<Usage>>;
    getServicePrioritiesByIdUsagesList(id: number, params?: CommonParameters): Promise<Array<Usage>>;
    getServicePrioritiesCount(params?: CommonParameters): Promise<Count>;
    getServicePriorityByIdInfo(id: number, params?: CommonParameters): Promise<PriorityInfo>;
    getServicePriorityInfo(params?: CommonParameters): Promise<Array<PriorityInfo>>;
    getServiceSchedulingMembersByIdInfo(id: number, params?: CommonParameters): Promise<SchedulingMemberInfo>;
    getServiceSchedulingMembersInfo(params?: CommonParameters): Promise<Array<SchedulingMemberInfo>>;
    getServiceSchedulingMembersInfoCount(params?: CommonParameters): Promise<Count>;
    getServiceServiceSignoff(params?: CommonParameters): Promise<Array<ServiceSignoff>>;
    postServiceServiceSignoff(serviceSignoff: ServiceSignoff): Promise<ServiceSignoff>;
    getServiceServiceSignoffById(id: number, params?: CommonParameters): Promise<ServiceSignoff>;
    deleteServiceServiceSignoffById(id: number): Promise<NoContentResponse>;
    putServiceServiceSignoffById(id: number, serviceSignoff: ServiceSignoff): Promise<ServiceSignoff>;
    patchServiceServiceSignoffById(id: number, patchOperations: Array<PatchOperation>): Promise<ServiceSignoff>;
    getServiceServiceSignoffByIdInfo(id: number, params?: CommonParameters): Promise<ServiceSignoffInfo>;
    getServiceServiceSignoffByIdUsages(id: number, params?: CommonParameters): Promise<Array<Usage>>;
    getServiceServiceSignoffByIdUsagesList(id: number, params?: CommonParameters): Promise<Array<Usage>>;
    getServiceServiceSignoffCount(params?: CommonParameters): Promise<Count>;
    getServiceServiceSignoffInfo(params?: CommonParameters): Promise<Array<ServiceSignoffInfo>>;
    getServiceServiceSignoffInfoCount(params?: CommonParameters): Promise<Count>;
    getServiceSeverities(params?: CommonParameters): Promise<Array<Severity>>;
    getServiceSeveritiesById(id: number, params?: CommonParameters): Promise<Severity>;
    putServiceSeveritiesById(id: number, severity: Severity): Promise<Severity>;
    patchServiceSeveritiesById(id: number, patchOperations: Array<PatchOperation>): Promise<Severity>;
    getServiceSeveritiesCount(params?: CommonParameters): Promise<Count>;
    getServiceSlainfoByIdInfo(id: number, params?: CommonParameters): Promise<SLAInfo>;
    getServiceSlainfoInfo(params?: CommonParameters): Promise<Array<SLAInfo>>;
    getServiceSLAs(params?: CommonParameters): Promise<Array<SLA>>;
    postServiceSLAs(sLA: SLA): Promise<SLA>;
    getServiceSLAsById(id: number, params?: CommonParameters): Promise<SLA>;
    deleteServiceSLAsById(id: number): Promise<NoContentResponse>;
    putServiceSLAsById(id: number, sLA: SLA): Promise<SLA>;
    patchServiceSLAsById(id: number, patchOperations: Array<PatchOperation>): Promise<SLA>;
    getServiceSLAsByIdUsages(id: number, params?: CommonParameters): Promise<Array<Usage>>;
    getServiceSLAsByIdUsagesList(id: number, params?: CommonParameters): Promise<Array<Usage>>;
    getServiceSLAsByParentIdPriorities(parentId: number, params?: CommonParameters): Promise<Array<SLAPriority>>;
    postServiceSLAsByParentIdPriorities(parentId: number, sLAPriority: SLAPriority): Promise<SLAPriority>;
    getServiceSLAsByParentIdPrioritiesById(id: number, parentId: number, params?: CommonParameters): Promise<SLAPriority>;
    deleteServiceSLAsByParentIdPrioritiesById(id: number, parentId: number): Promise<NoContentResponse>;
    putServiceSLAsByParentIdPrioritiesById(id: number, parentId: number, sLAPriority: SLAPriority): Promise<SLAPriority>;
    patchServiceSLAsByParentIdPrioritiesById(id: number, parentId: number, patchOperations: Array<PatchOperation>): Promise<SLAPriority>;
    getServiceSLAsByParentIdPrioritiesCount(parentId: number, params?: CommonParameters): Promise<Count>;
    getServiceSLAsCount(params?: CommonParameters): Promise<Count>;
    getServiceSLAsInfoCount(params?: CommonParameters): Promise<Count>;
    getServiceSources(params?: CommonParameters): Promise<Array<Source>>;
    postServiceSources(source: Source): Promise<Source>;
    getServiceSourcesById(id: number, params?: CommonParameters): Promise<Source>;
    deleteServiceSourcesById(id: number): Promise<NoContentResponse>;
    putServiceSourcesById(id: number, source: Source): Promise<Source>;
    patchServiceSourcesById(id: number, patchOperations: Array<PatchOperation>): Promise<Source>;
    getServiceSourcesByIdInfo(id: number, params?: CommonParameters): Promise<SourceInfo>;
    getServiceSourcesByIdUsages(id: number, params?: CommonParameters): Promise<Array<Usage>>;
    getServiceSourcesByIdUsagesList(id: number, params?: CommonParameters): Promise<Array<Usage>>;
    getServiceSourcesCount(params?: CommonParameters): Promise<Count>;
    getServiceSourcesInfo(params?: CommonParameters): Promise<Array<SourceInfo>>;
    getServiceSourcesInfoCount(params?: CommonParameters): Promise<Count>;
    getServiceSurveys(params?: CommonParameters): Promise<Array<ServiceSurvey>>;
    postServiceSurveys(survey: ServiceSurvey): Promise<ServiceSurvey>;
    getServiceSurveysByGrandparentIdQuestionsByParentIdOptions(parentId: number, grandparentId: number, params?: CommonParameters): Promise<Array<SurveyOption>>;
    postServiceSurveysByGrandparentIdQuestionsByParentIdOptions(parentId: number, grandparentId: number, surveyOption: SurveyOption): Promise<SurveyOption>;
    getServiceSurveysByGrandparentIdQuestionsByParentIdOptionsById(id: number, parentId: number, grandparentId: number, params?: CommonParameters): Promise<SurveyOption>;
    deleteServiceSurveysByGrandparentIdQuestionsByParentIdOptionsById(id: number, parentId: number, grandparentId: number): Promise<NoContentResponse>;
    putServiceSurveysByGrandparentIdQuestionsByParentIdOptionsById(id: number, parentId: number, grandparentId: number, surveyOption: SurveyOption): Promise<SurveyOption>;
    patchServiceSurveysByGrandparentIdQuestionsByParentIdOptionsById(id: number, parentId: number, grandparentId: number, patchOperations: Array<PatchOperation>): Promise<SurveyOption>;
    getServiceSurveysByGrandparentIdQuestionsByParentIdOptionsCount(parentId: number, grandparentId: number, params?: CommonParameters): Promise<Count>;
    getServiceSurveysById(id: number, params?: CommonParameters): Promise<ServiceSurvey>;
    deleteServiceSurveysById(id: number): Promise<NoContentResponse>;
    putServiceSurveysById(id: number, survey: ServiceSurvey): Promise<ServiceSurvey>;
    patchServiceSurveysById(id: number, patchOperations: Array<PatchOperation>): Promise<ServiceSurvey>;
    postServiceSurveysByIdCopy(id: number): Promise<ServiceSurvey>;
    getServiceSurveysByIdUsages(id: number, params?: CommonParameters): Promise<Array<Usage>>;
    getServiceSurveysByIdUsagesList(id: number, params?: CommonParameters): Promise<Array<Usage>>;
    getServiceSurveysByParentIdQuestions(parentId: number, params?: CommonParameters): Promise<Array<ServiceSurveyQuestion>>;
    postServiceSurveysByParentIdQuestions(parentId: number, serviceSurveyQuestion: ServiceSurveyQuestion): Promise<ServiceSurveyQuestion>;
    getServiceSurveysByParentIdQuestionsById(id: number, parentId: number, params?: CommonParameters): Promise<ServiceSurveyQuestion>;
    deleteServiceSurveysByParentIdQuestionsById(id: number, parentId: number): Promise<NoContentResponse>;
    putServiceSurveysByParentIdQuestionsById(id: number, parentId: number, serviceSurveyQuestion: ServiceSurveyQuestion): Promise<ServiceSurveyQuestion>;
    patchServiceSurveysByParentIdQuestionsById(id: number, parentId: number, patchOperations: Array<PatchOperation>): Promise<ServiceSurveyQuestion>;
    postServiceSurveysByParentIdQuestionsByIdCopy(id: number, parentId: number): Promise<ServiceSurveyQuestion>;
    getServiceSurveysByParentIdQuestionsCount(parentId: number, params?: CommonParameters): Promise<Count>;
    getServiceSurveysByParentIdResults(parentId: number, params?: CommonParameters): Promise<Array<SurveyResult>>;
    postServiceSurveysByParentIdResults(parentId: number, surveyResult: SurveyResult): Promise<SurveyResult>;
    getServiceSurveysByParentIdResultsById(id: number, parentId: number, params?: CommonParameters): Promise<SurveyResult>;
    deleteServiceSurveysByParentIdResultsById(id: number, parentId: number): Promise<NoContentResponse>;
    putServiceSurveysByParentIdResultsById(id: number, parentId: number, surveyResult: SurveyResult): Promise<SurveyResult>;
    patchServiceSurveysByParentIdResultsById(id: number, parentId: number, patchOperations: Array<PatchOperation>): Promise<SurveyResult>;
    getServiceSurveysByParentIdResultsCount(parentId: number, params?: CommonParameters): Promise<Count>;
    getServiceSurveysCount(params?: CommonParameters): Promise<Count>;
    postServiceTeamMembers(teamMember: TeamMember): Promise<TeamMember>;
    getServiceTeams(params?: CommonParameters): Promise<Array<ServiceTeam>>;
    getServiceTeamsById(id: number, params?: CommonParameters): Promise<ServiceTeam>;
    getServiceTeamsCount(params?: CommonParameters): Promise<Count>;
    getServiceTemplates(params?: CommonParameters): Promise<Array<ServiceTemplate>>;
    getServiceTemplatesById(id: number, params?: CommonParameters): Promise<ServiceTemplate>;
    postServiceTemplatesByIdGenerate(id: number): Promise<TemplateGeneratedCountsModel>;
    getServiceTemplatesByIdInfo(id: number, params?: CommonParameters): Promise<ServiceTemplateInfo>;
    getServiceTemplatesCount(params?: CommonParameters): Promise<Count>;
    getServiceTemplatesInfo(params?: CommonParameters): Promise<Array<ServiceTemplateInfo>>;
    getServiceTemplatesInfoCount(params?: CommonParameters): Promise<Count>;
    getServiceTicketLinks(params?: CommonParameters): Promise<Array<ServiceTicketLink>>;
    postServiceTicketLinks(serviceTicketLink: ServiceTicketLink): Promise<ServiceTicketLink>;
    getServiceTicketLinksById(id: number, params?: CommonParameters): Promise<ServiceTicketLink>;
    deleteServiceTicketLinksById(id: number): Promise<NoContentResponse>;
    putServiceTicketLinksById(id: number, serviceTicketLink: ServiceTicketLink): Promise<ServiceTicketLink>;
    patchServiceTicketLinksById(id: number, patchOperations: Array<PatchOperation>): Promise<ServiceTicketLink>;
    getServiceTicketLinksByIdInfo(id: number, params?: CommonParameters): Promise<ServiceTicketLinkInfo>;
    getServiceTicketLinksCount(params?: CommonParameters): Promise<Count>;
    getServiceTicketLinksInfo(params?: CommonParameters): Promise<Array<ServiceTicketLinkInfo>>;
    getServiceTicketLinksInfoCount(params?: CommonParameters): Promise<Count>;
    getServiceTickets(params?: CommonParameters): Promise<Array<Ticket>>;
    postServiceTickets(ticket: Ticket): Promise<Ticket>;
    getServiceTicketsById(id: number, params?: CommonParameters): Promise<Ticket>;
    deleteServiceTicketsById(id: number): Promise<NoContentResponse>;
    putServiceTicketsById(id: number, ticket: Ticket): Promise<Ticket>;
    patchServiceTicketsById(id: number, patchOperations: Array<PatchOperation>): Promise<Ticket>;
    getServiceTicketsByIdInfo(id: number, params?: CommonParameters): Promise<TicketInfo>;
    getServiceTicketsByParentIdActivities(parentId: number, params?: CommonParameters): Promise<Array<ActivityReference>>;
    getServiceTicketsByParentIdActivitiesCount(parentId: number, params?: CommonParameters): Promise<Count>;
    getServiceTicketsByParentIdAllNotes(parentId: number, params?: CommonParameters): Promise<Array<ServiceTicketNote>>;
    postServiceTicketsByParentIdAttachChildren(parentId: number, bundle: TicketBundle): Promise<SuccessResponse>;
    getServiceTicketsByParentIdConfigurations(parentId: number, params?: CommonParameters): Promise<Array<ConfigurationReference>>;
    postServiceTicketsByParentIdConfigurations(parentId: number, configuration: ConfigurationReference): Promise<ConfigurationReference>;
    getServiceTicketsByParentIdConfigurationsById(id: number, parentId: number, params?: CommonParameters): Promise<ConfigurationReference>;
    deleteServiceTicketsByParentIdConfigurationsById(id: number, parentId: number): Promise<NoContentResponse>;
    getServiceTicketsByParentIdConfigurationsCount(parentId: number, params?: CommonParameters): Promise<Count>;
    postServiceTicketsByParentIdConvert(parentId: number, conversion: ConvertToProject): Promise<SuccessResponse>;
    getServiceTicketsByParentIdDocuments(parentId: number, params?: CommonParameters): Promise<Array<DocumentReference>>;
    getServiceTicketsByParentIdDocumentsCount(parentId: number, params?: CommonParameters): Promise<Count>;
    postServiceTicketsByParentIdMerge(parentId: number, merge: TicketMerge): Promise<SuccessResponse>;
    getServiceTicketsByParentIdNotes(parentId: number, params?: CommonParameters): Promise<Array<ServiceNote>>;
    postServiceTicketsByParentIdNotes(parentId: number, serviceNote: ServiceNote): Promise<ServiceNote>;
    getServiceTicketsByParentIdNotesById(id: number, parentId: number, params?: CommonParameters): Promise<ServiceNote>;
    deleteServiceTicketsByParentIdNotesById(id: number, parentId: number): Promise<NoContentResponse>;
    putServiceTicketsByParentIdNotesById(id: number, parentId: number, serviceNote: ServiceNote): Promise<ServiceNote>;
    patchServiceTicketsByParentIdNotesById(id: number, parentId: number, patchOperations: Array<PatchOperation>): Promise<ServiceNote>;
    getServiceTicketsByParentIdNotesCount(parentId: number, params?: CommonParameters): Promise<Count>;
    getServiceTicketsByParentIdProducts(parentId: number, params?: CommonParameters): Promise<Array<ProductReference>>;
    getServiceTicketsByParentIdProductsCount(parentId: number, params?: CommonParameters): Promise<Count>;
    getServiceTicketsByParentIdScheduleentries(parentId: number, params?: CommonParameters): Promise<Array<ScheduleEntryReference>>;
    getServiceTicketsByParentIdScheduleentriesCount(parentId: number, params?: CommonParameters): Promise<Count>;
    getServiceTicketsByParentIdTasks(parentId: number, params?: CommonParameters): Promise<Array<Task>>;
    postServiceTicketsByParentIdTasks(parentId: number, task: Task): Promise<Task>;
    getServiceTicketsByParentIdTasksById(id: number, parentId: number, params?: CommonParameters): Promise<Task>;
    deleteServiceTicketsByParentIdTasksById(id: number, parentId: number): Promise<NoContentResponse>;
    putServiceTicketsByParentIdTasksById(id: number, parentId: number, task: Task): Promise<Task>;
    patchServiceTicketsByParentIdTasksById(id: number, parentId: number, patchOperations: Array<PatchOperation>): Promise<Task>;
    getServiceTicketsByParentIdTasksCount(parentId: number, params?: CommonParameters): Promise<Count>;
    getServiceTicketsByParentIdTimeentries(parentId: number, params?: CommonParameters): Promise<Array<TimeEntryReference>>;
    getServiceTicketsByParentIdTimeentriesCount(parentId: number, params?: CommonParameters): Promise<Count>;
    getServiceTicketsCount(params?: CommonParameters): Promise<Count>;
    getServiceTicketsInfo(params?: CommonParameters): Promise<Array<TicketInfo>>;
    getServiceTicketsInfoCount(params?: CommonParameters): Promise<Count>;
    postServiceTicketsSearch(filterValues: FilterValues): Promise<Array<Ticket>>;
    getServiceTicketSyncs(params?: CommonParameters): Promise<Array<TicketSync>>;
    postServiceTicketSyncs(ticketSync: TicketSync): Promise<TicketSync>;
    getServiceTicketSyncsById(id: number, params?: CommonParameters): Promise<TicketSync>;
    deleteServiceTicketSyncsById(id: number): Promise<NoContentResponse>;
    putServiceTicketSyncsById(id: number, ticketSync: TicketSync): Promise<TicketSync>;
    patchServiceTicketSyncsById(id: number, patchOperations: Array<PatchOperation>): Promise<TicketSync>;
    getServiceTicketSyncsCount(params?: CommonParameters): Promise<Count>;
}
export {};
//# sourceMappingURL=ServiceAPI.d.ts.map