"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ServiceAPI = void 0;
/* This file was auto-generated, do not manually edit. */
const Manage_1 = __importDefault(require("../Manage"));
/**
 * @module ServiceAPI
 */
/**
 * Service module
 * @public
 */
class ServiceAPI extends Manage_1.default {
    constructor(props) {
        super(props);
    }
    getServiceBoards(params = {}) {
        return this.request({
            path: `/service/boards`,
            method: 'get',
            params,
        });
    }
    postServiceBoards(board) {
        return this.request({
            path: `/service/boards`,
            method: 'post',
            data: board,
        });
    }
    getServiceBoardsByGrandparentIdItemsByParentIdAssociations(parentId, grandparentId, params = {}) {
        return this.request({
            path: `/service/boards/${grandparentId}/items/${parentId}/associations`,
            method: 'get',
            params,
        });
    }
    getServiceBoardsByGrandparentIdItemsByParentIdAssociationsById(id, parentId, grandparentId, params = {}) {
        return this.request({
            path: `/service/boards/${grandparentId}/items/${parentId}/associations/${id}`,
            method: 'get',
            params,
        });
    }
    putServiceBoardsByGrandparentIdItemsByParentIdAssociationsById(id, parentId, grandparentId, itemAssociation) {
        return this.request({
            path: `/service/boards/${grandparentId}/items/${parentId}/associations/${id}`,
            method: 'put',
            data: itemAssociation,
        });
    }
    patchServiceBoardsByGrandparentIdItemsByParentIdAssociationsById(id, parentId, grandparentId, patchOperations) {
        return this.request({
            path: `/service/boards/${grandparentId}/items/${parentId}/associations/${id}`,
            method: 'patch',
            data: patchOperations,
        });
    }
    getServiceBoardsByGrandparentIdItemsByParentIdAssociationsCount(parentId, grandparentId, params = {}) {
        return this.request({
            path: `/service/boards/${grandparentId}/items/${parentId}/associations/count`,
            method: 'get',
            params,
        });
    }
    getServiceBoardsByGrandparentIdStatusesByParentIdNotifications(parentId, grandparentId, params = {}) {
        return this.request({
            path: `/service/boards/${grandparentId}/statuses/${parentId}/notifications`,
            method: 'get',
            params,
        });
    }
    postServiceBoardsByGrandparentIdStatusesByParentIdNotifications(parentId, grandparentId, boardStatusNotification) {
        return this.request({
            path: `/service/boards/${grandparentId}/statuses/${parentId}/notifications`,
            method: 'post',
            data: boardStatusNotification,
        });
    }
    getServiceBoardsByGrandparentIdStatusesByParentIdNotificationsById(id, parentId, grandparentId, params = {}) {
        return this.request({
            path: `/service/boards/${grandparentId}/statuses/${parentId}/notifications/${id}`,
            method: 'get',
            params,
        });
    }
    deleteServiceBoardsByGrandparentIdStatusesByParentIdNotificationsById(id, parentId, grandparentId) {
        return this.request({
            path: `/service/boards/${grandparentId}/statuses/${parentId}/notifications/${id}`,
            method: 'delete',
        });
    }
    putServiceBoardsByGrandparentIdStatusesByParentIdNotificationsById(id, parentId, grandparentId, boardStatusNotification) {
        return this.request({
            path: `/service/boards/${grandparentId}/statuses/${parentId}/notifications/${id}`,
            method: 'put',
            data: boardStatusNotification,
        });
    }
    patchServiceBoardsByGrandparentIdStatusesByParentIdNotificationsById(id, parentId, grandparentId, patchOperations) {
        return this.request({
            path: `/service/boards/${grandparentId}/statuses/${parentId}/notifications/${id}`,
            method: 'patch',
            data: patchOperations,
        });
    }
    getServiceBoardsByGrandparentIdStatusesByParentIdNotificationsCount(parentId, grandparentId, params = {}) {
        return this.request({
            path: `/service/boards/${grandparentId}/statuses/${parentId}/notifications/count`,
            method: 'get',
            params,
        });
    }
    getServiceBoardsById(id, params = {}) {
        return this.request({
            path: `/service/boards/${id}`,
            method: 'get',
            params,
        });
    }
    deleteServiceBoardsById(id) {
        return this.request({
            path: `/service/boards/${id}`,
            method: 'delete',
        });
    }
    putServiceBoardsById(id, board) {
        return this.request({
            path: `/service/boards/${id}`,
            method: 'put',
            data: board,
        });
    }
    patchServiceBoardsById(id, patchOperations) {
        return this.request({
            path: `/service/boards/${id}`,
            method: 'patch',
            data: patchOperations,
        });
    }
    getServiceBoardsByIdUsages(id, params = {}) {
        return this.request({
            path: `/service/boards/${id}/usages`,
            method: 'get',
            params,
        });
    }
    getServiceBoardsByIdUsagesList(id, params = {}) {
        return this.request({
            path: `/service/boards/${id}/usages/list`,
            method: 'get',
            params,
        });
    }
    getServiceBoardsByParentIdAutoAssignResources(parentId, params = {}) {
        return this.request({
            path: `/service/boards/${parentId}/autoAssignResources`,
            method: 'get',
            params,
        });
    }
    postServiceBoardsByParentIdAutoAssignResources(parentId, boardAutoAssignResource) {
        return this.request({
            path: `/service/boards/${parentId}/autoAssignResources`,
            method: 'post',
            data: boardAutoAssignResource,
        });
    }
    getServiceBoardsByParentIdAutoAssignResourcesById(id, parentId, params = {}) {
        return this.request({
            path: `/service/boards/${parentId}/autoAssignResources/${id}`,
            method: 'get',
            params,
        });
    }
    deleteServiceBoardsByParentIdAutoAssignResourcesById(id, parentId) {
        return this.request({
            path: `/service/boards/${parentId}/autoAssignResources/${id}`,
            method: 'delete',
        });
    }
    putServiceBoardsByParentIdAutoAssignResourcesById(id, parentId, boardAutoAssignResource) {
        return this.request({
            path: `/service/boards/${parentId}/autoAssignResources/${id}`,
            method: 'put',
            data: boardAutoAssignResource,
        });
    }
    patchServiceBoardsByParentIdAutoAssignResourcesById(id, parentId, patchOperations) {
        return this.request({
            path: `/service/boards/${parentId}/autoAssignResources/${id}`,
            method: 'patch',
            data: patchOperations,
        });
    }
    getServiceBoardsByParentIdAutoAssignResourcesCount(parentId, params = {}) {
        return this.request({
            path: `/service/boards/${parentId}/autoAssignResources/count`,
            method: 'get',
            params,
        });
    }
    getServiceBoardsByParentIdAutoTemplates(parentId, params = {}) {
        return this.request({
            path: `/service/boards/${parentId}/autoTemplates`,
            method: 'get',
            params,
        });
    }
    postServiceBoardsByParentIdAutoTemplates(parentId, boardAutoTemplate) {
        return this.request({
            path: `/service/boards/${parentId}/autoTemplates`,
            method: 'post',
            data: boardAutoTemplate,
        });
    }
    getServiceBoardsByParentIdAutoTemplatesById(id, parentId, params = {}) {
        return this.request({
            path: `/service/boards/${parentId}/autoTemplates/${id}`,
            method: 'get',
            params,
        });
    }
    deleteServiceBoardsByParentIdAutoTemplatesById(id, parentId) {
        return this.request({
            path: `/service/boards/${parentId}/autoTemplates/${id}`,
            method: 'delete',
        });
    }
    putServiceBoardsByParentIdAutoTemplatesById(id, parentId, boardAutoTemplate) {
        return this.request({
            path: `/service/boards/${parentId}/autoTemplates/${id}`,
            method: 'put',
            data: boardAutoTemplate,
        });
    }
    patchServiceBoardsByParentIdAutoTemplatesById(id, parentId, patchOperations) {
        return this.request({
            path: `/service/boards/${parentId}/autoTemplates/${id}`,
            method: 'patch',
            data: patchOperations,
        });
    }
    getServiceBoardsByParentIdAutoTemplatesCount(parentId, params = {}) {
        return this.request({
            path: `/service/boards/${parentId}/autoTemplates/count`,
            method: 'get',
            params,
        });
    }
    getServiceBoardsByParentIdExcludedMembers(parentId, params = {}) {
        return this.request({
            path: `/service/boards/${parentId}/excludedMembers`,
            method: 'get',
            params,
        });
    }
    postServiceBoardsByParentIdExcludedMembers(parentId, boardExcludedMember) {
        return this.request({
            path: `/service/boards/${parentId}/excludedMembers`,
            method: 'post',
            data: boardExcludedMember,
        });
    }
    getServiceBoardsByParentIdExcludedMembersById(id, parentId, params = {}) {
        return this.request({
            path: `/service/boards/${parentId}/excludedMembers/${id}`,
            method: 'get',
            params,
        });
    }
    deleteServiceBoardsByParentIdExcludedMembersById(id, parentId) {
        return this.request({
            path: `/service/boards/${parentId}/excludedMembers/${id}`,
            method: 'delete',
        });
    }
    getServiceBoardsByParentIdExcludedMembersCount(parentId, params = {}) {
        return this.request({
            path: `/service/boards/${parentId}/excludedMembers/count`,
            method: 'get',
            params,
        });
    }
    getServiceBoardsByParentIdItems(parentId, params = {}) {
        return this.request({
            path: `/service/boards/${parentId}/items`,
            method: 'get',
            params,
        });
    }
    postServiceBoardsByParentIdItems(parentId, boardItem) {
        return this.request({
            path: `/service/boards/${parentId}/items`,
            method: 'post',
            data: boardItem,
        });
    }
    getServiceBoardsByParentIdItemsById(id, parentId, params = {}) {
        return this.request({
            path: `/service/boards/${parentId}/items/${id}`,
            method: 'get',
            params,
        });
    }
    deleteServiceBoardsByParentIdItemsById(id, parentId) {
        return this.request({
            path: `/service/boards/${parentId}/items/${id}`,
            method: 'delete',
        });
    }
    putServiceBoardsByParentIdItemsById(id, parentId, boardItem) {
        return this.request({
            path: `/service/boards/${parentId}/items/${id}`,
            method: 'put',
            data: boardItem,
        });
    }
    patchServiceBoardsByParentIdItemsById(id, parentId, patchOperations) {
        return this.request({
            path: `/service/boards/${parentId}/items/${id}`,
            method: 'patch',
            data: patchOperations,
        });
    }
    getServiceBoardsByParentIdItemsByIdUsages(id, parentId, params = {}) {
        return this.request({
            path: `/service/boards/${parentId}/items/${id}/usages`,
            method: 'get',
            params,
        });
    }
    getServiceBoardsByParentIdItemsByIdUsagesList(id, parentId, params = {}) {
        return this.request({
            path: `/service/boards/${parentId}/items/${id}/usages/list`,
            method: 'get',
            params,
        });
    }
    getServiceBoardsByParentIdItemsCount(parentId, params = {}) {
        return this.request({
            path: `/service/boards/${parentId}/items/count`,
            method: 'get',
            params,
        });
    }
    getServiceBoardsByParentIdNotifications(parentId, params = {}) {
        return this.request({
            path: `/service/boards/${parentId}/notifications`,
            method: 'get',
            params,
        });
    }
    postServiceBoardsByParentIdNotifications(parentId, boardNotification) {
        return this.request({
            path: `/service/boards/${parentId}/notifications`,
            method: 'post',
            data: boardNotification,
        });
    }
    getServiceBoardsByParentIdNotificationsById(id, parentId, params = {}) {
        return this.request({
            path: `/service/boards/${parentId}/notifications/${id}`,
            method: 'get',
            params,
        });
    }
    deleteServiceBoardsByParentIdNotificationsById(id, parentId) {
        return this.request({
            path: `/service/boards/${parentId}/notifications/${id}`,
            method: 'delete',
        });
    }
    putServiceBoardsByParentIdNotificationsById(id, parentId, boardNotification) {
        return this.request({
            path: `/service/boards/${parentId}/notifications/${id}`,
            method: 'put',
            data: boardNotification,
        });
    }
    patchServiceBoardsByParentIdNotificationsById(id, parentId, patchOperations) {
        return this.request({
            path: `/service/boards/${parentId}/notifications/${id}`,
            method: 'patch',
            data: patchOperations,
        });
    }
    getServiceBoardsByParentIdNotificationsCount(parentId, params = {}) {
        return this.request({
            path: `/service/boards/${parentId}/notifications/count`,
            method: 'get',
            params,
        });
    }
    getServiceBoardsByParentIdStatuses(parentId, params = {}) {
        return this.request({
            path: `/service/boards/${parentId}/statuses`,
            method: 'get',
            params,
        });
    }
    postServiceBoardsByParentIdStatuses(parentId, boardStatus) {
        return this.request({
            path: `/service/boards/${parentId}/statuses`,
            method: 'post',
            data: boardStatus,
        });
    }
    getServiceBoardsByParentIdStatusesById(id, parentId, params = {}) {
        return this.request({
            path: `/service/boards/${parentId}/statuses/${id}`,
            method: 'get',
            params,
        });
    }
    deleteServiceBoardsByParentIdStatusesById(id, parentId) {
        return this.request({
            path: `/service/boards/${parentId}/statuses/${id}`,
            method: 'delete',
        });
    }
    putServiceBoardsByParentIdStatusesById(id, parentId, boardStatus) {
        return this.request({
            path: `/service/boards/${parentId}/statuses/${id}`,
            method: 'put',
            data: boardStatus,
        });
    }
    patchServiceBoardsByParentIdStatusesById(id, parentId, patchOperations) {
        return this.request({
            path: `/service/boards/${parentId}/statuses/${id}`,
            method: 'patch',
            data: patchOperations,
        });
    }
    getServiceBoardsByParentIdStatusesByIdInfo(parentId, id, params = {}) {
        return this.request({
            path: `/service/boards/${parentId}/statuses/${id}/info`,
            method: 'get',
            params,
        });
    }
    getServiceBoardsByParentIdStatusesByIdUsages(id, parentId, params = {}) {
        return this.request({
            path: `/service/boards/${parentId}/statuses/${id}/usages`,
            method: 'get',
            params,
        });
    }
    getServiceBoardsByParentIdStatusesByIdUsagesList(id, parentId, params = {}) {
        return this.request({
            path: `/service/boards/${parentId}/statuses/${id}/usages/list`,
            method: 'get',
            params,
        });
    }
    getServiceBoardsByParentIdStatusesCount(parentId, params = {}) {
        return this.request({
            path: `/service/boards/${parentId}/statuses/count`,
            method: 'get',
            params,
        });
    }
    getServiceBoardsByParentIdStatusesInfo(parentId, params = {}) {
        return this.request({
            path: `/service/boards/${parentId}/statuses/info`,
            method: 'get',
            params,
        });
    }
    getServiceBoardsByParentIdStatusesInfoCount(parentId, params = {}) {
        return this.request({
            path: `/service/boards/${parentId}/statuses/info/count`,
            method: 'get',
            params,
        });
    }
    getServiceBoardsByParentIdSubtypes(parentId, params = {}) {
        return this.request({
            path: `/service/boards/${parentId}/subtypes`,
            method: 'get',
            params,
        });
    }
    postServiceBoardsByParentIdSubtypes(parentId, boardSubType) {
        return this.request({
            path: `/service/boards/${parentId}/subtypes`,
            method: 'post',
            data: boardSubType,
        });
    }
    getServiceBoardsByParentIdSubtypesById(id, parentId, params = {}) {
        return this.request({
            path: `/service/boards/${parentId}/subtypes/${id}`,
            method: 'get',
            params,
        });
    }
    deleteServiceBoardsByParentIdSubtypesById(id, parentId) {
        return this.request({
            path: `/service/boards/${parentId}/subtypes/${id}`,
            method: 'delete',
        });
    }
    putServiceBoardsByParentIdSubtypesById(id, parentId, boardSubType) {
        return this.request({
            path: `/service/boards/${parentId}/subtypes/${id}`,
            method: 'put',
            data: boardSubType,
        });
    }
    patchServiceBoardsByParentIdSubtypesById(id, parentId, patchOperations) {
        return this.request({
            path: `/service/boards/${parentId}/subtypes/${id}`,
            method: 'patch',
            data: patchOperations,
        });
    }
    getServiceBoardsByParentIdSubtypesByIdInfo(parentId, id, params = {}) {
        return this.request({
            path: `/service/boards/${parentId}/subtypes/${id}/info`,
            method: 'get',
            params,
        });
    }
    getServiceBoardsByParentIdSubtypesByIdUsages(id, parentId, params = {}) {
        return this.request({
            path: `/service/boards/${parentId}/subtypes/${id}/usages`,
            method: 'get',
            params,
        });
    }
    getServiceBoardsByParentIdSubtypesByIdUsagesList(id, parentId, params = {}) {
        return this.request({
            path: `/service/boards/${parentId}/subtypes/${id}/usages/list`,
            method: 'get',
            params,
        });
    }
    getServiceBoardsByParentIdSubtypesCount(parentId, params = {}) {
        return this.request({
            path: `/service/boards/${parentId}/subtypes/count`,
            method: 'get',
            params,
        });
    }
    getServiceBoardsByParentIdSubtypesInfo(parentId, params = {}) {
        return this.request({
            path: `/service/boards/${parentId}/subtypes/info`,
            method: 'get',
            params,
        });
    }
    getServiceBoardsByParentIdSubtypesInfoCount(parentId, params = {}) {
        return this.request({
            path: `/service/boards/${parentId}/subtypes/info/count`,
            method: 'get',
            params,
        });
    }
    getServiceBoardsByParentIdTeams(parentId, params = {}) {
        return this.request({
            path: `/service/boards/${parentId}/teams`,
            method: 'get',
            params,
        });
    }
    postServiceBoardsByParentIdTeams(parentId, _boardTeam) {
        return this.request({
            path: `/service/boards/${parentId}/teams`,
            method: 'post',
            data: _boardTeam,
        });
    }
    getServiceBoardsByParentIdTeamsById(id, parentId, params = {}) {
        return this.request({
            path: `/service/boards/${parentId}/teams/${id}`,
            method: 'get',
            params,
        });
    }
    deleteServiceBoardsByParentIdTeamsById(id, parentId) {
        return this.request({
            path: `/service/boards/${parentId}/teams/${id}`,
            method: 'delete',
        });
    }
    putServiceBoardsByParentIdTeamsById(id, parentId, _boardTeam) {
        return this.request({
            path: `/service/boards/${parentId}/teams/${id}`,
            method: 'put',
            data: _boardTeam,
        });
    }
    patchServiceBoardsByParentIdTeamsById(id, parentId, patchOperations) {
        return this.request({
            path: `/service/boards/${parentId}/teams/${id}`,
            method: 'patch',
            data: patchOperations,
        });
    }
    getServiceBoardsByParentIdTeamsByIdInfo(id, parentId, params = {}) {
        return this.request({
            path: `/service/boards/${parentId}/teams/${id}/info`,
            method: 'get',
            params,
        });
    }
    getServiceBoardsByParentIdTeamsByIdUsagesList(id, parentId, params = {}) {
        return this.request({
            path: `/service/boards/${parentId}/teams/${id}/usages/list`,
            method: 'get',
            params,
        });
    }
    getServiceBoardsByParentIdTeamsCount(parentId, params = {}) {
        return this.request({
            path: `/service/boards/${parentId}/teams/count`,
            method: 'get',
            params,
        });
    }
    getServiceBoardsByParentIdTeamsInfo(parentId, params = {}) {
        return this.request({
            path: `/service/boards/${parentId}/teams/info`,
            method: 'get',
            params,
        });
    }
    getServiceBoardsByParentIdTeamsInfoCount(parentId, params = {}) {
        return this.request({
            path: `/service/boards/${parentId}/teams/info/count`,
            method: 'get',
            params,
        });
    }
    getServiceBoardsByParentIdTypes(parentId, params = {}) {
        return this.request({
            path: `/service/boards/${parentId}/types`,
            method: 'get',
            params,
        });
    }
    postServiceBoardsByParentIdTypes(parentId, boardType) {
        return this.request({
            path: `/service/boards/${parentId}/types`,
            method: 'post',
            data: boardType,
        });
    }
    getServiceBoardsByParentIdTypesById(id, parentId, params = {}) {
        return this.request({
            path: `/service/boards/${parentId}/types/${id}`,
            method: 'get',
            params,
        });
    }
    deleteServiceBoardsByParentIdTypesById(id, parentId) {
        return this.request({
            path: `/service/boards/${parentId}/types/${id}`,
            method: 'delete',
        });
    }
    putServiceBoardsByParentIdTypesById(id, parentId, boardType) {
        return this.request({
            path: `/service/boards/${parentId}/types/${id}`,
            method: 'put',
            data: boardType,
        });
    }
    patchServiceBoardsByParentIdTypesById(id, parentId, patchOperations) {
        return this.request({
            path: `/service/boards/${parentId}/types/${id}`,
            method: 'patch',
            data: patchOperations,
        });
    }
    getServiceBoardsByParentIdTypesByIdUsages(id, parentId, params = {}) {
        return this.request({
            path: `/service/boards/${parentId}/types/${id}/usages`,
            method: 'get',
            params,
        });
    }
    getServiceBoardsByParentIdTypesByIdUsagesList(id, parentId, params = {}) {
        return this.request({
            path: `/service/boards/${parentId}/types/${id}/usages/list`,
            method: 'get',
            params,
        });
    }
    getServiceBoardsByParentIdTypesCount(parentId, params = {}) {
        return this.request({
            path: `/service/boards/${parentId}/types/count`,
            method: 'get',
            params,
        });
    }
    getServiceBoardsByParentIdTypeSubTypeItemAssociations(parentId, params = {}) {
        return this.request({
            path: `/service/boards/${parentId}/typeSubTypeItemAssociations`,
            method: 'get',
            params,
        });
    }
    getServiceBoardsByParentIdTypeSubTypeItemAssociationsById(id, parentId, params = {}) {
        return this.request({
            path: `/service/boards/${parentId}/typeSubTypeItemAssociations/${id}`,
            method: 'get',
            params,
        });
    }
    getServiceBoardsByParentIdTypeSubTypeItemAssociationsCount(parentId, params = {}) {
        return this.request({
            path: `/service/boards/${parentId}/typeSubTypeItemAssociations/count`,
            method: 'get',
            params,
        });
    }
    postServiceBoardsCopy(copy) {
        return this.request({
            path: `/service/boards/copy`,
            method: 'post',
            data: copy,
        });
    }
    getServiceBoardsCount(params = {}) {
        return this.request({
            path: `/service/boards/count`,
            method: 'get',
            params,
        });
    }
    getServiceCodes(params = {}) {
        return this.request({
            path: `/service/codes`,
            method: 'get',
            params,
        });
    }
    postServiceCodes(code) {
        return this.request({
            path: `/service/codes`,
            method: 'post',
            data: code,
        });
    }
    getServiceCodesById(id, params = {}) {
        return this.request({
            path: `/service/codes/${id}`,
            method: 'get',
            params,
        });
    }
    deleteServiceCodesById(id) {
        return this.request({
            path: `/service/codes/${id}`,
            method: 'delete',
        });
    }
    putServiceCodesById(id, code) {
        return this.request({
            path: `/service/codes/${id}`,
            method: 'put',
            data: code,
        });
    }
    patchServiceCodesById(id, patchOperations) {
        return this.request({
            path: `/service/codes/${id}`,
            method: 'patch',
            data: patchOperations,
        });
    }
    getServiceCodesCount(params = {}) {
        return this.request({
            path: `/service/codes/count`,
            method: 'get',
            params,
        });
    }
    getServiceEmailTemplates(params = {}) {
        return this.request({
            path: `/service/emailTemplates`,
            method: 'get',
            params,
        });
    }
    postServiceEmailTemplates(serviceEmailTemplate) {
        return this.request({
            path: `/service/emailTemplates`,
            method: 'post',
            data: serviceEmailTemplate,
        });
    }
    getServiceEmailTemplatesById(id, params = {}) {
        return this.request({
            path: `/service/emailTemplates/${id}`,
            method: 'get',
            params,
        });
    }
    deleteServiceEmailTemplatesById(id) {
        return this.request({
            path: `/service/emailTemplates/${id}`,
            method: 'delete',
        });
    }
    putServiceEmailTemplatesById(id, serviceEmailTemplate) {
        return this.request({
            path: `/service/emailTemplates/${id}`,
            method: 'put',
            data: serviceEmailTemplate,
        });
    }
    patchServiceEmailTemplatesById(id, patchOperations) {
        return this.request({
            path: `/service/emailTemplates/${id}`,
            method: 'patch',
            data: patchOperations,
        });
    }
    getServiceEmailTemplatesByIdUsages(id, params = {}) {
        return this.request({
            path: `/service/emailTemplates/${id}/usages`,
            method: 'get',
            params,
        });
    }
    getServiceEmailTemplatesByIdUsagesList(id, params = {}) {
        return this.request({
            path: `/service/emailTemplates/${id}/usages/list`,
            method: 'get',
            params,
        });
    }
    getServiceEmailTemplatesCount(params = {}) {
        return this.request({
            path: `/service/emailTemplates/count`,
            method: 'get',
            params,
        });
    }
    getServiceImpacts(params = {}) {
        return this.request({
            path: `/service/impacts`,
            method: 'get',
            params,
        });
    }
    getServiceImpactsById(id, params = {}) {
        return this.request({
            path: `/service/impacts/${id}`,
            method: 'get',
            params,
        });
    }
    putServiceImpactsById(id, impact) {
        return this.request({
            path: `/service/impacts/${id}`,
            method: 'put',
            data: impact,
        });
    }
    patchServiceImpactsById(id, patchOperations) {
        return this.request({
            path: `/service/impacts/${id}`,
            method: 'patch',
            data: patchOperations,
        });
    }
    getServiceImpactsCount(params = {}) {
        return this.request({
            path: `/service/impacts/count`,
            method: 'get',
            params,
        });
    }
    getServiceInfoBoards(params = {}) {
        return this.request({
            path: `/service/info/boards`,
            method: 'get',
            params,
        });
    }
    getServiceInfoBoardsById(id, params = {}) {
        return this.request({
            path: `/service/info/boards/${id}`,
            method: 'get',
            params,
        });
    }
    getServiceInfoBoardsCount(params = {}) {
        return this.request({
            path: `/service/info/boards/count`,
            method: 'get',
            params,
        });
    }
    getServiceInfoBoardtypes(params = {}) {
        return this.request({
            path: `/service/info/boardtypes`,
            method: 'get',
            params,
        });
    }
    getServiceInfoBoardtypesById(id, params = {}) {
        return this.request({
            path: `/service/info/boardtypes/${id}`,
            method: 'get',
            params,
        });
    }
    getServiceInfoBoardtypesCount(params = {}) {
        return this.request({
            path: `/service/info/boardtypes/count`,
            method: 'get',
            params,
        });
    }
    getServiceKnowledgeBaseArticles(params = {}) {
        return this.request({
            path: `/service/knowledgeBaseArticles`,
            method: 'get',
            params,
        });
    }
    postServiceKnowledgeBaseArticles(knowledgeBaseArticle) {
        return this.request({
            path: `/service/knowledgeBaseArticles`,
            method: 'post',
            data: knowledgeBaseArticle,
        });
    }
    getServiceKnowledgeBaseArticlesById(id, params = {}) {
        return this.request({
            path: `/service/knowledgeBaseArticles/${id}`,
            method: 'get',
            params,
        });
    }
    deleteServiceKnowledgeBaseArticlesById(id) {
        return this.request({
            path: `/service/knowledgeBaseArticles/${id}`,
            method: 'delete',
        });
    }
    putServiceKnowledgeBaseArticlesById(id, knowledgeBaseArticle) {
        return this.request({
            path: `/service/knowledgeBaseArticles/${id}`,
            method: 'put',
            data: knowledgeBaseArticle,
        });
    }
    patchServiceKnowledgeBaseArticlesById(id, patchOperations) {
        return this.request({
            path: `/service/knowledgeBaseArticles/${id}`,
            method: 'patch',
            data: patchOperations,
        });
    }
    getServiceKnowledgeBaseArticlesCount(params = {}) {
        return this.request({
            path: `/service/knowledgeBaseArticles/count`,
            method: 'get',
            params,
        });
    }
    getServiceKnowledgeBaseCategories(params = {}) {
        return this.request({
            path: `/service/knowledgeBaseCategories`,
            method: 'get',
            params,
        });
    }
    postServiceKnowledgeBaseCategories(knowledgeBaseCategory) {
        return this.request({
            path: `/service/knowledgeBaseCategories`,
            method: 'post',
            data: knowledgeBaseCategory,
        });
    }
    getServiceKnowledgeBaseCategoriesById(id, params = {}) {
        return this.request({
            path: `/service/knowledgeBaseCategories/${id}`,
            method: 'get',
            params,
        });
    }
    deleteServiceKnowledgeBaseCategoriesById(id) {
        return this.request({
            path: `/service/knowledgeBaseCategories/${id}`,
            method: 'delete',
        });
    }
    putServiceKnowledgeBaseCategoriesById(id, knowledgeBaseCategory) {
        return this.request({
            path: `/service/knowledgeBaseCategories/${id}`,
            method: 'put',
            data: knowledgeBaseCategory,
        });
    }
    patchServiceKnowledgeBaseCategoriesById(id, patchOperations) {
        return this.request({
            path: `/service/knowledgeBaseCategories/${id}`,
            method: 'patch',
            data: patchOperations,
        });
    }
    getServiceKnowledgeBaseCategoriesCount(params = {}) {
        return this.request({
            path: `/service/knowledgeBaseCategories/count`,
            method: 'get',
            params,
        });
    }
    getServiceKnowledgebasesettings(params = {}) {
        return this.request({
            path: `/service/knowledgebasesettings`,
            method: 'get',
            params,
        });
    }
    postServiceKnowledgebasesettings(knowledgeBaseSettings) {
        return this.request({
            path: `/service/knowledgebasesettings`,
            method: 'post',
            data: knowledgeBaseSettings,
        });
    }
    getServiceKnowledgebasesettingsById(id, params = {}) {
        return this.request({
            path: `/service/knowledgebasesettings/${id}`,
            method: 'get',
            params,
        });
    }
    putServiceKnowledgebasesettingsById(id, knowledgeBaseSettings) {
        return this.request({
            path: `/service/knowledgebasesettings/${id}`,
            method: 'put',
            data: knowledgeBaseSettings,
        });
    }
    patchServiceKnowledgebasesettingsById(id, patchOperations) {
        return this.request({
            path: `/service/knowledgebasesettings/${id}`,
            method: 'patch',
            data: patchOperations,
        });
    }
    getServiceKnowledgeBaseSubCategories(params = {}) {
        return this.request({
            path: `/service/knowledgeBaseSubCategories`,
            method: 'get',
            params,
        });
    }
    postServiceKnowledgeBaseSubCategories(knowledgeBaseSubCategory) {
        return this.request({
            path: `/service/knowledgeBaseSubCategories`,
            method: 'post',
            data: knowledgeBaseSubCategory,
        });
    }
    getServiceKnowledgeBaseSubCategoriesById(id, params = {}) {
        return this.request({
            path: `/service/knowledgeBaseSubCategories/${id}`,
            method: 'get',
            params,
        });
    }
    deleteServiceKnowledgeBaseSubCategoriesById(id) {
        return this.request({
            path: `/service/knowledgeBaseSubCategories/${id}`,
            method: 'delete',
        });
    }
    putServiceKnowledgeBaseSubCategoriesById(id, knowledgeBaseSubCategory) {
        return this.request({
            path: `/service/knowledgeBaseSubCategories/${id}`,
            method: 'put',
            data: knowledgeBaseSubCategory,
        });
    }
    patchServiceKnowledgeBaseSubCategoriesById(id, patchOperations) {
        return this.request({
            path: `/service/knowledgeBaseSubCategories/${id}`,
            method: 'patch',
            data: patchOperations,
        });
    }
    getServiceKnowledgeBaseSubCategoriesByIdUsages(id, params = {}) {
        return this.request({
            path: `/service/knowledgeBaseSubCategories/${id}/usages`,
            method: 'get',
            params,
        });
    }
    getServiceKnowledgeBaseSubCategoriesByIdUsagesList(id, params = {}) {
        return this.request({
            path: `/service/knowledgeBaseSubCategories/${id}/usages/list`,
            method: 'get',
            params,
        });
    }
    getServiceKnowledgeBaseSubCategoriesCount(params = {}) {
        return this.request({
            path: `/service/knowledgeBaseSubCategories/count`,
            method: 'get',
            params,
        });
    }
    getServiceLocations(params = {}) {
        return this.request({
            path: `/service/locations`,
            method: 'get',
            params,
        });
    }
    postServiceLocations(location) {
        return this.request({
            path: `/service/locations`,
            method: 'post',
            data: location,
        });
    }
    getServiceLocationsById(id, params = {}) {
        return this.request({
            path: `/service/locations/${id}`,
            method: 'get',
            params,
        });
    }
    deleteServiceLocationsById(id) {
        return this.request({
            path: `/service/locations/${id}`,
            method: 'delete',
        });
    }
    putServiceLocationsById(id, location) {
        return this.request({
            path: `/service/locations/${id}`,
            method: 'put',
            data: location,
        });
    }
    patchServiceLocationsById(id, patchOperations) {
        return this.request({
            path: `/service/locations/${id}`,
            method: 'patch',
            data: patchOperations,
        });
    }
    getServiceLocationsByIdInfo(id, params = {}) {
        return this.request({
            path: `/service/locations/${id}/info`,
            method: 'get',
            params,
        });
    }
    getServiceLocationsCount(params = {}) {
        return this.request({
            path: `/service/locations/count`,
            method: 'get',
            params,
        });
    }
    getServiceLocationsInfo(params = {}) {
        return this.request({
            path: `/service/locations/info`,
            method: 'get',
            params,
        });
    }
    getServiceLocationsInfoCount(params = {}) {
        return this.request({
            path: `/service/locations/info/count`,
            method: 'get',
            params,
        });
    }
    getServicePriorities(params = {}) {
        return this.request({
            path: `/service/priorities`,
            method: 'get',
            params,
        });
    }
    postServicePriorities(priority) {
        return this.request({
            path: `/service/priorities`,
            method: 'post',
            data: priority,
        });
    }
    getServicePrioritiesById(id, params = {}) {
        return this.request({
            path: `/service/priorities/${id}`,
            method: 'get',
            params,
        });
    }
    deleteServicePrioritiesById(id) {
        return this.request({
            path: `/service/priorities/${id}`,
            method: 'delete',
        });
    }
    putServicePrioritiesById(id, priority) {
        return this.request({
            path: `/service/priorities/${id}`,
            method: 'put',
            data: priority,
        });
    }
    patchServicePrioritiesById(id, patchOperations) {
        return this.request({
            path: `/service/priorities/${id}`,
            method: 'patch',
            data: patchOperations,
        });
    }
    getServicePrioritiesByIdImage(id, useDefaultFlag, lastModified, params = {}) {
        return this.request({
            path: `/service/priorities/${id}/image`,
            method: 'get',
            params,
        });
    }
    getServicePrioritiesByIdUsages(id, params = {}) {
        return this.request({
            path: `/service/priorities/${id}/usages`,
            method: 'get',
            params,
        });
    }
    getServicePrioritiesByIdUsagesList(id, params = {}) {
        return this.request({
            path: `/service/priorities/${id}/usages/list`,
            method: 'get',
            params,
        });
    }
    getServicePrioritiesCount(params = {}) {
        return this.request({
            path: `/service/priorities/count`,
            method: 'get',
            params,
        });
    }
    getServicePriorityByIdInfo(id, params = {}) {
        return this.request({
            path: `/service/priority/${id}/info`,
            method: 'get',
            params,
        });
    }
    getServicePriorityInfo(params = {}) {
        return this.request({
            path: `/service/priority/info`,
            method: 'get',
            params,
        });
    }
    getServiceSchedulingMembersByIdInfo(id, params = {}) {
        return this.request({
            path: `/service/scheduling/members/${id}/info`,
            method: 'get',
            params,
        });
    }
    getServiceSchedulingMembersInfo(params = {}) {
        return this.request({
            path: `/service/scheduling/members/info`,
            method: 'get',
            params,
        });
    }
    getServiceSchedulingMembersInfoCount(params = {}) {
        return this.request({
            path: `/service/scheduling/members/info/count`,
            method: 'get',
            params,
        });
    }
    getServiceServiceSignoff(params = {}) {
        return this.request({
            path: `/service/serviceSignoff`,
            method: 'get',
            params,
        });
    }
    postServiceServiceSignoff(serviceSignoff) {
        return this.request({
            path: `/service/serviceSignoff`,
            method: 'post',
            data: serviceSignoff,
        });
    }
    getServiceServiceSignoffById(id, params = {}) {
        return this.request({
            path: `/service/serviceSignoff/${id}`,
            method: 'get',
            params,
        });
    }
    deleteServiceServiceSignoffById(id) {
        return this.request({
            path: `/service/serviceSignoff/${id}`,
            method: 'delete',
        });
    }
    putServiceServiceSignoffById(id, serviceSignoff) {
        return this.request({
            path: `/service/serviceSignoff/${id}`,
            method: 'put',
            data: serviceSignoff,
        });
    }
    patchServiceServiceSignoffById(id, patchOperations) {
        return this.request({
            path: `/service/serviceSignoff/${id}`,
            method: 'patch',
            data: patchOperations,
        });
    }
    getServiceServiceSignoffByIdInfo(id, params = {}) {
        return this.request({
            path: `/service/serviceSignoff/${id}/info`,
            method: 'get',
            params,
        });
    }
    getServiceServiceSignoffByIdUsages(id, params = {}) {
        return this.request({
            path: `/service/serviceSignoff/${id}/usages`,
            method: 'get',
            params,
        });
    }
    getServiceServiceSignoffByIdUsagesList(id, params = {}) {
        return this.request({
            path: `/service/serviceSignoff/${id}/usages/list`,
            method: 'get',
            params,
        });
    }
    getServiceServiceSignoffCount(params = {}) {
        return this.request({
            path: `/service/serviceSignoff/count`,
            method: 'get',
            params,
        });
    }
    getServiceServiceSignoffInfo(params = {}) {
        return this.request({
            path: `/service/serviceSignoff/info`,
            method: 'get',
            params,
        });
    }
    getServiceServiceSignoffInfoCount(params = {}) {
        return this.request({
            path: `/service/serviceSignoff/info/count`,
            method: 'get',
            params,
        });
    }
    getServiceSeverities(params = {}) {
        return this.request({
            path: `/service/severities`,
            method: 'get',
            params,
        });
    }
    getServiceSeveritiesById(id, params = {}) {
        return this.request({
            path: `/service/severities/${id}`,
            method: 'get',
            params,
        });
    }
    putServiceSeveritiesById(id, severity) {
        return this.request({
            path: `/service/severities/${id}`,
            method: 'put',
            data: severity,
        });
    }
    patchServiceSeveritiesById(id, patchOperations) {
        return this.request({
            path: `/service/severities/${id}`,
            method: 'patch',
            data: patchOperations,
        });
    }
    getServiceSeveritiesCount(params = {}) {
        return this.request({
            path: `/service/severities/count`,
            method: 'get',
            params,
        });
    }
    getServiceSlainfoByIdInfo(id, params = {}) {
        return this.request({
            path: `/service/slainfo/${id}/info`,
            method: 'get',
            params,
        });
    }
    getServiceSlainfoInfo(params = {}) {
        return this.request({
            path: `/service/slainfo/info`,
            method: 'get',
            params,
        });
    }
    getServiceSLAs(params = {}) {
        return this.request({
            path: `/service/SLAs`,
            method: 'get',
            params,
        });
    }
    postServiceSLAs(sLA) {
        return this.request({
            path: `/service/SLAs`,
            method: 'post',
            data: sLA,
        });
    }
    getServiceSLAsById(id, params = {}) {
        return this.request({
            path: `/service/SLAs/${id}`,
            method: 'get',
            params,
        });
    }
    deleteServiceSLAsById(id) {
        return this.request({
            path: `/service/SLAs/${id}`,
            method: 'delete',
        });
    }
    putServiceSLAsById(id, sLA) {
        return this.request({
            path: `/service/SLAs/${id}`,
            method: 'put',
            data: sLA,
        });
    }
    patchServiceSLAsById(id, patchOperations) {
        return this.request({
            path: `/service/SLAs/${id}`,
            method: 'patch',
            data: patchOperations,
        });
    }
    getServiceSLAsByIdUsages(id, params = {}) {
        return this.request({
            path: `/service/SLAs/${id}/usages`,
            method: 'get',
            params,
        });
    }
    getServiceSLAsByIdUsagesList(id, params = {}) {
        return this.request({
            path: `/service/SLAs/${id}/usages/list`,
            method: 'get',
            params,
        });
    }
    getServiceSLAsByParentIdPriorities(parentId, params = {}) {
        return this.request({
            path: `/service/SLAs/${parentId}/priorities`,
            method: 'get',
            params,
        });
    }
    postServiceSLAsByParentIdPriorities(parentId, sLAPriority) {
        return this.request({
            path: `/service/SLAs/${parentId}/priorities`,
            method: 'post',
            data: sLAPriority,
        });
    }
    getServiceSLAsByParentIdPrioritiesById(id, parentId, params = {}) {
        return this.request({
            path: `/service/SLAs/${parentId}/priorities/${id}`,
            method: 'get',
            params,
        });
    }
    deleteServiceSLAsByParentIdPrioritiesById(id, parentId) {
        return this.request({
            path: `/service/SLAs/${parentId}/priorities/${id}`,
            method: 'delete',
        });
    }
    putServiceSLAsByParentIdPrioritiesById(id, parentId, sLAPriority) {
        return this.request({
            path: `/service/SLAs/${parentId}/priorities/${id}`,
            method: 'put',
            data: sLAPriority,
        });
    }
    patchServiceSLAsByParentIdPrioritiesById(id, parentId, patchOperations) {
        return this.request({
            path: `/service/SLAs/${parentId}/priorities/${id}`,
            method: 'patch',
            data: patchOperations,
        });
    }
    getServiceSLAsByParentIdPrioritiesCount(parentId, params = {}) {
        return this.request({
            path: `/service/SLAs/${parentId}/priorities/count`,
            method: 'get',
            params,
        });
    }
    getServiceSLAsCount(params = {}) {
        return this.request({
            path: `/service/SLAs/count`,
            method: 'get',
            params,
        });
    }
    getServiceSLAsInfoCount(params = {}) {
        return this.request({
            path: `/service/SLAs/info/count`,
            method: 'get',
            params,
        });
    }
    getServiceSources(params = {}) {
        return this.request({
            path: `/service/sources`,
            method: 'get',
            params,
        });
    }
    postServiceSources(source) {
        return this.request({
            path: `/service/sources`,
            method: 'post',
            data: source,
        });
    }
    getServiceSourcesById(id, params = {}) {
        return this.request({
            path: `/service/sources/${id}`,
            method: 'get',
            params,
        });
    }
    deleteServiceSourcesById(id) {
        return this.request({
            path: `/service/sources/${id}`,
            method: 'delete',
        });
    }
    putServiceSourcesById(id, source) {
        return this.request({
            path: `/service/sources/${id}`,
            method: 'put',
            data: source,
        });
    }
    patchServiceSourcesById(id, patchOperations) {
        return this.request({
            path: `/service/sources/${id}`,
            method: 'patch',
            data: patchOperations,
        });
    }
    getServiceSourcesByIdInfo(id, params = {}) {
        return this.request({
            path: `/service/sources/${id}/info`,
            method: 'get',
            params,
        });
    }
    getServiceSourcesByIdUsages(id, params = {}) {
        return this.request({
            path: `/service/sources/${id}/usages`,
            method: 'get',
            params,
        });
    }
    getServiceSourcesByIdUsagesList(id, params = {}) {
        return this.request({
            path: `/service/sources/${id}/usages/list`,
            method: 'get',
            params,
        });
    }
    getServiceSourcesCount(params = {}) {
        return this.request({
            path: `/service/sources/count`,
            method: 'get',
            params,
        });
    }
    getServiceSourcesInfo(params = {}) {
        return this.request({
            path: `/service/sources/info`,
            method: 'get',
            params,
        });
    }
    getServiceSourcesInfoCount(params = {}) {
        return this.request({
            path: `/service/sources/info/count`,
            method: 'get',
            params,
        });
    }
    getServiceSurveys(params = {}) {
        return this.request({
            path: `/service/surveys`,
            method: 'get',
            params,
        });
    }
    postServiceSurveys(survey) {
        return this.request({
            path: `/service/surveys`,
            method: 'post',
            data: survey,
        });
    }
    getServiceSurveysByGrandparentIdQuestionsByParentIdOptions(parentId, grandparentId, params = {}) {
        return this.request({
            path: `/service/surveys/${grandparentId}/questions/${parentId}/options`,
            method: 'get',
            params,
        });
    }
    postServiceSurveysByGrandparentIdQuestionsByParentIdOptions(parentId, grandparentId, surveyOption) {
        return this.request({
            path: `/service/surveys/${grandparentId}/questions/${parentId}/options`,
            method: 'post',
            data: surveyOption,
        });
    }
    getServiceSurveysByGrandparentIdQuestionsByParentIdOptionsById(id, parentId, grandparentId, params = {}) {
        return this.request({
            path: `/service/surveys/${grandparentId}/questions/${parentId}/options/${id}`,
            method: 'get',
            params,
        });
    }
    deleteServiceSurveysByGrandparentIdQuestionsByParentIdOptionsById(id, parentId, grandparentId) {
        return this.request({
            path: `/service/surveys/${grandparentId}/questions/${parentId}/options/${id}`,
            method: 'delete',
        });
    }
    putServiceSurveysByGrandparentIdQuestionsByParentIdOptionsById(id, parentId, grandparentId, surveyOption) {
        return this.request({
            path: `/service/surveys/${grandparentId}/questions/${parentId}/options/${id}`,
            method: 'put',
            data: surveyOption,
        });
    }
    patchServiceSurveysByGrandparentIdQuestionsByParentIdOptionsById(id, parentId, grandparentId, patchOperations) {
        return this.request({
            path: `/service/surveys/${grandparentId}/questions/${parentId}/options/${id}`,
            method: 'patch',
            data: patchOperations,
        });
    }
    getServiceSurveysByGrandparentIdQuestionsByParentIdOptionsCount(parentId, grandparentId, params = {}) {
        return this.request({
            path: `/service/surveys/${grandparentId}/questions/${parentId}/options/count`,
            method: 'get',
            params,
        });
    }
    getServiceSurveysById(id, params = {}) {
        return this.request({
            path: `/service/surveys/${id}`,
            method: 'get',
            params,
        });
    }
    deleteServiceSurveysById(id) {
        return this.request({
            path: `/service/surveys/${id}`,
            method: 'delete',
        });
    }
    putServiceSurveysById(id, survey) {
        return this.request({
            path: `/service/surveys/${id}`,
            method: 'put',
            data: survey,
        });
    }
    patchServiceSurveysById(id, patchOperations) {
        return this.request({
            path: `/service/surveys/${id}`,
            method: 'patch',
            data: patchOperations,
        });
    }
    postServiceSurveysByIdCopy(id) {
        return this.request({
            path: `/service/surveys/${id}/copy`,
            method: 'post',
        });
    }
    getServiceSurveysByIdUsages(id, params = {}) {
        return this.request({
            path: `/service/surveys/${id}/usages`,
            method: 'get',
            params,
        });
    }
    getServiceSurveysByIdUsagesList(id, params = {}) {
        return this.request({
            path: `/service/surveys/${id}/usages/list`,
            method: 'get',
            params,
        });
    }
    getServiceSurveysByParentIdQuestions(parentId, params = {}) {
        return this.request({
            path: `/service/surveys/${parentId}/questions`,
            method: 'get',
            params,
        });
    }
    postServiceSurveysByParentIdQuestions(parentId, serviceSurveyQuestion) {
        return this.request({
            path: `/service/surveys/${parentId}/questions`,
            method: 'post',
            data: serviceSurveyQuestion,
        });
    }
    getServiceSurveysByParentIdQuestionsById(id, parentId, params = {}) {
        return this.request({
            path: `/service/surveys/${parentId}/questions/${id}`,
            method: 'get',
            params,
        });
    }
    deleteServiceSurveysByParentIdQuestionsById(id, parentId) {
        return this.request({
            path: `/service/surveys/${parentId}/questions/${id}`,
            method: 'delete',
        });
    }
    putServiceSurveysByParentIdQuestionsById(id, parentId, serviceSurveyQuestion) {
        return this.request({
            path: `/service/surveys/${parentId}/questions/${id}`,
            method: 'put',
            data: serviceSurveyQuestion,
        });
    }
    patchServiceSurveysByParentIdQuestionsById(id, parentId, patchOperations) {
        return this.request({
            path: `/service/surveys/${parentId}/questions/${id}`,
            method: 'patch',
            data: patchOperations,
        });
    }
    postServiceSurveysByParentIdQuestionsByIdCopy(id, parentId) {
        return this.request({
            path: `/service/surveys/${parentId}/questions/${id}/copy`,
            method: 'post',
        });
    }
    getServiceSurveysByParentIdQuestionsCount(parentId, params = {}) {
        return this.request({
            path: `/service/surveys/${parentId}/questions/count`,
            method: 'get',
            params,
        });
    }
    getServiceSurveysByParentIdResults(parentId, params = {}) {
        return this.request({
            path: `/service/surveys/${parentId}/results`,
            method: 'get',
            params,
        });
    }
    postServiceSurveysByParentIdResults(parentId, surveyResult) {
        return this.request({
            path: `/service/surveys/${parentId}/results`,
            method: 'post',
            data: surveyResult,
        });
    }
    getServiceSurveysByParentIdResultsById(id, parentId, params = {}) {
        return this.request({
            path: `/service/surveys/${parentId}/results/${id}`,
            method: 'get',
            params,
        });
    }
    deleteServiceSurveysByParentIdResultsById(id, parentId) {
        return this.request({
            path: `/service/surveys/${parentId}/results/${id}`,
            method: 'delete',
        });
    }
    putServiceSurveysByParentIdResultsById(id, parentId, surveyResult) {
        return this.request({
            path: `/service/surveys/${parentId}/results/${id}`,
            method: 'put',
            data: surveyResult,
        });
    }
    patchServiceSurveysByParentIdResultsById(id, parentId, patchOperations) {
        return this.request({
            path: `/service/surveys/${parentId}/results/${id}`,
            method: 'patch',
            data: patchOperations,
        });
    }
    getServiceSurveysByParentIdResultsCount(parentId, params = {}) {
        return this.request({
            path: `/service/surveys/${parentId}/results/count`,
            method: 'get',
            params,
        });
    }
    getServiceSurveysCount(params = {}) {
        return this.request({
            path: `/service/surveys/count`,
            method: 'get',
            params,
        });
    }
    postServiceTeamMembers(teamMember) {
        return this.request({
            path: `/service/teamMembers`,
            method: 'post',
            data: teamMember,
        });
    }
    getServiceTeams(params = {}) {
        return this.request({
            path: `/service/teams`,
            method: 'get',
            params,
        });
    }
    getServiceTeamsById(id, params = {}) {
        return this.request({
            path: `/service/teams/${id}`,
            method: 'get',
            params,
        });
    }
    getServiceTeamsCount(params = {}) {
        return this.request({
            path: `/service/teams/count`,
            method: 'get',
            params,
        });
    }
    getServiceTemplates(params = {}) {
        return this.request({
            path: `/service/templates`,
            method: 'get',
            params,
        });
    }
    getServiceTemplatesById(id, params = {}) {
        return this.request({
            path: `/service/templates/${id}`,
            method: 'get',
            params,
        });
    }
    postServiceTemplatesByIdGenerate(id) {
        return this.request({
            path: `/service/templates/${id}/generate`,
            method: 'post',
        });
    }
    getServiceTemplatesByIdInfo(id, params = {}) {
        return this.request({
            path: `/service/templates/${id}/info`,
            method: 'get',
            params,
        });
    }
    getServiceTemplatesCount(params = {}) {
        return this.request({
            path: `/service/templates/count`,
            method: 'get',
            params,
        });
    }
    getServiceTemplatesInfo(params = {}) {
        return this.request({
            path: `/service/templates/info`,
            method: 'get',
            params,
        });
    }
    getServiceTemplatesInfoCount(params = {}) {
        return this.request({
            path: `/service/templates/info/count`,
            method: 'get',
            params,
        });
    }
    getServiceTicketLinks(params = {}) {
        return this.request({
            path: `/service/ticketLinks`,
            method: 'get',
            params,
        });
    }
    postServiceTicketLinks(serviceTicketLink) {
        return this.request({
            path: `/service/ticketLinks`,
            method: 'post',
            data: serviceTicketLink,
        });
    }
    getServiceTicketLinksById(id, params = {}) {
        return this.request({
            path: `/service/ticketLinks/${id}`,
            method: 'get',
            params,
        });
    }
    deleteServiceTicketLinksById(id) {
        return this.request({
            path: `/service/ticketLinks/${id}`,
            method: 'delete',
        });
    }
    putServiceTicketLinksById(id, serviceTicketLink) {
        return this.request({
            path: `/service/ticketLinks/${id}`,
            method: 'put',
            data: serviceTicketLink,
        });
    }
    patchServiceTicketLinksById(id, patchOperations) {
        return this.request({
            path: `/service/ticketLinks/${id}`,
            method: 'patch',
            data: patchOperations,
        });
    }
    getServiceTicketLinksByIdInfo(id, params = {}) {
        return this.request({
            path: `/service/ticketLinks/${id}/info`,
            method: 'get',
            params,
        });
    }
    getServiceTicketLinksCount(params = {}) {
        return this.request({
            path: `/service/ticketLinks/count`,
            method: 'get',
            params,
        });
    }
    getServiceTicketLinksInfo(params = {}) {
        return this.request({
            path: `/service/ticketLinks/info`,
            method: 'get',
            params,
        });
    }
    getServiceTicketLinksInfoCount(params = {}) {
        return this.request({
            path: `/service/ticketLinks/info/count`,
            method: 'get',
            params,
        });
    }
    getServiceTickets(params = {}) {
        return this.request({
            path: `/service/tickets`,
            method: 'get',
            params,
        });
    }
    postServiceTickets(ticket) {
        return this.request({
            path: `/service/tickets`,
            method: 'post',
            data: ticket,
        });
    }
    getServiceTicketsById(id, params = {}) {
        return this.request({
            path: `/service/tickets/${id}`,
            method: 'get',
            params,
        });
    }
    deleteServiceTicketsById(id) {
        return this.request({
            path: `/service/tickets/${id}`,
            method: 'delete',
        });
    }
    putServiceTicketsById(id, ticket) {
        return this.request({
            path: `/service/tickets/${id}`,
            method: 'put',
            data: ticket,
        });
    }
    patchServiceTicketsById(id, patchOperations) {
        return this.request({
            path: `/service/tickets/${id}`,
            method: 'patch',
            data: patchOperations,
        });
    }
    getServiceTicketsByIdInfo(id, params = {}) {
        return this.request({
            path: `/service/tickets/${id}/info`,
            method: 'get',
            params,
        });
    }
    getServiceTicketsByParentIdActivities(parentId, params = {}) {
        return this.request({
            path: `/service/tickets/${parentId}/activities`,
            method: 'get',
            params,
        });
    }
    getServiceTicketsByParentIdActivitiesCount(parentId, params = {}) {
        return this.request({
            path: `/service/tickets/${parentId}/activities/count`,
            method: 'get',
            params,
        });
    }
    getServiceTicketsByParentIdAllNotes(parentId, params = {}) {
        return this.request({
            path: `/service/tickets/${parentId}/allNotes`,
            method: 'get',
            params,
        });
    }
    postServiceTicketsByParentIdAttachChildren(parentId, bundle) {
        return this.request({
            path: `/service/tickets/${parentId}/attachChildren`,
            method: 'post',
            data: bundle,
        });
    }
    getServiceTicketsByParentIdConfigurations(parentId, params = {}) {
        return this.request({
            path: `/service/tickets/${parentId}/configurations`,
            method: 'get',
            params,
        });
    }
    postServiceTicketsByParentIdConfigurations(parentId, configuration) {
        return this.request({
            path: `/service/tickets/${parentId}/configurations`,
            method: 'post',
            data: configuration,
        });
    }
    getServiceTicketsByParentIdConfigurationsById(id, parentId, params = {}) {
        return this.request({
            path: `/service/tickets/${parentId}/configurations/${id}`,
            method: 'get',
            params,
        });
    }
    deleteServiceTicketsByParentIdConfigurationsById(id, parentId) {
        return this.request({
            path: `/service/tickets/${parentId}/configurations/${id}`,
            method: 'delete',
        });
    }
    getServiceTicketsByParentIdConfigurationsCount(parentId, params = {}) {
        return this.request({
            path: `/service/tickets/${parentId}/configurations/count`,
            method: 'get',
            params,
        });
    }
    postServiceTicketsByParentIdConvert(parentId, conversion) {
        return this.request({
            path: `/service/tickets/${parentId}/convert`,
            method: 'post',
            data: conversion,
        });
    }
    getServiceTicketsByParentIdDocuments(parentId, params = {}) {
        return this.request({
            path: `/service/tickets/${parentId}/documents`,
            method: 'get',
            params,
        });
    }
    getServiceTicketsByParentIdDocumentsCount(parentId, params = {}) {
        return this.request({
            path: `/service/tickets/${parentId}/documents/count`,
            method: 'get',
            params,
        });
    }
    postServiceTicketsByParentIdMerge(parentId, merge) {
        return this.request({
            path: `/service/tickets/${parentId}/merge`,
            method: 'post',
            data: merge,
        });
    }
    getServiceTicketsByParentIdNotes(parentId, params = {}) {
        return this.request({
            path: `/service/tickets/${parentId}/notes`,
            method: 'get',
            params,
        });
    }
    postServiceTicketsByParentIdNotes(parentId, serviceNote) {
        return this.request({
            path: `/service/tickets/${parentId}/notes`,
            method: 'post',
            data: serviceNote,
        });
    }
    getServiceTicketsByParentIdNotesById(id, parentId, params = {}) {
        return this.request({
            path: `/service/tickets/${parentId}/notes/${id}`,
            method: 'get',
            params,
        });
    }
    deleteServiceTicketsByParentIdNotesById(id, parentId) {
        return this.request({
            path: `/service/tickets/${parentId}/notes/${id}`,
            method: 'delete',
        });
    }
    putServiceTicketsByParentIdNotesById(id, parentId, serviceNote) {
        return this.request({
            path: `/service/tickets/${parentId}/notes/${id}`,
            method: 'put',
            data: serviceNote,
        });
    }
    patchServiceTicketsByParentIdNotesById(id, parentId, patchOperations) {
        return this.request({
            path: `/service/tickets/${parentId}/notes/${id}`,
            method: 'patch',
            data: patchOperations,
        });
    }
    getServiceTicketsByParentIdNotesCount(parentId, params = {}) {
        return this.request({
            path: `/service/tickets/${parentId}/notes/count`,
            method: 'get',
            params,
        });
    }
    getServiceTicketsByParentIdProducts(parentId, params = {}) {
        return this.request({
            path: `/service/tickets/${parentId}/products`,
            method: 'get',
            params,
        });
    }
    getServiceTicketsByParentIdProductsCount(parentId, params = {}) {
        return this.request({
            path: `/service/tickets/${parentId}/products/count`,
            method: 'get',
            params,
        });
    }
    getServiceTicketsByParentIdScheduleentries(parentId, params = {}) {
        return this.request({
            path: `/service/tickets/${parentId}/scheduleentries`,
            method: 'get',
            params,
        });
    }
    getServiceTicketsByParentIdScheduleentriesCount(parentId, params = {}) {
        return this.request({
            path: `/service/tickets/${parentId}/scheduleentries/count`,
            method: 'get',
            params,
        });
    }
    getServiceTicketsByParentIdTasks(parentId, params = {}) {
        return this.request({
            path: `/service/tickets/${parentId}/tasks`,
            method: 'get',
            params,
        });
    }
    postServiceTicketsByParentIdTasks(parentId, task) {
        return this.request({
            path: `/service/tickets/${parentId}/tasks`,
            method: 'post',
            data: task,
        });
    }
    getServiceTicketsByParentIdTasksById(id, parentId, params = {}) {
        return this.request({
            path: `/service/tickets/${parentId}/tasks/${id}`,
            method: 'get',
            params,
        });
    }
    deleteServiceTicketsByParentIdTasksById(id, parentId) {
        return this.request({
            path: `/service/tickets/${parentId}/tasks/${id}`,
            method: 'delete',
        });
    }
    putServiceTicketsByParentIdTasksById(id, parentId, task) {
        return this.request({
            path: `/service/tickets/${parentId}/tasks/${id}`,
            method: 'put',
            data: task,
        });
    }
    patchServiceTicketsByParentIdTasksById(id, parentId, patchOperations) {
        return this.request({
            path: `/service/tickets/${parentId}/tasks/${id}`,
            method: 'patch',
            data: patchOperations,
        });
    }
    getServiceTicketsByParentIdTasksCount(parentId, params = {}) {
        return this.request({
            path: `/service/tickets/${parentId}/tasks/count`,
            method: 'get',
            params,
        });
    }
    getServiceTicketsByParentIdTimeentries(parentId, params = {}) {
        return this.request({
            path: `/service/tickets/${parentId}/timeentries`,
            method: 'get',
            params,
        });
    }
    getServiceTicketsByParentIdTimeentriesCount(parentId, params = {}) {
        return this.request({
            path: `/service/tickets/${parentId}/timeentries/count`,
            method: 'get',
            params,
        });
    }
    getServiceTicketsCount(params = {}) {
        return this.request({
            path: `/service/tickets/count`,
            method: 'get',
            params,
        });
    }
    getServiceTicketsInfo(params = {}) {
        return this.request({
            path: `/service/tickets/info`,
            method: 'get',
            params,
        });
    }
    getServiceTicketsInfoCount(params = {}) {
        return this.request({
            path: `/service/tickets/info/count`,
            method: 'get',
            params,
        });
    }
    postServiceTicketsSearch(filterValues) {
        return this.request({
            path: `/service/tickets/search`,
            method: 'post',
            data: filterValues,
        });
    }
    getServiceTicketSyncs(params = {}) {
        return this.request({
            path: `/service/ticketSyncs`,
            method: 'get',
            params,
        });
    }
    postServiceTicketSyncs(ticketSync) {
        return this.request({
            path: `/service/ticketSyncs`,
            method: 'post',
            data: ticketSync,
        });
    }
    getServiceTicketSyncsById(id, params = {}) {
        return this.request({
            path: `/service/ticketSyncs/${id}`,
            method: 'get',
            params,
        });
    }
    deleteServiceTicketSyncsById(id) {
        return this.request({
            path: `/service/ticketSyncs/${id}`,
            method: 'delete',
        });
    }
    putServiceTicketSyncsById(id, ticketSync) {
        return this.request({
            path: `/service/ticketSyncs/${id}`,
            method: 'put',
            data: ticketSync,
        });
    }
    patchServiceTicketSyncsById(id, patchOperations) {
        return this.request({
            path: `/service/ticketSyncs/${id}`,
            method: 'patch',
            data: patchOperations,
        });
    }
    getServiceTicketSyncsCount(params = {}) {
        return this.request({
            path: `/service/ticketSyncs/count`,
            method: 'get',
            params,
        });
    }
}
exports.ServiceAPI = ServiceAPI;
//# sourceMappingURL=ServiceAPI.js.map