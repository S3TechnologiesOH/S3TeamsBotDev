import Manage from '../Manage';
import { components } from '../ManageTypes';
import { CommonParameters, CWMOptions } from '../ManageAPI';
import { NoContentResponse, OctetStreamResponse, HTMLResponse } from '../types';
declare type schemas = components['schemas'];
/** {@link AllowedFileType} */
export declare type AllowedFileType = schemas['AllowedFileType'];
/** {@link AllowedOrigin} */
export declare type AllowedOrigin = schemas['AllowedOrigin'];
/** {@link ApiMember} */
export declare type ApiMember = schemas['ApiMember'];
/** {@link AuditTrailEntry} */
export declare type AuditTrailEntry = schemas['AuditTrailEntry'];
/** {@link AuthAnvil} */
export declare type AuthAnvil = schemas['AuthAnvil'];
/** {@link AutoSyncTime} */
export declare type AutoSyncTime = schemas['AutoSyncTime'];
/** {@link BulkResult} */
export declare type BulkResult = schemas['BulkResult'];
/** {@link BundleRequestsCollection} */
export declare type BundleRequestsCollection = schemas['BundleRequestsCollection'];
/** {@link BundleResultsCollection} */
export declare type BundleResultsCollection = schemas['BundleResultsCollection'];
/** {@link CallbackEntry} */
export declare type CallbackEntry = schemas['CallbackEntry'];
/** {@link Certification} */
export declare type Certification = schemas['Certification'];
/** {@link ConnectWiseHostedScreen} */
export declare type ConnectWiseHostedScreen = schemas['ConnectWiseHostedScreen'];
/** {@link ConnectWiseHostedSetup} */
export declare type ConnectWiseHostedSetup = schemas['ConnectWiseHostedSetup'];
/** {@link CorporateStructure} */
export declare type CorporateStructure = schemas['CorporateStructure'];
/** {@link CorporateStructureInfo} */
export declare type CorporateStructureInfo = schemas['CorporateStructureInfo'];
/** {@link CorporateStructureLevel} */
export declare type CorporateStructureLevel = schemas['CorporateStructureLevel'];
/** {@link Count} */
export declare type Count = schemas['Count'];
/** {@link Crm} */
export declare type Crm = schemas['Crm'];
/** {@link CrmInfo} */
export declare type CrmInfo = schemas['CrmInfo'];
/** {@link CustomReport} */
export declare type CustomReport = schemas['CustomReport'];
/** {@link CustomReportParameter} */
export declare type CustomReportParameter = schemas['CustomReportParameter'];
/** {@link CwTimeZone} */
export declare type CwTimeZone = schemas['CwTimeZone'];
/** {@link Department} */
export declare type Department = schemas['Department'];
/** {@link DepartmentInfo} */
export declare type DepartmentInfo = schemas['DepartmentInfo'];
/** {@link DepartmentLocation} */
export declare type DepartmentLocation = schemas['DepartmentLocation'];
/** {@link DepartmentLocationInfo} */
export declare type DepartmentLocationInfo = schemas['DepartmentLocationInfo'];
/** {@link DocumentFormData} */
export declare type DocumentFormData = schemas['DocumentFormData'];
/** {@link DocumentInfo} */
export declare type DocumentInfo = schemas['DocumentInfo'];
/** {@link DocumentSetup} */
export declare type DocumentSetup = schemas['DocumentSetup'];
/** {@link EPayConfiguration} */
export declare type EPayConfiguration = schemas['EPayConfiguration'];
/** {@link EmailConnector} */
export declare type EmailConnector = schemas['EmailConnector'];
/** {@link EmailConnectorInfo} */
export declare type EmailConnectorInfo = schemas['EmailConnectorInfo'];
/** {@link EmailConnectorParsingRule} */
export declare type EmailConnectorParsingRule = schemas['EmailConnectorParsingRule'];
/** {@link EmailConnectorParsingStyle} */
export declare type EmailConnectorParsingStyle = schemas['EmailConnectorParsingStyle'];
/** {@link EmailExclusion} */
export declare type EmailExclusion = schemas['EmailExclusion'];
/** {@link EmailToken} */
export declare type EmailToken = schemas['EmailToken'];
/** {@link Experiment} */
export declare type Experiment = schemas['Experiment'];
/** {@link FileUploadSetting} */
export declare type FileUploadSetting = schemas['FileUploadSetting'];
/** {@link GoogleEmailSetup} */
export declare type GoogleEmailSetup = schemas['GoogleEmailSetup'];
/** {@link IdCollection} */
export declare type IdCollection = schemas['IdCollection'];
/** {@link Imap} */
export declare type Imap = schemas['Imap'];
/** {@link ImapInfo} */
export declare type ImapInfo = schemas['ImapInfo'];
/** {@link ImportMassMaintenance} */
export declare type ImportMassMaintenance = schemas['ImportMassMaintenance'];
/** {@link InOutBoard} */
export declare type InOutBoard = schemas['InOutBoard'];
/** {@link InOutType} */
export declare type InOutType = schemas['InOutType'];
/** {@link InOutTypeInfo} */
export declare type InOutTypeInfo = schemas['InOutTypeInfo'];
/** {@link Info} */
export declare type Info = schemas['Info'];
/** {@link IntegratorLogin} */
export declare type IntegratorLogin = schemas['IntegratorLogin'];
/** {@link IntegratorTag} */
export declare type IntegratorTag = schemas['IntegratorTag'];
/** {@link KPI} */
export declare type KPI = schemas['KPI'];
/** {@link KPICategory} */
export declare type KPICategory = schemas['KPICategory'];
/** {@link LdapConfiguration} */
export declare type LdapConfiguration = schemas['LdapConfiguration'];
/** {@link LdapConfigurationInfo} */
export declare type LdapConfigurationInfo = schemas['LdapConfigurationInfo'];
/** {@link LdapConfigurationTestLink} */
export declare type LdapConfigurationTestLink = schemas['LdapConfigurationTestLink'];
/** {@link Link} */
export declare type Link = schemas['Link'];
/** {@link LinkInfo} */
export declare type LinkInfo = schemas['LinkInfo'];
/** {@link LinkResolveUrlInfo} */
export declare type LinkResolveUrlInfo = schemas['LinkResolveUrlInfo'];
/** {@link LocaleInfo} */
export declare type LocaleInfo = schemas['LocaleInfo'];
/** {@link Location} */
export declare type Location = schemas['Location'];
/** {@link LocationDepartment} */
export declare type LocationDepartment = schemas['LocationDepartment'];
/** {@link LocationInfo} */
export declare type LocationInfo = schemas['LocationInfo'];
/** {@link LocationWorkRole} */
export declare type LocationWorkRole = schemas['LocationWorkRole'];
/** {@link ManagedDeviceAccount} */
export declare type ManagedDeviceAccount = schemas['ManagedDeviceAccount'];
/** {@link ManagementNetworkSecurity} */
export declare type ManagementNetworkSecurity = schemas['ManagementNetworkSecurity'];
/** {@link MarketplaceImport} */
export declare type MarketplaceImport = schemas['MarketplaceImport'];
/** {@link Member} */
export declare type Member = schemas['Member'];
/** {@link MemberAccrual} */
export declare type MemberAccrual = schemas['MemberAccrual'];
/** {@link MemberCertification} */
export declare type MemberCertification = schemas['MemberCertification'];
/** {@link MemberDeactivation} */
export declare type MemberDeactivation = schemas['MemberDeactivation'];
/** {@link MemberDelegation} */
export declare type MemberDelegation = schemas['MemberDelegation'];
/** {@link MemberInfo} */
export declare type MemberInfo = schemas['MemberInfo'];
/** {@link MemberLinkSsoUser} */
export declare type MemberLinkSsoUser = schemas['MemberLinkSsoUser'];
/** {@link MemberNotificationSetting} */
export declare type MemberNotificationSetting = schemas['MemberNotificationSetting'];
/** {@link MemberPersona} */
export declare type MemberPersona = schemas['MemberPersona'];
/** {@link MemberSkill} */
export declare type MemberSkill = schemas['MemberSkill'];
/** {@link MemberSsoToken} */
export declare type MemberSsoToken = schemas['MemberSsoToken'];
/** {@link MemberType} */
export declare type MemberType = schemas['MemberType'];
/** {@link MemberTypeInfo} */
export declare type MemberTypeInfo = schemas['MemberTypeInfo'];
/** {@link MenuEntry} */
export declare type MenuEntry = schemas['MenuEntry'];
/** {@link MenuEntryLocation} */
export declare type MenuEntryLocation = schemas['MenuEntryLocation'];
/** {@link MyAccount} */
export declare type MyAccount = schemas['MyAccount'];
/** {@link MyMember} */
export declare type MyMember = schemas['MyMember'];
/** {@link MyMemberInfo} */
export declare type MyMemberInfo = schemas['MyMemberInfo'];
/** {@link MySecurity} */
export declare type MySecurity = schemas['MySecurity'];
/** {@link MySecurityCustomizeItem} */
export declare type MySecurityCustomizeItem = schemas['MySecurityCustomizeItem'];
/** {@link NotificationRecipient} */
export declare type NotificationRecipient = schemas['NotificationRecipient'];
/** {@link Office365EmailSetup} */
export declare type Office365EmailSetup = schemas['Office365EmailSetup'];
/** {@link OsGradeWeight} */
export declare type OsGradeWeight = schemas['OsGradeWeight'];
/** {@link Other} */
export declare type Other = schemas['Other'];
/** {@link ParsingType} */
export declare type ParsingType = schemas['ParsingType'];
/** {@link ParsingVariable} */
export declare type ParsingVariable = schemas['ParsingVariable'];
/** {@link PatchOperation} */
export declare type PatchOperation = schemas['PatchOperation'];
/** {@link PersonasInfo} */
export declare type PersonasInfo = schemas['PersonasInfo'];
/** {@link PortalReport} */
export declare type PortalReport = schemas['PortalReport'];
/** {@link QuoteLink} */
export declare type QuoteLink = schemas['QuoteLink'];
/** {@link Report} */
export declare type Report = schemas['Report'];
/** {@link ReportCard} */
export declare type ReportCard = schemas['ReportCard'];
/** {@link ReportCardDetail} */
export declare type ReportCardDetail = schemas['ReportCardDetail'];
/** {@link ReportCardInfo} */
export declare type ReportCardInfo = schemas['ReportCardInfo'];
/** {@link ReportColumnDefinition} */
export declare type ReportColumnDefinition = schemas['ReportColumnDefinition'];
/** {@link ReportDataResponse} */
export declare type ReportDataResponse = schemas['ReportDataResponse'];
/** {@link ReportingService} */
export declare type ReportingService = schemas['ReportingService'];
/** {@link SecurityRole} */
export declare type SecurityRole = schemas['SecurityRole'];
/** {@link SecurityRoleInfo} */
export declare type SecurityRoleInfo = schemas['SecurityRoleInfo'];
/** {@link SecurityRoleSetting} */
export declare type SecurityRoleSetting = schemas['SecurityRoleSetting'];
/** {@link Service} */
export declare type Service = schemas['Service'];
/** {@link ServiceInfo} */
export declare type ServiceInfo = schemas['ServiceInfo'];
/** {@link SetupScreen} */
export declare type SetupScreen = schemas['SetupScreen'];
/** {@link Skill} */
export declare type Skill = schemas['Skill'];
/** {@link SkillCategory} */
export declare type SkillCategory = schemas['SkillCategory'];
/** {@link SkillInfo} */
export declare type SkillInfo = schemas['SkillInfo'];
/** {@link SsoConfiguration} */
export declare type SsoConfiguration = schemas['SsoConfiguration'];
/** {@link SsoUser} */
export declare type SsoUser = schemas['SsoUser'];
/** {@link StandardNote} */
export declare type StandardNote = schemas['StandardNote'];
/** {@link StandardNoteInfo} */
export declare type StandardNoteInfo = schemas['StandardNoteInfo'];
/** {@link SuccessResponse} */
export declare type SuccessResponse = schemas['SuccessResponse'];
/** {@link Survey} */
export declare type Survey = schemas['Survey'];
/** {@link SurveyInfo} */
export declare type SurveyInfo = schemas['SurveyInfo'];
/** {@link SurveyQuestion} */
export declare type SurveyQuestion = schemas['SurveyQuestion'];
/** {@link SurveyQuestionValue} */
export declare type SurveyQuestionValue = schemas['SurveyQuestionValue'];
/** {@link SystemSetting} */
export declare type SystemSetting = schemas['SystemSetting'];
/** {@link TimeExpense} */
export declare type TimeExpense = schemas['TimeExpense'];
/** {@link TimeZoneSetup} */
export declare type TimeZoneSetup = schemas['TimeZoneSetup'];
/** {@link TimeZoneSetupInfo} */
export declare type TimeZoneSetupInfo = schemas['TimeZoneSetupInfo'];
/** {@link TodayPageCategory} */
export declare type TodayPageCategory = schemas['TodayPageCategory'];
/** {@link Token} */
export declare type Token = schemas['Token'];
/** {@link Usage} */
export declare type Usage = schemas['Usage'];
/** {@link UserDefinedField} */
export declare type UserDefinedField = schemas['UserDefinedField'];
/** {@link UserDefinedFieldInfo} */
export declare type UserDefinedFieldInfo = schemas['UserDefinedFieldInfo'];
/** {@link Workflow} */
export declare type Workflow = schemas['Workflow'];
/** {@link WorkflowAction} */
export declare type WorkflowAction = schemas['WorkflowAction'];
/** {@link WorkflowActionAutomateParameter} */
export declare type WorkflowActionAutomateParameter = schemas['WorkflowActionAutomateParameter'];
/** {@link WorkflowActionUserDefinedField} */
export declare type WorkflowActionUserDefinedField = schemas['WorkflowActionUserDefinedField'];
/** {@link WorkflowAttachment} */
export declare type WorkflowAttachment = schemas['WorkflowAttachment'];
/** {@link WorkflowEvent} */
export declare type WorkflowEvent = schemas['WorkflowEvent'];
/** {@link WorkflowNotifyType} */
export declare type WorkflowNotifyType = schemas['WorkflowNotifyType'];
/** {@link WorkflowNotifyTypeInfo} */
export declare type WorkflowNotifyTypeInfo = schemas['WorkflowNotifyTypeInfo'];
/** {@link WorkflowTableType} */
export declare type WorkflowTableType = schemas['WorkflowTableType'];
/** {@link WorkflowTableTypeInfo} */
export declare type WorkflowTableTypeInfo = schemas['WorkflowTableTypeInfo'];
/** {@link WorkflowTrigger} */
export declare type WorkflowTrigger = schemas['WorkflowTrigger'];
/** {@link WorkflowTriggerOption} */
export declare type WorkflowTriggerOption = schemas['WorkflowTriggerOption'];
/**
 * @module SystemAPI
 */
/**
 * System module
 * @public
 */
export declare class SystemAPI extends Manage {
    constructor(props: CWMOptions);
    getSystemAllowedfiletypes(params?: CommonParameters): Promise<Array<AllowedFileType>>;
    postSystemAllowedFileTypes(allowedFileType: AllowedFileType): Promise<AllowedFileType>;
    getSystemAllowedfiletypesById(id: number, params?: CommonParameters): Promise<AllowedFileType>;
    deleteSystemAllowedfiletypesById(id: number): Promise<NoContentResponse>;
    putSystemAllowedfiletypesById(id: number, AllowedFileType: AllowedFileType): Promise<AllowedFileType>;
    patchSystemAllowedfiletypesById(id: number, patchOperations: Array<PatchOperation>): Promise<AllowedFileType>;
    getSystemAllowedfiletypesCount(params?: CommonParameters): Promise<Count>;
    getSystemAllowedorigins(params?: CommonParameters): Promise<Array<AllowedOrigin>>;
    postSystemAllowedorigins(origin: AllowedOrigin): Promise<AllowedOrigin>;
    getSystemAllowedoriginsById(id: number, params?: CommonParameters): Promise<AllowedOrigin>;
    deleteSystemAllowedoriginsById(id: number): Promise<NoContentResponse>;
    putSystemAllowedoriginsById(id: number, origin: AllowedOrigin): Promise<AllowedOrigin>;
    patchSystemAllowedoriginsById(id: number, patchOperations: Array<PatchOperation>): Promise<AllowedOrigin>;
    getSystemAllowedoriginsCount(params?: CommonParameters): Promise<Count>;
    getSystemApiMembers(params?: CommonParameters): Promise<Array<ApiMember>>;
    postSystemApiMembers(apiMember: ApiMember): Promise<ApiMember>;
    getSystemApiMembersById(id: number, params?: CommonParameters): Promise<ApiMember>;
    putSystemApiMembersById(id: number, apiMember: ApiMember): Promise<ApiMember>;
    patchSystemApiMembersById(id: number, patchOperations: Array<PatchOperation>): Promise<ApiMember>;
    getSystemApiMembersCount(params?: CommonParameters): Promise<Count>;
    getSystemApiMembersDefault(params?: CommonParameters): Promise<ApiMember>;
    getSystemAudittrail(params?: CommonParameters): Promise<Array<AuditTrailEntry>>;
    getSystemAudittrailCount(params?: CommonParameters): Promise<Count>;
    getSystemAuthAnvils(params?: CommonParameters): Promise<Array<AuthAnvil>>;
    getSystemAuthAnvilsById(id: number, params?: CommonParameters): Promise<AuthAnvil>;
    putSystemAuthAnvilsById(id: number, authAnvil: AuthAnvil): Promise<AuthAnvil>;
    patchSystemAuthAnvilsById(id: number, patchOperations: Array<PatchOperation>): Promise<AuthAnvil>;
    getSystemAuthAnvilsCount(params?: CommonParameters): Promise<Count>;
    getSystemAuthAnvilsTestConnection(params?: CommonParameters): Promise<SuccessResponse>;
    getSystemAutoSyncTime(params?: CommonParameters): Promise<Array<AutoSyncTime>>;
    postSystemAutoSyncTime(autoSyncTime: AutoSyncTime): Promise<AutoSyncTime>;
    getSystemAutoSyncTimeById(id: number, params?: CommonParameters): Promise<AutoSyncTime>;
    deleteSystemAutoSyncTimeById(id: number): Promise<NoContentResponse>;
    putSystemAutoSyncTimeById(id: number, autoSyncTime: AutoSyncTime): Promise<AutoSyncTime>;
    patchSystemAutoSyncTimeById(id: number, patchOperations: Array<PatchOperation>): Promise<AutoSyncTime>;
    getSystemAutoSyncTimeCount(params?: CommonParameters): Promise<Count>;
    postSystemBundles(requests: BundleRequestsCollection): Promise<BundleResultsCollection>;
    postSystemBundlesCount(requests: BundleRequestsCollection): Promise<BundleResultsCollection>;
    getSystemCallbacks(params?: CommonParameters): Promise<Array<CallbackEntry>>;
    postSystemCallbacks(callbackEntry: CallbackEntry): Promise<CallbackEntry>;
    getSystemCallbacksById(id: number, params?: CommonParameters): Promise<CallbackEntry>;
    deleteSystemCallbacksById(id: number): Promise<NoContentResponse>;
    putSystemCallbacksById(id: number, callbackEntry: CallbackEntry): Promise<CallbackEntry>;
    patchSystemCallbacksById(id: number, patchOperations: Array<PatchOperation>): Promise<CallbackEntry>;
    getSystemCallbacksCount(params?: CommonParameters): Promise<Count>;
    getSystemCertifications(params?: CommonParameters): Promise<Array<Certification>>;
    postSystemCertifications(certification: Certification): Promise<Certification>;
    getSystemCertificationsById(id: number, params?: CommonParameters): Promise<Certification>;
    deleteSystemCertificationsById(id: number): Promise<NoContentResponse>;
    putSystemCertificationsById(id: number, certification: Certification): Promise<Certification>;
    patchSystemCertificationsById(id: number, patchOperations: Array<PatchOperation>): Promise<Certification>;
    getSystemCertificationsByIdUsages(id: number, params?: CommonParameters): Promise<Array<Usage>>;
    getSystemCertificationsByIdUsagesList(id: number, params?: CommonParameters): Promise<Array<Usage>>;
    getSystemCertificationsCount(params?: CommonParameters): Promise<Count>;
    getSystemConnectWiseHostedScreens(params?: CommonParameters): Promise<Array<ConnectWiseHostedScreen>>;
    getSystemConnectWiseHostedScreensById(id: number, params?: CommonParameters): Promise<ConnectWiseHostedScreen>;
    getSystemConnectWiseHostedScreensCount(params?: CommonParameters): Promise<Count>;
    getSystemConnectwisehostedsetups(params?: CommonParameters): Promise<Array<ConnectWiseHostedSetup>>;
    postSystemConnectwisehostedsetups(connectWiseHostedSetup: ConnectWiseHostedSetup): Promise<ConnectWiseHostedSetup>;
    getSystemConnectwisehostedsetupsById(id: number, params?: CommonParameters): Promise<ConnectWiseHostedSetup>;
    deleteSystemConnectwisehostedsetupsById(id: number): Promise<NoContentResponse>;
    putSystemConnectwisehostedsetupsById(id: number, connectWiseHostedSetup: ConnectWiseHostedSetup): Promise<ConnectWiseHostedSetup>;
    patchSystemConnectwisehostedsetupsById(id: number, patchOperations: Array<PatchOperation>): Promise<ConnectWiseHostedSetup>;
    getSystemConnectwisehostedsetupsCount(params?: CommonParameters): Promise<Count>;
    getSystemCustomReports(params?: CommonParameters): Promise<Array<CustomReport>>;
    postSystemCustomReports(customReport: CustomReport): Promise<CustomReport>;
    getSystemCustomReportsById(id: number, params?: CommonParameters): Promise<CustomReport>;
    deleteSystemCustomReportsById(id: number): Promise<NoContentResponse>;
    putSystemCustomReportsById(id: number, customReport: CustomReport): Promise<CustomReport>;
    patchSystemCustomReportsById(id: number, patchOperations: Array<PatchOperation>): Promise<CustomReport>;
    getSystemCustomReportsByParentIdParameters(parentId: number, params?: CommonParameters): Promise<Array<CustomReportParameter>>;
    postSystemCustomReportsByParentIdParameters(parentId: number, customReportParameter: CustomReportParameter): Promise<CustomReportParameter>;
    getSystemCustomReportsByParentIdParametersById(id: number, parentId: number, params?: CommonParameters): Promise<CustomReportParameter>;
    deleteSystemCustomReportsByParentIdParametersById(id: number, parentId: number): Promise<NoContentResponse>;
    putSystemCustomReportsByParentIdParametersById(id: number, parentId: number, customReportParameter: CustomReportParameter): Promise<CustomReportParameter>;
    patchSystemCustomReportsByParentIdParametersById(id: number, parentId: number, patchOperations: Array<PatchOperation>): Promise<CustomReportParameter>;
    getSystemCustomReportsByParentIdParametersCount(parentId: number, params?: CommonParameters): Promise<Count>;
    getSystemCustomReportsCount(params?: CommonParameters): Promise<Count>;
    getSystemCwTimeZones(params?: CommonParameters): Promise<Array<CwTimeZone>>;
    getSystemCwTimeZonesById(id: number, params?: CommonParameters): Promise<CwTimeZone>;
    getSystemCwTimeZonesCount(params?: CommonParameters): Promise<Count>;
    getSystemDepartments(params?: CommonParameters): Promise<Array<Department>>;
    postSystemDepartments(department: Department): Promise<Department>;
    getSystemDepartmentsById(id: number, params?: CommonParameters): Promise<Department>;
    deleteSystemDepartmentsById(id: number): Promise<NoContentResponse>;
    putSystemDepartmentsById(id: number, department: Department): Promise<Department>;
    patchSystemDepartmentsById(id: number, patchOperations: Array<PatchOperation>): Promise<Department>;
    getSystemDepartmentsByIdUsages(id: number, params?: CommonParameters): Promise<Array<Usage>>;
    getSystemDepartmentsByIdUsagesList(id: number, params?: CommonParameters): Promise<Array<Usage>>;
    getSystemDepartmentsByParentIdLocations(parentId: number, params?: CommonParameters): Promise<Array<DepartmentLocation>>;
    postSystemDepartmentsByParentIdLocations(parentId: number, departmentLocation: DepartmentLocation): Promise<DepartmentLocation>;
    getSystemDepartmentsByParentIdLocationsById(id: number, parentId: number, params?: CommonParameters): Promise<DepartmentLocation>;
    deleteSystemDepartmentsByParentIdLocationsById(id: number, parentId: number): Promise<NoContentResponse>;
    putSystemDepartmentsByParentIdLocationsById(id: number, parentId: number, departmentLocation: DepartmentLocation): Promise<DepartmentLocation>;
    patchSystemDepartmentsByParentIdLocationsById(id: number, parentId: number, patchOperations: Array<PatchOperation>): Promise<DepartmentLocation>;
    getSystemDepartmentsByParentIdLocationsCount(parentId: number, params?: CommonParameters): Promise<Count>;
    getSystemDepartmentsCount(params?: CommonParameters): Promise<Count>;
    getSystemDocuments(params?: CommonParameters): Promise<Array<DocumentInfo>>;
    postSystemDocuments(documentFormData: DocumentFormData): Promise<DocumentInfo>;
    getSystemDocumentsById(id: number, params?: CommonParameters): Promise<DocumentInfo>;
    deleteSystemDocumentsById(id: number): Promise<NoContentResponse>;
    postSystemDocumentsById(id: number): Promise<DocumentInfo>;
    getSystemDocumentsByIdDownload(id: number, params?: CommonParameters): Promise<string>;
    getSystemDocumentsByIdThumbnail(id: number, params?: CommonParameters): Promise<string>;
    getSystemDocumentsCount(params?: CommonParameters): Promise<Count>;
    getSystemDocumentsUploadsample(params?: CommonParameters): Promise<HTMLResponse>;
    getSystemEmailConnectors(params?: CommonParameters): Promise<Array<EmailConnector>>;
    postSystemEmailConnectors(emailConnector: EmailConnector): Promise<EmailConnector>;
    getSystemEmailConnectorsByGrandparentIdParsingStylesByParentIdParsingRules(parentId: number, grandparentId: number, params?: CommonParameters): Promise<Array<EmailConnectorParsingRule>>;
    postSystemEmailConnectorsByGrandparentIdParsingStylesByParentIdParsingRules(parentId: number, grandparentId: number, emailConnectorParsingRule: EmailConnectorParsingRule): Promise<EmailConnectorParsingRule>;
    getSystemEmailConnectorsByGrandparentIdParsingStylesByParentIdParsingRulesById(id: number, parentId: number, grandparentId: number, params?: CommonParameters): Promise<EmailConnectorParsingRule>;
    deleteSystemEmailConnectorsByGrandparentIdParsingStylesByParentIdParsingRulesById(id: number, parentId: number, grandparentId: number): Promise<NoContentResponse>;
    putSystemEmailConnectorsByGrandparentIdParsingStylesByParentIdParsingRulesById(id: number, parentId: number, grandparentId: number, emailConnectorParsingRule: EmailConnectorParsingRule): Promise<EmailConnectorParsingRule>;
    patchSystemEmailConnectorsByGrandparentIdParsingStylesByParentIdParsingRulesById(id: number, parentId: number, grandparentId: number, patchOperations: Array<PatchOperation>): Promise<EmailConnectorParsingRule>;
    getSystemEmailConnectorsByGrandparentIdParsingStylesByParentIdParsingRulesCount(parentId: number, grandparentId: number, params?: CommonParameters): Promise<Count>;
    getSystemEmailConnectorsById(id: number, params?: CommonParameters): Promise<EmailConnector>;
    deleteSystemEmailConnectorsById(id: number): Promise<NoContentResponse>;
    putSystemEmailConnectorsById(id: number, emailConnector: EmailConnector): Promise<EmailConnector>;
    patchSystemEmailConnectorsById(id: number, patchOperations: Array<PatchOperation>): Promise<EmailConnector>;
    getSystemEmailConnectorsByIdInfo(id: number, params?: CommonParameters): Promise<EmailConnectorInfo>;
    getSystemEmailConnectorsByParentIdParsingStyles(parentId: number, params?: CommonParameters): Promise<Array<EmailConnectorParsingStyle>>;
    postSystemEmailConnectorsByParentIdParsingStyles(parentId: number, emailConnectorParsingStyle: EmailConnectorParsingStyle): Promise<EmailConnectorParsingStyle>;
    getSystemEmailConnectorsByParentIdParsingStylesById(id: number, parentId: number, params?: CommonParameters): Promise<EmailConnectorParsingStyle>;
    deleteSystemEmailConnectorsByParentIdParsingStylesById(id: number, parentId: number): Promise<NoContentResponse>;
    putSystemEmailConnectorsByParentIdParsingStylesById(id: number, parentId: number, emailConnectorParsingStyle: EmailConnectorParsingStyle): Promise<EmailConnectorParsingStyle>;
    patchSystemEmailConnectorsByParentIdParsingStylesById(id: number, parentId: number, patchOperations: Array<PatchOperation>): Promise<EmailConnectorParsingStyle>;
    getSystemEmailConnectorsByParentIdParsingStylesCount(parentId: number, params?: CommonParameters): Promise<Count>;
    getSystemEmailConnectorsCount(params?: CommonParameters): Promise<Count>;
    getSystemEmailConnectorsInfo(params?: CommonParameters): Promise<Array<EmailConnectorInfo>>;
    getSystemEmailConnectorsInfoCount(params?: CommonParameters): Promise<Count>;
    getSystemEmailExclusions(params?: CommonParameters): Promise<Array<EmailExclusion>>;
    postSystemEmailExclusions(emailExclusion: EmailExclusion): Promise<EmailExclusion>;
    getSystemEmailExclusionsById(id: number, params?: CommonParameters): Promise<EmailExclusion>;
    deleteSystemEmailExclusionsById(id: number): Promise<NoContentResponse>;
    putSystemEmailExclusionsById(id: number, emailExclusion: EmailExclusion): Promise<EmailExclusion>;
    patchSystemEmailExclusionsById(id: number, patchOperations: Array<PatchOperation>): Promise<EmailExclusion>;
    getSystemEmailExclusionsCount(params?: CommonParameters): Promise<Count>;
    getSystemEmailTokens(params?: CommonParameters): Promise<Array<EmailToken>>;
    getSystemEmailTokensById(id: number, params?: CommonParameters): Promise<EmailToken>;
    getSystemEmailTokensCount(params?: CommonParameters): Promise<Count>;
    getSystemEPayConfigurations(params?: CommonParameters): Promise<Array<EPayConfiguration>>;
    postSystemEPayConfigurations(ePayConfiguration: EPayConfiguration): Promise<EPayConfiguration>;
    getSystemEPayConfigurationsById(id: number, params?: CommonParameters): Promise<EPayConfiguration>;
    deleteSystemEPayConfigurationsById(id: number): Promise<NoContentResponse>;
    putSystemEPayConfigurationsById(id: number, ePayConfiguration: EPayConfiguration): Promise<EPayConfiguration>;
    patchSystemEPayConfigurationsById(id: number, patchOperations: Array<PatchOperation>): Promise<EPayConfiguration>;
    getSystemEPayConfigurationsCount(params?: CommonParameters): Promise<Count>;
    getSystemExperiments(params?: CommonParameters): Promise<Array<Experiment>>;
    getSystemExperimentsById(id: number, params?: CommonParameters): Promise<Experiment>;
    getSystemExperimentsCount(params?: CommonParameters): Promise<Count>;
    getSystemFileuploadsettings(params?: CommonParameters): Promise<Array<FileUploadSetting>>;
    getSystemFileuploadsettingsById(id: number, params?: CommonParameters): Promise<FileUploadSetting>;
    putSystemFileuploadsettingsById(id: number, companyTypeAssociation: FileUploadSetting): Promise<FileUploadSetting>;
    patchSystemFileuploadsettingsById(id: number, patchOperations: Array<PatchOperation>): Promise<FileUploadSetting>;
    getSystemFileuploadsettingsCount(params?: CommonParameters): Promise<Count>;
    getSystemGoogleemailsetup(params?: CommonParameters): Promise<Array<GoogleEmailSetup>>;
    postSystemGoogleemailsetup(GoogleEmailSetup: GoogleEmailSetup): Promise<GoogleEmailSetup>;
    getSystemGoogleemailsetupById(id: number, params?: CommonParameters): Promise<GoogleEmailSetup>;
    deleteSystemGoogleemailsetupById(id: number): Promise<NoContentResponse>;
    putSystemGoogleemailsetupById(id: number, companyTypeAssociation: GoogleEmailSetup): Promise<GoogleEmailSetup>;
    patchSystemGoogleemailsetupById(id: number, patchOperations: Array<PatchOperation>): Promise<GoogleEmailSetup>;
    postSystemGoogleemailsetupByIdTestConnection(id: number): Promise<SuccessResponse>;
    getSystemGoogleemailsetupCount(params?: CommonParameters): Promise<Count>;
    getSystemImaps(params?: CommonParameters): Promise<Array<Imap>>;
    postSystemImaps(imap: Imap): Promise<Imap>;
    getSystemImapsById(id: number, params?: CommonParameters): Promise<Imap>;
    deleteSystemImapsById(id: number): Promise<NoContentResponse>;
    putSystemImapsById(id: number, imap: Imap): Promise<Imap>;
    patchSystemImapsById(id: number, patchOperations: Array<PatchOperation>): Promise<Imap>;
    getSystemImapsByIdInfo(id: number, params?: CommonParameters): Promise<ImapInfo>;
    getSystemImapsCount(params?: CommonParameters): Promise<Count>;
    getSystemImapsInfo(params?: CommonParameters): Promise<Array<ImapInfo>>;
    getSystemImapsInfoCount(params?: CommonParameters): Promise<Count>;
    postSystemImportMassMaintenanceById(id: number): Promise<ImportMassMaintenance>;
    getSystemInfo(params?: CommonParameters): Promise<Info>;
    getSystemInfoDepartmentlocations(params?: CommonParameters): Promise<Array<DepartmentLocationInfo>>;
    getSystemInfoDepartmentlocationsById(id: number, params?: CommonParameters): Promise<DepartmentLocationInfo>;
    getSystemInfoDepartmentlocationsCount(params?: CommonParameters): Promise<Count>;
    getSystemInfoDepartments(params?: CommonParameters): Promise<Array<DepartmentInfo>>;
    getSystemInfoDepartmentsById(id: number, params?: CommonParameters): Promise<DepartmentInfo>;
    getSystemInfoDepartmentsCount(params?: CommonParameters): Promise<Count>;
    getSystemInfoLinks(params?: CommonParameters): Promise<Array<LinkInfo>>;
    getSystemInfoLinksById(id: number, params?: CommonParameters): Promise<LinkInfo>;
    postSystemInfoLinksByIdResolveurl(id: number, resolveInfo: LinkResolveUrlInfo): Promise<LinkResolveUrlInfo>;
    getSystemInfoLinksCount(params?: CommonParameters): Promise<Count>;
    getSystemInfoLocales(params?: CommonParameters): Promise<Array<LocaleInfo>>;
    getSystemInfoLocalesById(id: number, params?: CommonParameters): Promise<LocaleInfo>;
    getSystemInfoLocalesCount(params?: CommonParameters): Promise<Count>;
    getSystemInfoLocations(params?: CommonParameters): Promise<Array<LocationInfo>>;
    getSystemInfoLocationsById(id: number, params?: CommonParameters): Promise<LocationInfo>;
    getSystemInfoLocationsCount(params?: CommonParameters): Promise<Count>;
    getSystemInfoMembers(params?: CommonParameters): Promise<Array<MemberInfo>>;
    getSystemInfoMembersById(id: number, params?: CommonParameters): Promise<MemberInfo>;
    getSystemInfoMembersmemberIdentifierregextypes(params?: CommonParameters): Promise<MemberInfo>;
    getSystemInfoMembersCount(params?: CommonParameters): Promise<Count>;
    getSystemInfoPersonas(params?: CommonParameters): Promise<Array<PersonasInfo>>;
    getSystemInfoPersonasById(id: number, params?: CommonParameters): Promise<PersonasInfo>;
    getSystemInfoPersonasCount(params?: CommonParameters): Promise<Count>;
    getSystemInfoStandardNotes(params?: CommonParameters): Promise<Array<StandardNoteInfo>>;
    getSystemInfoStandardNotesById(id: number, params?: CommonParameters): Promise<StandardNoteInfo>;
    getSystemInfoStandardNotesCount(params?: CommonParameters): Promise<Count>;
    getSystemInOutBoards(params?: CommonParameters): Promise<Array<InOutBoard>>;
    postSystemInOutBoards(inOutBoard: InOutBoard): Promise<InOutBoard>;
    getSystemInOutBoardsById(id: number, params?: CommonParameters): Promise<InOutBoard>;
    deleteSystemInOutBoardsById(id: number): Promise<NoContentResponse>;
    putSystemInOutBoardsById(id: number, inOutBoard: InOutBoard): Promise<InOutBoard>;
    patchSystemInOutBoardsById(id: number, patchOperations: Array<PatchOperation>): Promise<InOutBoard>;
    getSystemInOutBoardsCount(params?: CommonParameters): Promise<Count>;
    getSystemInOutTypes(params?: CommonParameters): Promise<Array<InOutType>>;
    postSystemInOutTypes(inOutType: InOutType): Promise<InOutType>;
    getSystemInOutTypesById(id: number, params?: CommonParameters): Promise<InOutType>;
    deleteSystemInOutTypesById(id: number): Promise<NoContentResponse>;
    putSystemInOutTypesById(id: number, inOutType: InOutType): Promise<InOutType>;
    patchSystemInOutTypesById(id: number, patchOperations: Array<PatchOperation>): Promise<InOutType>;
    getSystemInOutTypesByIdInfo(id: number, params?: CommonParameters): Promise<InOutTypeInfo>;
    getSystemInOutTypesCount(params?: CommonParameters): Promise<Count>;
    getSystemInOutTypesCountInfo(params?: CommonParameters): Promise<Count>;
    getSystemInOutTypesInfo(params?: CommonParameters): Promise<Array<InOutTypeInfo>>;
    getSystemIntegratorlogins(params?: CommonParameters): Promise<Array<IntegratorLogin>>;
    postSystemIntegratorlogins(integratorLogin: IntegratorLogin): Promise<IntegratorLogin>;
    getSystemIntegratorloginsById(id: number, params?: CommonParameters): Promise<IntegratorLogin>;
    deleteSystemIntegratorloginsById(id: number): Promise<NoContentResponse>;
    putSystemIntegratorloginsById(id: number, integratorLogin: IntegratorLogin): Promise<IntegratorLogin>;
    patchSystemIntegratorloginsById(id: number, patchOperations: Array<PatchOperation>): Promise<IntegratorLogin>;
    getSystemIntegratorloginsCount(params?: CommonParameters): Promise<Count>;
    getSystemIntegratorTags(params?: CommonParameters): Promise<Array<IntegratorTag>>;
    postSystemIntegratorTags(tag: IntegratorTag): Promise<IntegratorTag>;
    getSystemIntegratorTagsById(id: number, params?: CommonParameters): Promise<IntegratorTag>;
    deleteSystemIntegratorTagsById(id: number): Promise<NoContentResponse>;
    putSystemIntegratorTagsById(id: number, tag: IntegratorTag): Promise<IntegratorTag>;
    patchSystemIntegratorTagsById(id: number, patchOperations: Array<PatchOperation>): Promise<IntegratorTag>;
    getSystemIntegratorTagsCount(params?: CommonParameters): Promise<Count>;
    getSystemKpiCategories(params?: CommonParameters): Promise<Array<KPICategory>>;
    getSystemKpiCategoriesById(id: number, params?: CommonParameters): Promise<KPICategory>;
    getSystemKpiCategoriesCount(params?: CommonParameters): Promise<Count>;
    getSystemKpis(params?: CommonParameters): Promise<Array<KPI>>;
    getSystemKpisById(id: number, params?: CommonParameters): Promise<KPI>;
    getSystemKpisCount(params?: CommonParameters): Promise<Count>;
    getSystemLdapConfigurations(params?: CommonParameters): Promise<Array<LdapConfiguration>>;
    postSystemLdapConfigurations(ldapConfiguration: LdapConfiguration): Promise<LdapConfiguration>;
    getSystemLdapConfigurationsById(id: number, params?: CommonParameters): Promise<LdapConfiguration>;
    deleteSystemLdapConfigurationsById(id: number): Promise<NoContentResponse>;
    putSystemLdapConfigurationsById(id: number, ldapConfiguration: LdapConfiguration): Promise<LdapConfiguration>;
    patchSystemLdapConfigurationsById(id: number, patchOperations: Array<PatchOperation>): Promise<LdapConfiguration>;
    getSystemLdapConfigurationsByIdInfo(id: number, params?: CommonParameters): Promise<LdapConfigurationInfo>;
    getSystemLdapConfigurationsCount(params?: CommonParameters): Promise<Count>;
    getSystemLdapConfigurationsInfo(params?: CommonParameters): Promise<Array<LdapConfigurationInfo>>;
    getSystemLdapConfigurationsInfoCount(params?: CommonParameters): Promise<Count>;
    postSystemLdapConfigurationsTestLink(server: LdapConfigurationTestLink): Promise<SuccessResponse>;
    getSystemLinks(params?: CommonParameters): Promise<Array<Link>>;
    postSystemLinks(link: Link): Promise<Link>;
    getSystemLinksById(id: number, params?: CommonParameters): Promise<Link>;
    deleteSystemLinksById(id: number): Promise<NoContentResponse>;
    putSystemLinksById(id: number, link: Link): Promise<Link>;
    patchSystemLinksById(id: number, patchOperations: Array<PatchOperation>): Promise<Link>;
    getSystemLinksCount(params?: CommonParameters): Promise<Count>;
    getSystemLocations(params?: CommonParameters): Promise<Array<Location>>;
    postSystemLocations(location: Location): Promise<Location>;
    getSystemLocationsById(id: number, params?: CommonParameters): Promise<Location>;
    deleteSystemLocationsById(id: number): Promise<NoContentResponse>;
    putSystemLocationsById(id: number, location: Location): Promise<Location>;
    patchSystemLocationsById(id: number, patchOperations: Array<PatchOperation>): Promise<Location>;
    getSystemLocationsByIdUsages(id: number, params?: CommonParameters): Promise<Array<Usage>>;
    getSystemLocationsByIdUsagesList(id: number, params?: CommonParameters): Promise<Array<Usage>>;
    getSystemLocationsByParentIdDepartments(parentId: number, params?: CommonParameters): Promise<Array<LocationDepartment>>;
    getSystemLocationsByParentIdDepartmentsById(id: number, parentId: number, params?: CommonParameters): Promise<LocationDepartment>;
    getSystemLocationsByParentIdDepartmentsCount(parentId: number, params?: CommonParameters): Promise<Count>;
    getSystemLocationsByParentIdWorkRoles(parentId: number, params?: CommonParameters): Promise<Array<LocationWorkRole>>;
    getSystemLocationsByParentIdWorkRolesById(id: number, parentId: number, params?: CommonParameters): Promise<LocationWorkRole>;
    getSystemLocationsByParentIdWorkRolesCount(parentId: number, params?: CommonParameters): Promise<Count>;
    getSystemLocationsCount(params?: CommonParameters): Promise<Count>;
    getSystemManagementNetworkSecurities(params?: CommonParameters): Promise<Array<ManagementNetworkSecurity>>;
    postSystemManagementNetworkSecurities(managementNetworkSecurity: ManagementNetworkSecurity): Promise<ManagementNetworkSecurity>;
    getSystemManagementNetworkSecuritiesById(id: number, params?: CommonParameters): Promise<ManagementNetworkSecurity>;
    deleteSystemManagementNetworkSecuritiesById(id: number): Promise<NoContentResponse>;
    putSystemManagementNetworkSecuritiesById(id: number, managementNetworkSecurity: ManagementNetworkSecurity): Promise<ManagementNetworkSecurity>;
    patchSystemManagementNetworkSecuritiesById(id: number, patchOperations: Array<PatchOperation>): Promise<ManagementNetworkSecurity>;
    getSystemManagementNetworkSecuritiesByIdTestCredentials(id: number, params?: CommonParameters): Promise<SuccessResponse>;
    getSystemManagementNetworkSecuritiesCount(params?: CommonParameters): Promise<Count>;
    getSystemMarketplaceimportGetdefinitionById(id: number, params?: CommonParameters): Promise<MarketplaceImport>;
    postSystemMarketplaceimportImport(marketplaceImport: MarketplaceImport): Promise<MarketplaceImport>;
    getSystemMembers(params?: CommonParameters): Promise<Array<Member>>;
    postSystemMembers(member: Member): Promise<Member>;
    getSystemMembersById(id: number, params?: CommonParameters): Promise<Member>;
    putSystemMembersById(id: number, member: Member): Promise<Member>;
    patchSystemMembersById(id: number, patchOperations: Array<PatchOperation>): Promise<Member>;
    postSystemMembersByIdDeactivate(id: number, item: MemberDeactivation): Promise<MemberDeactivation>;
    getSystemMembersByIdImage(id: number, useDefaultFlag: boolean, lastmodified: string, params?: CommonParameters): Promise<OctetStreamResponse>;
    postSystemMembersByIdLinkSsoUser(id: number, item: MemberLinkSsoUser): Promise<SuccessResponse>;
    postSystemMembersByIdSubmit(id: number, item: MemberSsoToken): Promise<SuccessResponse>;
    postSystemMembersByIdUnlinkSsoUser(id: number): Promise<SuccessResponse>;
    deleteSystemMembersByIdUnusedTimeSheets(id: number): Promise<NoContentResponse>;
    getSystemMembersByIdUsages(id: number, params?: CommonParameters): Promise<Array<Usage>>;
    getSystemMembersByIdUsagesList(id: number, params?: CommonParameters): Promise<Array<Usage>>;
    getSystemMembersmemberIdentifierregextypes(memberIdentifier: string, params?: CommonParameters): Promise<Member>;
    postSystemMembersByMemberIdentifierTokens(memberIdentifier: string): Promise<Token>;
    getSystemMembersByParentIdAccruals(parentId: number, params?: CommonParameters): Promise<Array<MemberAccrual>>;
    postSystemMembersByParentIdAccruals(parentId: number, memberAccrual: MemberAccrual): Promise<MemberAccrual>;
    getSystemMembersByParentIdAccrualsById(id: number, parentId: number, params?: CommonParameters): Promise<MemberAccrual>;
    deleteSystemMembersByParentIdAccrualsById(id: number, parentId: number): Promise<NoContentResponse>;
    putSystemMembersByParentIdAccrualsById(id: number, parentId: number, memberAccrual: MemberAccrual): Promise<MemberAccrual>;
    patchSystemMembersByParentIdAccrualsById(id: number, parentId: number, patchOperations: Array<PatchOperation>): Promise<MemberAccrual>;
    getSystemMembersByParentIdAccrualsCount(parentId: number, params?: CommonParameters): Promise<Count>;
    getSystemMembersByParentIdCertifications(parentId: number, params?: CommonParameters): Promise<Array<MemberCertification>>;
    postSystemMembersByParentIdCertifications(parentId: number, memberCertification: MemberCertification): Promise<MemberCertification>;
    getSystemMembersByParentIdCertificationsById(id: number, parentId: number, params?: CommonParameters): Promise<MemberCertification>;
    deleteSystemMembersByParentIdCertificationsById(id: number, parentId: number): Promise<NoContentResponse>;
    putSystemMembersByParentIdCertificationsById(id: number, parentId: number, memberCertification: MemberCertification): Promise<MemberCertification>;
    patchSystemMembersByParentIdCertificationsById(id: number, parentId: number, patchOperations: Array<PatchOperation>): Promise<MemberCertification>;
    getSystemMembersByParentIdCertificationsCount(parentId: number, params?: CommonParameters): Promise<Count>;
    getSystemMembersByParentIdDelegations(parentId: number, params?: CommonParameters): Promise<Array<MemberDelegation>>;
    postSystemMembersByParentIdDelegations(parentId: number, memberDelegation: MemberDelegation): Promise<MemberDelegation>;
    getSystemMembersByParentIdDelegationsById(id: number, parentId: number, params?: CommonParameters): Promise<MemberDelegation>;
    deleteSystemMembersByParentIdDelegationsById(id: number, parentId: number): Promise<NoContentResponse>;
    putSystemMembersByParentIdDelegationsById(id: number, parentId: number, memberDelegation: MemberDelegation): Promise<MemberDelegation>;
    patchSystemMembersByParentIdDelegationsById(id: number, parentId: number, patchOperations: Array<PatchOperation>): Promise<MemberDelegation>;
    getSystemMembersByParentIdDelegationsCount(parentId: number, params?: CommonParameters): Promise<Count>;
    getSystemMembersByParentIdManagedDeviceAccounts(parentId: number, params?: CommonParameters): Promise<Array<ManagedDeviceAccount>>;
    deleteSystemMembersByParentIdManagedDeviceAccountsBulk(parentId: number, managedDeviceAccounts: IdCollection): Promise<BulkResult>;
    putSystemMembersByParentIdManagedDeviceAccountsBulk(parentId: number, managedDeviceAccounts: Array<ManagedDeviceAccount>): Promise<BulkResult>;
    getSystemMembersByParentIdMycertifications(parentId: number, params?: CommonParameters): Promise<Array<MemberCertification>>;
    postSystemMembersByParentIdMycertifications(parentId: number, memberCertification: MemberCertification): Promise<MemberCertification>;
    getSystemMembersByParentIdMycertificationsById(id: number, parentId: number, params?: CommonParameters): Promise<MemberCertification>;
    deleteSystemMembersByParentIdMycertificationsById(id: number, parentId: number): Promise<NoContentResponse>;
    putSystemMembersByParentIdMycertificationsById(id: number, parentId: number, memberCertification: MemberCertification): Promise<MemberCertification>;
    patchSystemMembersByParentIdMycertificationsById(id: number, parentId: number, patchOperations: Array<PatchOperation>): Promise<MemberCertification>;
    getSystemMembersByParentIdMycertificationsCount(parentId: number, params?: CommonParameters): Promise<Count>;
    getSystemMembersByParentIdNotificationSettings(parentId: number, params?: CommonParameters): Promise<Array<MemberNotificationSetting>>;
    postSystemMembersByParentIdNotificationSettings(parentId: number, memberNotificationSetting: MemberNotificationSetting): Promise<MemberNotificationSetting>;
    getSystemMembersByParentIdNotificationSettingsById(id: number, parentId: number, params?: CommonParameters): Promise<MemberNotificationSetting>;
    deleteSystemMembersByParentIdNotificationSettingsById(id: number, parentId: number): Promise<NoContentResponse>;
    putSystemMembersByParentIdNotificationSettingsById(id: number, parentId: number, memberNotificationSetting: MemberNotificationSetting): Promise<MemberNotificationSetting>;
    patchSystemMembersByParentIdNotificationSettingsById(id: number, parentId: number, patchOperations: Array<PatchOperation>): Promise<MemberNotificationSetting>;
    getSystemMembersByParentIdNotificationSettingsCount(parentId: number, params?: CommonParameters): Promise<Count>;
    getSystemMembersByParentIdPersonas(parentId: number, params?: CommonParameters): Promise<Array<MemberPersona>>;
    getSystemMembersByParentIdPersonasById(id: number, parentId: number, params?: CommonParameters): Promise<MemberPersona>;
    getSystemMembersByParentIdPersonasCount(parentId: number, params?: CommonParameters): Promise<Count>;
    getSystemMembersByParentIdSkills(parentId: number, params?: CommonParameters): Promise<Array<MemberSkill>>;
    postSystemMembersByParentIdSkills(parentId: number, memberSkill: MemberSkill): Promise<MemberSkill>;
    getSystemMembersByParentIdSkillsById(id: number, parentId: number, params?: CommonParameters): Promise<MemberSkill>;
    deleteSystemMembersByParentIdSkillsById(id: number, parentId: number): Promise<NoContentResponse>;
    putSystemMembersByParentIdSkillsById(id: number, parentId: number, memberSkill: MemberSkill): Promise<MemberSkill>;
    patchSystemMembersByParentIdSkillsById(id: number, parentId: number, patchOperations: Array<PatchOperation>): Promise<MemberSkill>;
    getSystemMembersByParentIdSkillsCount(parentId: number, params?: CommonParameters): Promise<Count>;
    getSystemMembersCount(params?: CommonParameters): Promise<Count>;
    getSystemMembersTypes(params?: CommonParameters): Promise<Array<MemberType>>;
    postSystemMembersTypes(type: MemberType): Promise<MemberType>;
    getSystemMembersTypesById(id: number, params?: CommonParameters): Promise<MemberType>;
    deleteSystemMembersTypesById(id: number): Promise<NoContentResponse>;
    putSystemMembersTypesById(id: number, type: MemberType): Promise<MemberType>;
    patchSystemMembersTypesById(id: number, patchOperations: Array<PatchOperation>): Promise<MemberType>;
    getSystemMembersTypesByIdInfo(id: number, params?: CommonParameters): Promise<MemberTypeInfo>;
    getSystemMembersTypesCount(params?: CommonParameters): Promise<Count>;
    getSystemMembersTypesInfo(params?: CommonParameters): Promise<Array<MemberTypeInfo>>;
    getSystemMembersTypesInfoCount(params?: CommonParameters): Promise<Count>;
    getSystemMembersWithSso(params?: CommonParameters): Promise<Array<Member>>;
    getSystemMenuentries(params?: CommonParameters): Promise<Array<MenuEntry>>;
    postSystemMenuentries(menuEntry: MenuEntry): Promise<MenuEntry>;
    getSystemMenuentriesById(id: number, params?: CommonParameters): Promise<MenuEntry>;
    deleteSystemMenuentriesById(id: number): Promise<NoContentResponse>;
    putSystemMenuentriesById(id: number, menuEntry: MenuEntry): Promise<MenuEntry>;
    patchSystemMenuentriesById(id: number, patchOperations: Array<PatchOperation>): Promise<MenuEntry>;
    getSystemMenuentriesByIdImage(id: number, lastmodified: string, largeFlag: boolean, params?: CommonParameters): Promise<OctetStreamResponse>;
    postSystemMenuentriesByIdImage(id: number): Promise<NoContentResponse>;
    getSystemMenuEntriesByParentIdLocations(parentId: number, params?: CommonParameters): Promise<Array<MenuEntryLocation>>;
    postSystemMenuEntriesByParentIdLocations(parentId: number, menuEntryLocation: MenuEntryLocation): Promise<MenuEntryLocation>;
    getSystemMenuEntriesByParentIdLocationsById(id: number, parentId: number, params?: CommonParameters): Promise<MenuEntryLocation>;
    deleteSystemMenuEntriesByParentIdLocationsById(id: number, parentId: number): Promise<NoContentResponse>;
    getSystemMenuEntriesByParentIdLocationsCount(parentId: number, params?: CommonParameters): Promise<Count>;
    getSystemMenuentriesCount(params?: CommonParameters): Promise<Count>;
    getSystemMyAccountById(id: number, params?: CommonParameters): Promise<MyAccount>;
    putSystemMyAccountById(id: number, myAccount: MyAccount): Promise<MyAccount>;
    patchSystemMyAccountById(id: number, patchOperations: Array<PatchOperation>): Promise<MyAccount>;
    getSystemMyAccountByParentIdDelegations(parentId: number, params?: CommonParameters): Promise<Array<MemberDelegation>>;
    postSystemMyAccountByParentIdDelegations(parentId: number, memberDelegation: MemberDelegation): Promise<MemberDelegation>;
    getSystemMyAccountByParentIdDelegationsById(id: number, parentId: number, params?: CommonParameters): Promise<MemberDelegation>;
    deleteSystemMyAccountByParentIdDelegationsById(id: number, parentId: number): Promise<NoContentResponse>;
    putSystemMyAccountByParentIdDelegationsById(id: number, parentId: number, memberDelegation: MemberDelegation): Promise<MemberDelegation>;
    patchSystemMyAccountByParentIdDelegationsById(id: number, parentId: number, patchOperations: Array<PatchOperation>): Promise<MemberDelegation>;
    getSystemMyAccountByParentIdDelegationsCount(parentId: number, params?: CommonParameters): Promise<Count>;
    getSystemMyAccountByParentIdSkills(parentId: number, params?: CommonParameters): Promise<Array<MemberSkill>>;
    postSystemMyAccountByParentIdSkills(parentId: number, memberSkill: MemberSkill): Promise<MemberSkill>;
    getSystemMyAccountByParentIdSkillsById(id: number, parentId: number, params?: CommonParameters): Promise<MemberSkill>;
    deleteSystemMyAccountByParentIdSkillsById(id: number, parentId: number): Promise<NoContentResponse>;
    putSystemMyAccountByParentIdSkillsById(id: number, parentId: number, memberSkill: MemberSkill): Promise<MemberSkill>;
    patchSystemMyAccountByParentIdSkillsById(id: number, parentId: number, patchOperations: Array<PatchOperation>): Promise<MemberSkill>;
    getSystemMyAccountByParentIdSkillsCount(parentId: number, params?: CommonParameters): Promise<Count>;
    getSystemMyCompanyCorporateStructure(params?: CommonParameters): Promise<Array<CorporateStructure>>;
    getSystemMyCompanyCorporateStructureById(id: number, params?: CommonParameters): Promise<CorporateStructure>;
    putSystemMyCompanyCorporateStructureById(id: number, corporateStructure: CorporateStructure): Promise<CorporateStructure>;
    patchSystemMyCompanyCorporateStructureById(id: number, patchOperations: Array<PatchOperation>): Promise<CorporateStructure>;
    getSystemMyCompanyCorporateStructureByIdInfo(id: number, params?: CommonParameters): Promise<CorporateStructureInfo>;
    getSystemMyCompanyCorporateStructureCount(params?: CommonParameters): Promise<Count>;
    getSystemMyCompanyCorporateStructureInfo(params?: CommonParameters): Promise<Array<CorporateStructureInfo>>;
    getSystemMyCompanyCorporateStructureInfoCount(params?: CommonParameters): Promise<Count>;
    getSystemMyCompanyCorporateStructureLevels(params?: CommonParameters): Promise<Array<CorporateStructureLevel>>;
    getSystemMyCompanyCorporateStructureLevelsById(id: number, params?: CommonParameters): Promise<CorporateStructureLevel>;
    getSystemMyCompanyCorporateStructureLevelsCount(params?: CommonParameters): Promise<Count>;
    getSystemMyCompanyCrm(params?: CommonParameters): Promise<Array<Crm>>;
    getSystemMyCompanyCrmById(id: number, params?: CommonParameters): Promise<Crm>;
    putSystemMyCompanyCrmById(id: number, crm: Crm): Promise<Crm>;
    patchSystemMyCompanyCrmById(id: number, patchOperations: Array<PatchOperation>): Promise<Crm>;
    getSystemMyCompanyCrmByIdInfo(id: number, params?: CommonParameters): Promise<CrmInfo>;
    getSystemMyCompanyCrmCount(params?: CommonParameters): Promise<Count>;
    getSystemMyCompanyCrmInfo(params?: CommonParameters): Promise<Array<CrmInfo>>;
    getSystemMyCompanyCrmInfoCount(params?: CommonParameters): Promise<Count>;
    getSystemMycompanyDocuments(params?: CommonParameters): Promise<Array<DocumentSetup>>;
    getSystemMycompanyDocumentsById(id: number, params?: CommonParameters): Promise<DocumentSetup>;
    putSystemMycompanyDocumentsById(id: number, document: DocumentSetup): Promise<DocumentSetup>;
    patchSystemMycompanyDocumentsById(id: number, patchOperations: Array<PatchOperation>): Promise<DocumentSetup>;
    getSystemMycompanyInfoServices(params?: CommonParameters): Promise<Array<ServiceInfo>>;
    getSystemMycompanyInfoServicesById(id: number, params?: CommonParameters): Promise<ServiceInfo>;
    getSystemMyCompanyOther(params?: CommonParameters): Promise<Array<Other>>;
    getSystemMyCompanyOtherById(id: number, params?: CommonParameters): Promise<Other>;
    putSystemMyCompanyOtherById(id: number, other: Other): Promise<Other>;
    patchSystemMyCompanyOtherById(id: number, patchOperations: Array<PatchOperation>): Promise<Other>;
    getSystemMyCompanyOtherCount(params?: CommonParameters): Promise<Count>;
    getSystemMycompanyReportingServices(params?: CommonParameters): Promise<Array<ReportingService>>;
    getSystemMycompanyReportingServicesById(id: number, params?: CommonParameters): Promise<ReportingService>;
    putSystemMycompanyReportingServicesById(id: number, service: ReportingService): Promise<ReportingService>;
    patchSystemMycompanyReportingServicesById(id: number, patchOperations: Array<PatchOperation>): Promise<ReportingService>;
    postSystemMycompanyReportingServicesByIdTestConnection(id: number): Promise<SuccessResponse>;
    getSystemMycompanyServices(params?: CommonParameters): Promise<Array<Service>>;
    getSystemMycompanyServicesById(id: number, params?: CommonParameters): Promise<Service>;
    putSystemMycompanyServicesById(id: number, service: Service): Promise<Service>;
    patchSystemMycompanyServicesById(id: number, patchOperations: Array<PatchOperation>): Promise<Service>;
    getSystemMyCompanyTimeExpense(params?: CommonParameters): Promise<Array<TimeExpense>>;
    getSystemMyCompanyTimeExpenseById(id: number, params?: CommonParameters): Promise<TimeExpense>;
    putSystemMyCompanyTimeExpenseById(id: number, timeExpense: TimeExpense): Promise<TimeExpense>;
    patchSystemMyCompanyTimeExpenseById(id: number, patchOperations: Array<PatchOperation>): Promise<TimeExpense>;
    getSystemMyCompanyTimeExpenseCount(params?: CommonParameters): Promise<Count>;
    getSystemMyMembers(params?: CommonParameters): Promise<MyMember>;
    getSystemMyMembersInfo(params?: CommonParameters): Promise<MyMemberInfo>;
    getSystemMySecurity(params?: CommonParameters): Promise<Array<MySecurity>>;
    getSystemMySecurityCustomizeItems(params?: CommonParameters): Promise<Array<MySecurityCustomizeItem>>;
    getSystemNotificationRecipients(params?: CommonParameters): Promise<Array<NotificationRecipient>>;
    getSystemNotificationRecipientsById(id: number, params?: CommonParameters): Promise<NotificationRecipient>;
    getSystemNotificationRecipientsCount(params?: CommonParameters): Promise<Count>;
    getSystemOffice365EmailSetups(params?: CommonParameters): Promise<Array<Office365EmailSetup>>;
    postSystemOffice365EmailSetups(entity: Office365EmailSetup): Promise<Office365EmailSetup>;
    getSystemOffice365EmailSetupsById(id: number, params?: CommonParameters): Promise<Office365EmailSetup>;
    deleteSystemOffice365EmailSetupsById(id: number): Promise<NoContentResponse>;
    putSystemOffice365EmailSetupsById(id: number, entity: Office365EmailSetup): Promise<Office365EmailSetup>;
    patchSystemOffice365EmailSetupsById(id: number, patchOperations: Array<PatchOperation>): Promise<Office365EmailSetup>;
    postSystemOffice365EmailSetupsByIdAuthorize(id: number): Promise<SuccessResponse>;
    postSystemOffice365EmailSetupsByIdTestConnection(id: number): Promise<SuccessResponse>;
    getSystemOffice365EmailSetupsCount(params?: CommonParameters): Promise<Count>;
    getSystemOsgradeweights(params?: CommonParameters): Promise<Array<OsGradeWeight>>;
    getSystemOsgradeweightsById(id: number, params?: CommonParameters): Promise<OsGradeWeight>;
    putSystemOsgradeweightsById(id: number, osGradeWeight: OsGradeWeight): Promise<OsGradeWeight>;
    patchSystemOsgradeweightsById(id: number, patchOperations: Array<PatchOperation>): Promise<OsGradeWeight>;
    getSystemOsgradeweightsCount(params?: CommonParameters): Promise<Count>;
    getSystemParsingTypes(params?: CommonParameters): Promise<Array<ParsingType>>;
    getSystemParsingTypesById(id: number, params?: CommonParameters): Promise<ParsingType>;
    getSystemParsingTypesCount(params?: CommonParameters): Promise<Count>;
    getSystemParsingVariables(params?: CommonParameters): Promise<Array<ParsingVariable>>;
    getSystemParsingVariablesById(id: number, params?: CommonParameters): Promise<ParsingVariable>;
    getSystemParsingVariablesCount(params?: CommonParameters): Promise<Count>;
    getSystemPortalReports(params?: CommonParameters): Promise<Array<PortalReport>>;
    postSystemPortalReports(portalReport: PortalReport): Promise<PortalReport>;
    getSystemPortalReportsById(id: number, params?: CommonParameters): Promise<PortalReport>;
    deleteSystemPortalReportsById(id: number): Promise<NoContentResponse>;
    putSystemPortalReportsById(id: number, portalReport: PortalReport): Promise<PortalReport>;
    patchSystemPortalReportsById(id: number, patchOperations: Array<PatchOperation>): Promise<PortalReport>;
    getSystemPortalReportsCount(params?: CommonParameters): Promise<Count>;
    getSystemQuoteLinkSetup(params?: CommonParameters): Promise<Array<QuoteLink>>;
    postSystemQuoteLinkSetup(quoteLink: QuoteLink): Promise<QuoteLink>;
    getSystemQuoteLinkSetupById(id: number, params?: CommonParameters): Promise<QuoteLink>;
    deleteSystemQuoteLinkSetupById(id: number): Promise<NoContentResponse>;
    putSystemQuoteLinkSetupById(id: number, quoteLink: QuoteLink): Promise<QuoteLink>;
    patchSystemQuoteLinkSetupById(id: number, patchOperations: Array<PatchOperation>): Promise<QuoteLink>;
    getSystemQuoteLinkSetupCount(params?: CommonParameters): Promise<Count>;
    getSystemQuoteLinkSetupTestConnection(url: string, params?: CommonParameters): Promise<SuccessResponse>;
    getSystemReportCards(params?: CommonParameters): Promise<Array<ReportCard>>;
    postSystemReportCards(reportCard: ReportCard): Promise<ReportCard>;
    getSystemReportCardsById(id: number, params?: CommonParameters): Promise<ReportCard>;
    deleteSystemReportCardsById(id: number): Promise<NoContentResponse>;
    putSystemReportCardsById(id: number, reportCard: ReportCard): Promise<ReportCard>;
    patchSystemReportCardsById(id: number, patchOperations: Array<PatchOperation>): Promise<ReportCard>;
    getSystemReportCardsByIdInfo(id: number, params?: CommonParameters): Promise<ReportCardInfo>;
    getSystemReportCardsByParentIdDetails(parentId: number, params?: CommonParameters): Promise<Array<ReportCardDetail>>;
    postSystemReportCardsByParentIdDetails(parentId: number, reportCardDetail: ReportCardDetail): Promise<ReportCardDetail>;
    getSystemReportCardsByParentIdDetailsById(id: number, parentId: number, params?: CommonParameters): Promise<ReportCardDetail>;
    deleteSystemReportCardsByParentIdDetailsById(id: number, parentId: number): Promise<NoContentResponse>;
    putSystemReportCardsByParentIdDetailsById(id: number, parentId: number, reportCardDetail: ReportCardDetail): Promise<ReportCardDetail>;
    patchSystemReportCardsByParentIdDetailsById(id: number, parentId: number, patchOperations: Array<PatchOperation>): Promise<ReportCardDetail>;
    getSystemReportCardsByParentIdDetailsCount(parentId: number, params?: CommonParameters): Promise<Count>;
    getSystemReportCardsCount(params?: CommonParameters): Promise<Count>;
    getSystemReportCardsInfo(params?: CommonParameters): Promise<Array<ReportCardInfo>>;
    getSystemReportCardsInfoCount(params?: CommonParameters): Promise<Count>;
    getSystemReports(params?: CommonParameters): Promise<Array<Report>>;
    getSystemReportsByReportName(reportName: string, params?: CommonParameters): Promise<ReportDataResponse>;
    getSystemReportsByReportNameColumns(reportName: string, params?: CommonParameters): Promise<Array<ReportColumnDefinition>>;
    getSystemReportsByReportNameCount(reportName: string, params?: CommonParameters): Promise<Count>;
    getSystemSecurityroles(params?: CommonParameters): Promise<Array<SecurityRole>>;
    postSystemSecurityroles(securityRole: SecurityRole): Promise<SecurityRole>;
    getSystemSecurityrolesById(id: number, params?: CommonParameters): Promise<SecurityRole>;
    deleteSystemSecurityrolesById(id: number): Promise<NoContentResponse>;
    getSystemSecurityrolesByIdInfo(id: number, params?: CommonParameters): Promise<SecurityRoleInfo>;
    getSystemSecurityRolesByParentIdSettings(parentId: number, params?: CommonParameters): Promise<Array<SecurityRoleSetting>>;
    getSystemSecurityRolesByParentIdSettingsById(id: number, parentId: number, params?: CommonParameters): Promise<SecurityRoleSetting>;
    getSystemSecurityRolesByParentIdSettingsCount(parentId: number, params?: CommonParameters): Promise<Count>;
    getSystemSecurityrolesCount(params?: CommonParameters): Promise<Count>;
    getSystemSecurityrolesInfo(params?: CommonParameters): Promise<Array<SecurityRoleInfo>>;
    getSystemSecurityrolesInfoCount(params?: CommonParameters): Promise<Count>;
    getSystemSettings(params?: CommonParameters): Promise<Array<SystemSetting>>;
    getSystemSettingsById(id: number, params?: CommonParameters): Promise<SystemSetting>;
    putSystemSettingsById(id: number, systemSetting: SystemSetting): Promise<SystemSetting>;
    patchSystemSettingsById(id: number, patchOperations: Array<PatchOperation>): Promise<SystemSetting>;
    getSystemSettingsCount(params?: CommonParameters): Promise<Count>;
    getSystemSetupScreens(params?: CommonParameters): Promise<Array<SetupScreen>>;
    getSystemSetupScreensById(id: number, params?: CommonParameters): Promise<SetupScreen>;
    getSystemSetupScreensCount(params?: CommonParameters): Promise<Count>;
    getSystemSkillCategories(params?: CommonParameters): Promise<Array<SkillCategory>>;
    postSystemSkillCategories(skillCategory: SkillCategory): Promise<SkillCategory>;
    getSystemSkillCategoriesById(id: number, params?: CommonParameters): Promise<SkillCategory>;
    deleteSystemSkillCategoriesById(id: number): Promise<NoContentResponse>;
    putSystemSkillCategoriesById(id: number, skillCategory: SkillCategory): Promise<SkillCategory>;
    patchSystemSkillCategoriesById(id: number, patchOperations: Array<PatchOperation>): Promise<SkillCategory>;
    getSystemSkillCategoriesCount(params?: CommonParameters): Promise<Count>;
    getSystemSkills(params?: CommonParameters): Promise<Array<Skill>>;
    postSystemSkills(skill: Skill): Promise<Skill>;
    getSystemSkillsById(id: number, params?: CommonParameters): Promise<Skill>;
    deleteSystemSkillsById(id: number): Promise<NoContentResponse>;
    putSystemSkillsById(id: number, skill: Skill): Promise<Skill>;
    patchSystemSkillsById(id: number, patchOperations: Array<PatchOperation>): Promise<Skill>;
    getSystemSkillsByIdInfo(id: number, params?: CommonParameters): Promise<SkillInfo>;
    getSystemSkillsCount(params?: CommonParameters): Promise<Count>;
    getSystemSkillsInfo(params?: CommonParameters): Promise<Array<SkillInfo>>;
    getSystemSkillsInfoCount(params?: CommonParameters): Promise<Count>;
    getSystemSsoConfigurations(params?: CommonParameters): Promise<Array<SsoConfiguration>>;
    postSystemSsoConfigurations(ssoConfiguration: SsoConfiguration): Promise<SsoConfiguration>;
    getSystemSsoConfigurationsById(id: number, params?: CommonParameters): Promise<SsoConfiguration>;
    putSystemSsoConfigurationsById(id: number, ssoConfiguration: SsoConfiguration): Promise<SsoConfiguration>;
    patchSystemSsoConfigurationsById(id: number, patchOperations: Array<PatchOperation>): Promise<SsoConfiguration>;
    deleteSystemSsoConfigurationsById(id: number): Promise<NoContentResponse>;
    postSystemSsoConfigurationsByIdRegistertoken(id: number, ssoConfiguration: SsoConfiguration): Promise<SsoConfiguration>;
    postSystemSsoConfigurationsByIdSubmitmembers(id: number, ssoConfiguration: SsoConfiguration): Promise<SsoConfiguration>;
    getSystemSsoConfigurationsCount(params?: CommonParameters): Promise<Count>;
    getSystemSsoUsers(params?: CommonParameters): Promise<Array<SsoUser>>;
    getSystemSsoUsersByExternalId(externalId: number, params?: CommonParameters): Promise<SsoUser>;
    getSystemSsoUsersCount(params?: CommonParameters): Promise<Count>;
    getSystemStandardNotes(params?: CommonParameters): Promise<Array<StandardNote>>;
    postSystemStandardNotes(standardNote: StandardNote): Promise<StandardNote>;
    getSystemStandardNotesById(id: number, params?: CommonParameters): Promise<StandardNote>;
    deleteSystemStandardNotesById(id: number): Promise<NoContentResponse>;
    putSystemStandardNotesById(id: number, standardNote: StandardNote): Promise<StandardNote>;
    patchSystemStandardNotesById(id: number, patchOperations: Array<PatchOperation>): Promise<StandardNote>;
    getSystemStandardNotesCount(params?: CommonParameters): Promise<Count>;
    getSystemSurveys(params?: CommonParameters): Promise<Array<Survey>>;
    postSystemSurveys(survey: Survey): Promise<Survey>;
    getSystemSurveysByGrandparentIdQuestionsByParentIdValues(parentId: number, grandparentId: number, params?: CommonParameters): Promise<Array<SurveyQuestionValue>>;
    postSystemSurveysByGrandparentIdQuestionsByParentIdValues(parentId: number, grandparentId: number, surveyQuestionValue: SurveyQuestionValue): Promise<SurveyQuestionValue>;
    getSystemSurveysByGrandparentIdQuestionsByParentIdValuesById(id: number, parentId: number, grandparentId: number, params?: CommonParameters): Promise<SurveyQuestionValue>;
    deleteSystemSurveysByGrandparentIdQuestionsByParentIdValuesById(id: number, parentId: number, grandparentId: number): Promise<NoContentResponse>;
    putSystemSurveysByGrandparentIdQuestionsByParentIdValuesById(id: number, parentId: number, grandparentId: number, surveyQuestionValue: SurveyQuestionValue): Promise<SurveyQuestionValue>;
    patchSystemSurveysByGrandparentIdQuestionsByParentIdValuesById(id: number, parentId: number, grandparentId: number, patchOperations: Array<PatchOperation>): Promise<SurveyQuestionValue>;
    getSystemSurveysById(id: number, params?: CommonParameters): Promise<Survey>;
    deleteSystemSurveysById(id: number): Promise<NoContentResponse>;
    putSystemSurveysById(id: number, survey: Survey): Promise<Survey>;
    patchSystemSurveysById(id: number, patchOperations: Array<PatchOperation>): Promise<Survey>;
    postSystemSurveysByIdCopy(id: number): Promise<Survey>;
    getSystemSurveysByIdInfo(id: number, params?: CommonParameters): Promise<SurveyInfo>;
    getSystemSurveysByParentIdQuestions(parentId: number, params?: CommonParameters): Promise<Array<SurveyQuestion>>;
    postSystemSurveysByParentIdQuestions(parentId: number, surveyQuestion: SurveyQuestion): Promise<SurveyQuestion>;
    getSystemSurveysByParentIdQuestionsById(id: number, parentId: number, params?: CommonParameters): Promise<SurveyQuestion>;
    deleteSystemSurveysByParentIdQuestionsById(id: number, parentId: number): Promise<NoContentResponse>;
    putSystemSurveysByParentIdQuestionsById(id: number, parentId: number, surveyQuestion: SurveyQuestion): Promise<SurveyQuestion>;
    patchSystemSurveysByParentIdQuestionsById(id: number, parentId: number, patchOperations: Array<PatchOperation>): Promise<SurveyQuestion>;
    getSystemSurveysByParentIdQuestionsCount(parentId: number, params?: CommonParameters): Promise<Count>;
    getSystemSurveysCount(params?: CommonParameters): Promise<Count>;
    getSystemSurveysInfo(params?: CommonParameters): Promise<Array<SurveyInfo>>;
    getSystemSurveysInfoCount(params?: CommonParameters): Promise<Count>;
    getSystemTimeZoneSetups(params?: CommonParameters): Promise<Array<TimeZoneSetup>>;
    postSystemTimeZoneSetups(timeZoneSetup: TimeZoneSetup): Promise<TimeZoneSetup>;
    getSystemTimeZoneSetupsById(id: number, params?: CommonParameters): Promise<TimeZoneSetup>;
    putSystemTimeZoneSetupsById(id: number, timeZoneSetup: TimeZoneSetup): Promise<TimeZoneSetup>;
    patchSystemTimeZoneSetupsById(id: number, patchOperations: Array<PatchOperation>): Promise<TimeZoneSetup>;
    deleteSystemTimeZoneSetupsById(id: number): Promise<NoContentResponse>;
    getSystemTimeZoneSetupsByIdInfo(id: number, params?: CommonParameters): Promise<TimeZoneSetupInfo>;
    getSystemTimeZoneSetupsCount(params?: CommonParameters): Promise<Count>;
    getSystemTimeZoneSetupsInfo(params?: CommonParameters): Promise<Array<TimeZoneSetupInfo>>;
    getSystemTimeZoneSetupsInfoCount(params?: CommonParameters): Promise<Count>;
    getSystemTodayPageCategories(params?: CommonParameters): Promise<Array<TodayPageCategory>>;
    postSystemTodayPageCategories(todayPageCategory: TodayPageCategory): Promise<TodayPageCategory>;
    getSystemTodayPageCategoriesById(id: number, params?: CommonParameters): Promise<TodayPageCategory>;
    deleteSystemTodayPageCategoriesById(id: number): Promise<NoContentResponse>;
    putSystemTodayPageCategoriesById(id: number, todayPageCategory: TodayPageCategory): Promise<TodayPageCategory>;
    patchSystemTodayPageCategoriesById(id: number, patchOperations: Array<PatchOperation>): Promise<TodayPageCategory>;
    getSystemTodayPageCategoriesCount(params?: CommonParameters): Promise<Count>;
    getSystemUserDefinedFields(params?: CommonParameters): Promise<Array<UserDefinedField>>;
    postSystemUserDefinedFields(userDefinedField: UserDefinedField): Promise<UserDefinedField>;
    getSystemUserDefinedFieldsById(id: number, params?: CommonParameters): Promise<UserDefinedField>;
    deleteSystemUserDefinedFieldsById(id: number): Promise<NoContentResponse>;
    putSystemUserDefinedFieldsById(id: number, userDefinedField: UserDefinedField): Promise<UserDefinedField>;
    patchSystemUserDefinedFieldsById(id: number, patchOperations: Array<PatchOperation>): Promise<UserDefinedField>;
    getSystemUserDefinedFieldsByIdInfo(id: number, params?: CommonParameters): Promise<UserDefinedFieldInfo>;
    getSystemUserDefinedFieldsCount(params?: CommonParameters): Promise<Count>;
    getSystemUserDefinedFieldsInfo(params?: CommonParameters): Promise<Array<UserDefinedFieldInfo>>;
    getSystemUserDefinedFieldsInfoCount(params?: CommonParameters): Promise<Count>;
    getSystemWorkflowActionsByParentIdAutomateParameters(parentId: number, params?: CommonParameters): Promise<Array<WorkflowActionAutomateParameter>>;
    postSystemWorkflowActionsByParentIdAutomateParameters(parentId: number, workflowActionAutomateParameter: WorkflowActionAutomateParameter): Promise<WorkflowActionAutomateParameter>;
    getSystemWorkflowActionsByParentIdAutomateParametersById(id: number, parentId: number, params?: CommonParameters): Promise<WorkflowActionAutomateParameter>;
    deleteSystemWorkflowActionsByParentIdAutomateParametersById(id: number, parentId: number): Promise<NoContentResponse>;
    putSystemWorkflowActionsByParentIdAutomateParametersById(id: number, parentId: number, workflowActionAutomateParameter: WorkflowActionAutomateParameter): Promise<WorkflowActionAutomateParameter>;
    patchSystemWorkflowActionsByParentIdAutomateParametersById(id: number, parentId: number, patchOperations: Array<PatchOperation>): Promise<WorkflowActionAutomateParameter>;
    getSystemWorkflowActionsByParentIdAutomateParametersCount(parentId: number, params?: CommonParameters): Promise<Count>;
    getSystemWorkflows(params?: CommonParameters): Promise<Array<Workflow>>;
    postSystemWorkflows(workflow: Workflow): Promise<Workflow>;
    getSystemWorkflowsByGrandparentIdEventsByParentIdActions(parentId: number, grandparentId: number, params?: CommonParameters): Promise<Array<WorkflowAction>>;
    postSystemWorkflowsByGrandparentIdEventsByParentIdActions(parentId: number, grandparentId: number, workflowAction: WorkflowAction): Promise<WorkflowAction>;
    getSystemWorkflowsByGrandparentIdEventsByParentIdActionsById(id: number, parentId: number, grandparentId: number, params?: CommonParameters): Promise<WorkflowAction>;
    deleteSystemWorkflowsByGrandparentIdEventsByParentIdActionsById(id: number, parentId: number, grandparentId: number): Promise<NoContentResponse>;
    putSystemWorkflowsByGrandparentIdEventsByParentIdActionsById(id: number, parentId: number, grandparentId: number, workflowAction: WorkflowAction): Promise<WorkflowAction>;
    patchSystemWorkflowsByGrandparentIdEventsByParentIdActionsById(id: number, parentId: number, grandparentId: number, patchOperations: Array<PatchOperation>): Promise<WorkflowAction>;
    getSystemWorkflowsByGrandparentIdEventsByParentIdActionsCount(parentId: number, grandparentId: number, params?: CommonParameters): Promise<Count>;
    getSystemWorkflowsByGrandparentIdTriggersByParentIdOptions(parentId: number, grandparentId: number, params?: CommonParameters): Promise<Array<WorkflowTriggerOption>>;
    getSystemWorkflowsByGrandparentIdTriggersByParentIdOptionsCount(parentId: number, grandparentId: number, params?: CommonParameters): Promise<Count>;
    getSystemWorkflowsById(id: number, params?: CommonParameters): Promise<Workflow>;
    deleteSystemWorkflowsById(id: number): Promise<NoContentResponse>;
    putSystemWorkflowsById(id: number, workflow: Workflow): Promise<Workflow>;
    patchSystemWorkflowsById(id: number, patchOperations: Array<PatchOperation>): Promise<Workflow>;
    postSystemWorkflowsByIdCopy(id: number): Promise<Workflow>;
    getSystemWorkflowsByParentIdAttachments(parentId: number, params?: CommonParameters): Promise<Array<WorkflowAttachment>>;
    getSystemWorkflowsByParentIdAttachmentsById(id: number, parentId: number, params?: CommonParameters): Promise<WorkflowAttachment>;
    getSystemWorkflowsByParentIdAttachmentsCount(parentId: number, params?: CommonParameters): Promise<Count>;
    getSystemWorkflowsByParentIdEvents(parentId: number, params?: CommonParameters): Promise<Array<WorkflowEvent>>;
    postSystemWorkflowsByParentIdEvents(parentId: number, workflowEvent: WorkflowEvent): Promise<WorkflowEvent>;
    getSystemWorkflowsByParentIdEventsById(id: number, parentId: number, params?: CommonParameters): Promise<WorkflowEvent>;
    deleteSystemWorkflowsByParentIdEventsById(id: number, parentId: number): Promise<NoContentResponse>;
    putSystemWorkflowsByParentIdEventsById(id: number, parentId: number, workflowEvent: WorkflowEvent): Promise<WorkflowEvent>;
    patchSystemWorkflowsByParentIdEventsById(id: number, parentId: number, patchOperations: Array<PatchOperation>): Promise<WorkflowEvent>;
    postSystemWorkflowsByParentIdEventsByIdCopy(id: number, parentId: number): Promise<WorkflowEvent>;
    getSystemWorkflowsByParentIdEventsByIdTest(id: number, parentId: number, params?: CommonParameters): Promise<Array<object>>;
    getSystemWorkflowsByParentIdEventsCount(parentId: number, params?: CommonParameters): Promise<Count>;
    getSystemWorkflowsByParentIdNotifyTypes(parentId: number, params?: CommonParameters): Promise<Array<WorkflowNotifyType>>;
    getSystemWorkflowsByParentIdNotifyTypesById(id: number, parentId: number, params?: CommonParameters): Promise<WorkflowNotifyType>;
    getSystemWorkflowsByParentIdNotifyTypesByIdInfo(id: number, parentId: number, params?: CommonParameters): Promise<WorkflowNotifyTypeInfo>;
    getSystemWorkflowsByParentIdNotifyTypesCount(parentId: number, params?: CommonParameters): Promise<Count>;
    getSystemWorkflowsByParentIdNotifyTypesInfo(parentId: number, params?: CommonParameters): Promise<Array<WorkflowNotifyTypeInfo>>;
    getSystemWorkflowsByParentIdNotifyTypesInfoCount(parentId: number, params?: CommonParameters): Promise<Count>;
    getSystemWorkflowsByParentIdTriggers(parentId: number, params?: CommonParameters): Promise<Array<WorkflowTrigger>>;
    getSystemWorkflowsByParentIdTriggersCount(parentId: number, params?: CommonParameters): Promise<Count>;
    getSystemWorkflowsCount(params?: CommonParameters): Promise<Count>;
    getSystemWorkflowsTableTypes(params?: CommonParameters): Promise<Array<WorkflowTableType>>;
    getSystemWorkflowsTableTypesById(id: number, params?: CommonParameters): Promise<WorkflowTableType>;
    getSystemWorkflowsTableTypesByIdInfo(id: number, params?: CommonParameters): Promise<WorkflowTableTypeInfo>;
    getSystemWorkflowsTableTypesCount(params?: CommonParameters): Promise<Count>;
    getSystemWorkflowsTableTypesInfo(params?: CommonParameters): Promise<Array<WorkflowTableTypeInfo>>;
    getSystemWorkflowsTableTypesInfoCount(params?: CommonParameters): Promise<Count>;
    putSystemWorkflowsUserdefinedfieldsById(id: number, workflowActionUserDefinedField: WorkflowActionUserDefinedField): Promise<WorkflowActionUserDefinedField>;
    patchSystemWorkflowsUserdefinedfieldsById(id: number, patchOperations: Array<PatchOperation>): Promise<WorkflowActionUserDefinedField>;
    deleteSystemWorkflowsUserdefinedfieldsActionsByParentId(parentId: number): Promise<NoContentResponse>;
    postSystemWorkflowsUserdefinedfieldsEventsByGrandparentId(grandparentId: number, workflowActionUserDefinedField: WorkflowActionUserDefinedField): Promise<WorkflowActionUserDefinedField>;
    getSystemWorkflowsUserdefinedfieldsByGrandparentIdActionsByParentId(parentId: number, grandparentId: number, params?: CommonParameters): Promise<Array<WorkflowActionUserDefinedField>>;
}
export {};
//# sourceMappingURL=SystemAPI.d.ts.map