import Manage from '../Manage';
import { components } from '../ManageTypes';
import { CommonParameters, CWMOptions } from '../ManageAPI';
import { NoContentResponse } from '../types';
declare type schemas = components['schemas'];
/** {@link ActivityStopwatch} */
export declare type ActivityStopwatch = schemas['ActivityStopwatch'];
/** {@link ChargeCode} */
export declare type ChargeCode = schemas['ChargeCode'];
/** {@link ChargeCodeExpenseType} */
export declare type ChargeCodeExpenseType = schemas['ChargeCodeExpenseType'];
/** {@link ChargeCodeInfo} */
export declare type ChargeCodeInfo = schemas['ChargeCodeInfo'];
/** {@link Count} */
export declare type Count = schemas['Count'];
/** {@link PatchOperation} */
export declare type PatchOperation = schemas['PatchOperation'];
/** {@link ScheduleStopwatch} */
export declare type ScheduleStopwatch = schemas['ScheduleStopwatch'];
/** {@link SuccessResponse} */
export declare type SuccessResponse = schemas['SuccessResponse'];
/** {@link TicketStopwatch} */
export declare type TicketStopwatch = schemas['TicketStopwatch'];
/** {@link TimeAccrual} */
export declare type TimeAccrual = schemas['TimeAccrual'];
/** {@link TimeAccrualDetail} */
export declare type TimeAccrualDetail = schemas['TimeAccrualDetail'];
/** {@link TimeEntry} */
export declare type TimeEntry = schemas['TimeEntry'];
/** {@link TimeEntryAudit} */
export declare type TimeEntryAudit = schemas['TimeEntryAudit'];
/** {@link TimePeriod} */
export declare type TimePeriod = schemas['TimePeriod'];
/** {@link TimePeriodSetup} */
export declare type TimePeriodSetup = schemas['TimePeriodSetup'];
/** {@link TimePeriodSetupDefaults} */
export declare type TimePeriodSetupDefaults = schemas['TimePeriodSetupDefaults'];
/** {@link TimeSheet} */
export declare type TimeSheet = schemas['TimeSheet'];
/** {@link TimeSheetAudit} */
export declare type TimeSheetAudit = schemas['TimeSheetAudit'];
/** {@link TimeSheetTierUpdate} */
export declare type TimeSheetTierUpdate = schemas['TimeSheetTierUpdate'];
/** {@link Usage} */
export declare type Usage = schemas['Usage'];
/** {@link WorkRole} */
export declare type WorkRole = schemas['WorkRole'];
/** {@link WorkRoleInfo} */
export declare type WorkRoleInfo = schemas['WorkRoleInfo'];
/** {@link WorkRoleLocation} */
export declare type WorkRoleLocation = schemas['WorkRoleLocation'];
/** {@link WorkType} */
export declare type WorkType = schemas['WorkType'];
/** {@link WorkTypeInfo} */
export declare type WorkTypeInfo = schemas['WorkTypeInfo'];
/**
 * @module TimeAPI
 */
/**
 * Time module
 * @public
 */
export declare class TimeAPI extends Manage {
    constructor(props: CWMOptions);
    getTimeAccruals(params?: CommonParameters): Promise<Array<TimeAccrual>>;
    postTimeAccruals(timeAccrual: TimeAccrual): Promise<TimeAccrual>;
    getTimeAccrualsById(id: number, params?: CommonParameters): Promise<TimeAccrual>;
    deleteTimeAccrualsById(id: number): Promise<NoContentResponse>;
    putTimeAccrualsById(id: number, timeAccrual: TimeAccrual): Promise<TimeAccrual>;
    patchTimeAccrualsById(id: number, patchOperations: Array<PatchOperation>): Promise<TimeAccrual>;
    getTimeAccrualsByParentIdDetails(parentId: number, params?: CommonParameters): Promise<Array<TimeAccrualDetail>>;
    postTimeAccrualsByParentIdDetails(parentId: number, timeAccrualDetail: TimeAccrualDetail): Promise<TimeAccrualDetail>;
    getTimeAccrualsByParentIdDetailsById(id: number, parentId: number, params?: CommonParameters): Promise<TimeAccrualDetail>;
    deleteTimeAccrualsByParentIdDetailsById(id: number, parentId: number): Promise<NoContentResponse>;
    putTimeAccrualsByParentIdDetailsById(id: number, parentId: number, timeAccrualDetail: TimeAccrualDetail): Promise<TimeAccrualDetail>;
    patchTimeAccrualsByParentIdDetailsById(id: number, parentId: number, patchOperations: Array<PatchOperation>): Promise<TimeAccrualDetail>;
    getTimeAccrualsByParentIdDetailsCount(parentId: number, params?: CommonParameters): Promise<Count>;
    getTimeAccrualsCount(params?: CommonParameters): Promise<Count>;
    getTimeActivitystopwatches(params?: CommonParameters): Promise<Array<ActivityStopwatch>>;
    postTimeActivitystopwatches(activityStopwatch: ActivityStopwatch): Promise<ActivityStopwatch>;
    getTimeActivitystopwatchesById(id: number, params?: CommonParameters): Promise<ActivityStopwatch>;
    deleteTimeActivitystopwatchesById(id: number): Promise<NoContentResponse>;
    putTimeActivitystopwatchesById(id: number, activityStopwatch: ActivityStopwatch): Promise<ActivityStopwatch>;
    patchTimeActivitystopwatchesById(id: number, patchOperations: Array<PatchOperation>): Promise<ActivityStopwatch>;
    getTimeActivitystopwatchesCount(params?: CommonParameters): Promise<Count>;
    getTimeChargeCodes(params?: CommonParameters): Promise<Array<ChargeCode>>;
    postTimeChargeCodes(chargeCode: ChargeCode): Promise<ChargeCode>;
    getTimeChargeCodesById(id: number, params?: CommonParameters): Promise<ChargeCode>;
    deleteTimeChargeCodesById(id: number): Promise<NoContentResponse>;
    putTimeChargeCodesById(id: number, chargeCode: ChargeCode): Promise<ChargeCode>;
    patchTimeChargeCodesById(id: number, patchOperations: Array<PatchOperation>): Promise<ChargeCode>;
    getTimeChargeCodesByIdInfo(id: number, params?: CommonParameters): Promise<ChargeCodeInfo>;
    getTimeChargeCodesByIdUsages(id: number, params?: CommonParameters): Promise<Array<Usage>>;
    getTimeChargeCodesByIdUsagesList(id: number, params?: CommonParameters): Promise<Array<Usage>>;
    getTimeChargeCodesByParentIdExpenseTypes(parentId: number, params?: CommonParameters): Promise<Array<ChargeCodeExpenseType>>;
    postTimeChargeCodesByParentIdExpenseTypes(parentId: number, chargeCodeExpenseType: ChargeCodeExpenseType): Promise<ChargeCodeExpenseType>;
    getTimeChargeCodesByParentIdExpenseTypesById(id: number, parentId: number, params?: CommonParameters): Promise<ChargeCodeExpenseType>;
    deleteTimeChargeCodesByParentIdExpenseTypesById(id: number, parentId: number): Promise<NoContentResponse>;
    putTimeChargeCodesByParentIdExpenseTypesById(id: number, parentId: number, chargeCodeExpenseType: ChargeCodeExpenseType): Promise<ChargeCodeExpenseType>;
    patchTimeChargeCodesByParentIdExpenseTypesById(id: number, parentId: number, patchOperations: Array<PatchOperation>): Promise<ChargeCodeExpenseType>;
    getTimeChargeCodesByParentIdExpenseTypesCount(parentId: number, params?: CommonParameters): Promise<Count>;
    getTimeChargeCodesCount(params?: CommonParameters): Promise<Count>;
    getTimeChargeCodesInfo(params?: CommonParameters): Promise<Array<ChargeCodeInfo>>;
    getTimeChargeCodesInfoCount(params?: CommonParameters): Promise<Count>;
    getTimeEntries(params?: CommonParameters): Promise<Array<TimeEntry>>;
    postTimeEntries(timeEntry: TimeEntry): Promise<TimeEntry>;
    getTimeEntriesById(id: number, params?: CommonParameters): Promise<TimeEntry>;
    deleteTimeEntriesById(id: number): Promise<NoContentResponse>;
    putTimeEntriesById(id: number, timeEntry: TimeEntry): Promise<TimeEntry>;
    patchTimeEntriesById(id: number, patchOperations: Array<PatchOperation>): Promise<TimeEntry>;
    getTimeEntriesByParentIdAudits(parentId: number, params?: CommonParameters): Promise<Array<TimeEntryAudit>>;
    getTimeEntriesByParentIdAuditsById(id: number, parentId: number, params?: CommonParameters): Promise<TimeEntryAudit>;
    getTimeEntriesByParentIdAuditsCount(parentId: number, params?: CommonParameters): Promise<Count>;
    getTimeEntriesCount(params?: CommonParameters): Promise<Count>;
    postTimeEntriesDefaults(timeEntry: TimeEntry): Promise<TimeEntry>;
    getTimeInfoChargeCodeExpenseTypes(params?: CommonParameters): Promise<Array<ChargeCodeExpenseType>>;
    getTimeInfoChargeCodeExpenseTypesCount(params?: CommonParameters): Promise<Count>;
    getTimeSchedulestopwatches(params?: CommonParameters): Promise<Array<ScheduleStopwatch>>;
    postTimeSchedulestopwatches(scheduleStopwatch: ScheduleStopwatch): Promise<ScheduleStopwatch>;
    getTimeSchedulestopwatchesById(id: number, params?: CommonParameters): Promise<ScheduleStopwatch>;
    deleteTimeSchedulestopwatchesById(id: number): Promise<NoContentResponse>;
    putTimeSchedulestopwatchesById(id: number, scheduleStopwatch: ScheduleStopwatch): Promise<ScheduleStopwatch>;
    patchTimeSchedulestopwatchesById(id: number, patchOperations: Array<PatchOperation>): Promise<ScheduleStopwatch>;
    getTimeSchedulestopwatchesCount(params?: CommonParameters): Promise<Count>;
    getTimeSheets(params?: CommonParameters): Promise<Array<TimeSheet>>;
    getTimeSheetsById(id: number, params?: CommonParameters): Promise<TimeSheet>;
    postTimeSheetsByIdApprove(id: number, sheetId: TimeSheetTierUpdate): Promise<SuccessResponse>;
    postTimeSheetsByIdReject(id: number): Promise<SuccessResponse>;
    postTimeSheetsByIdReverse(id: number): Promise<SuccessResponse>;
    postTimeSheetsByIdSubmit(id: number): Promise<SuccessResponse>;
    getTimeSheetsByParentIdAudits(parentId: number, params?: CommonParameters): Promise<Array<TimeSheetAudit>>;
    getTimeSheetsByParentIdAuditsById(id: number, parentId: number, params?: CommonParameters): Promise<TimeSheetAudit>;
    getTimeSheetsByParentIdAuditsCount(parentId: number, params?: CommonParameters): Promise<Count>;
    getTimeSheetsCount(params?: CommonParameters): Promise<Count>;
    getTimeTicketstopwatches(params?: CommonParameters): Promise<Array<TicketStopwatch>>;
    postTimeTicketstopwatches(ticketStopwatch: TicketStopwatch): Promise<TicketStopwatch>;
    getTimeTicketstopwatchesById(id: number, params?: CommonParameters): Promise<TicketStopwatch>;
    deleteTimeTicketstopwatchesById(id: number): Promise<NoContentResponse>;
    putTimeTicketstopwatchesById(id: number, ticketStopwatch: TicketStopwatch): Promise<TicketStopwatch>;
    patchTimeTicketstopwatchesById(id: number, patchOperations: Array<PatchOperation>): Promise<TicketStopwatch>;
    getTimeTicketstopwatchesCount(params?: CommonParameters): Promise<Count>;
    getTimeTimePeriodSetups(params?: CommonParameters): Promise<Array<TimePeriodSetup>>;
    postTimeTimePeriodSetups(timePeriodSetup: TimePeriodSetup): Promise<TimePeriodSetup>;
    getTimeTimePeriodSetupsById(id: number, params?: CommonParameters): Promise<TimePeriodSetup>;
    deleteTimeTimePeriodSetupsById(id: number): Promise<NoContentResponse>;
    putTimeTimePeriodSetupsById(id: number, timePeriodSetup: TimePeriodSetup): Promise<TimePeriodSetup>;
    patchTimeTimePeriodSetupsById(id: number, patchOperations: Array<PatchOperation>): Promise<TimePeriodSetup>;
    getTimeTimePeriodSetupsByParentIdPeriods(parentId: number, params?: CommonParameters): Promise<Array<TimePeriod>>;
    getTimeTimePeriodSetupsByParentIdPeriodsById(id: number, parentId: number, params?: CommonParameters): Promise<TimePeriod>;
    getTimeTimePeriodSetupsByParentIdPeriodsCount(parentId: number, params?: CommonParameters): Promise<Count>;
    getTimeTimePeriodSetupsCount(params?: CommonParameters): Promise<Count>;
    getTimeTimePeriodSetupsDefault(params?: CommonParameters): Promise<TimePeriodSetupDefaults>;
    getTimeWorkRoles(params?: CommonParameters): Promise<Array<WorkRole>>;
    postTimeWorkRoles(workRole: WorkRole): Promise<WorkRole>;
    getTimeWorkRolesById(id: number, params?: CommonParameters): Promise<WorkRole>;
    deleteTimeWorkRolesById(id: number): Promise<NoContentResponse>;
    putTimeWorkRolesById(id: number, workRole: WorkRole): Promise<WorkRole>;
    patchTimeWorkRolesById(id: number, patchOperations: Array<PatchOperation>): Promise<WorkRole>;
    getTimeWorkRolesByIdInfo(id: number, params?: CommonParameters): Promise<WorkRoleInfo>;
    getTimeWorkRolesByIdUsages(id: number, params?: CommonParameters): Promise<Array<Usage>>;
    getTimeWorkRolesByIdUsagesList(id: number, params?: CommonParameters): Promise<Array<Usage>>;
    getTimeWorkRolesByParentIdLocations(parentId: number, params?: CommonParameters): Promise<Array<WorkRoleLocation>>;
    postTimeWorkRolesByParentIdLocations(parentId: number, workRoleLocation: WorkRoleLocation): Promise<WorkRoleLocation>;
    getTimeWorkRolesByParentIdLocationsById(id: number, parentId: number, params?: CommonParameters): Promise<WorkRoleLocation>;
    deleteTimeWorkRolesByParentIdLocationsById(id: number, parentId: number): Promise<NoContentResponse>;
    putTimeWorkRolesByParentIdLocationsById(id: number, parentId: number, workRoleLocation: WorkRoleLocation): Promise<WorkRoleLocation>;
    patchTimeWorkRolesByParentIdLocationsById(id: number, parentId: number, patchOperations: Array<PatchOperation>): Promise<WorkRoleLocation>;
    getTimeWorkRolesByParentIdLocationsCount(parentId: number, params?: CommonParameters): Promise<Count>;
    getTimeWorkRolesCount(params?: CommonParameters): Promise<Count>;
    getTimeWorkRolesInfo(params?: CommonParameters): Promise<Array<WorkRoleInfo>>;
    getTimeWorkRolesInfoCount(params?: CommonParameters): Promise<Count>;
    getTimeWorkTypes(params?: CommonParameters): Promise<Array<WorkType>>;
    postTimeWorkTypes(workType: WorkType): Promise<WorkType>;
    getTimeWorkTypesById(id: number, params?: CommonParameters): Promise<WorkType>;
    deleteTimeWorkTypesById(id: number): Promise<NoContentResponse>;
    putTimeWorkTypesById(id: number, workType: WorkType): Promise<WorkType>;
    patchTimeWorkTypesById(id: number, patchOperations: Array<PatchOperation>): Promise<WorkType>;
    getTimeWorkTypesByIdInfo(id: number, params?: CommonParameters): Promise<WorkTypeInfo>;
    getTimeWorkTypesByIdUsages(id: number, params?: CommonParameters): Promise<Array<Usage>>;
    getTimeWorkTypesByIdUsagesList(id: number, params?: CommonParameters): Promise<Array<Usage>>;
    getTimeWorkTypesCount(params?: CommonParameters): Promise<Count>;
    getTimeWorkTypesInfo(params?: CommonParameters): Promise<Array<WorkTypeInfo>>;
    getTimeWorkTypesInfoCount(params?: CommonParameters): Promise<Count>;
}
export {};
//# sourceMappingURL=TimeAPI.d.ts.map