/// <reference types="node" />
import type * as ManageAPIs from './ManageAPI';
import type * as AutomateApis from './AutomateAPI';
export declare enum StatusCode {
    OK = 200,
    Created = 201,
    Accepted = 202,
    NoContent = 204,
    MovedPermanently = 301,
    BadRequest = 400,
    Unauthorized = 401,
    Forbidden = 403,
    NotFound = 404,
    TooManyRequests = 429,
    InternalServerError = 500,
    BadGateway = 502,
    ServiceUnavailable = 503,
    GatewayTimeout = 504
}
export declare type Methods = 'get' | 'put' | 'delete' | 'post' | 'patch';
export declare type RetryOptions = {
    minTimeout: number;
    retries: number;
    maxTimeout: number;
    randomize: boolean;
    factor?: number;
};
export declare type RequestOptions = {
    path: string;
    method?: Methods;
    params?: Record<string, unknown>;
    data?: Record<string, unknown> | Record<string, unknown>[] | PatchOperation[] | null | string | number | undefined;
};
export declare type LoggingLevels = 'error' | 'warn' | 'info' | 'debug';
export declare type CWLogger = (level: LoggingLevels, text: string, meta?: Record<string, unknown>) => void;
export declare type DataResponse = Record<string, unknown> | Record<string, unknown>[] | string | number | null | undefined;
export declare type ErrorResponse = {
    status: number | string;
    data: DataResponse;
    message: string;
};
export declare type NoContentResponse = undefined;
export declare type OctetStreamResponse = Buffer;
export declare type PDFResponse = Blob;
export declare type HTMLResponse = string;
export declare type PatchOperation = ManageAPIs.PatchOperation;
export type { ManageAPIs, AutomateApis };
//# sourceMappingURL=types.d.ts.map