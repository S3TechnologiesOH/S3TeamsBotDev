export declare type PromiseLikeFunction = (() => Promise<unknown>) | Promise<unknown> | (() => unknown) | {
    then: () => void;
};
/**
 * @public
 */
export declare type SeriesOptions = {
    series: Array<PromiseLikeFunction>;
    concurrent?: number;
    delay?: number;
};
/**
 *
 * @param options - options object
 * @param options.series - functions or promises to be executed
 * @param options.concurrent - number of concurrent requests
 * @param options.delay - number of ms between request groups
 * @returns array of promise results
 * @public
 *
 * @example
 * ```javascript
 *    const results = await Series.all({
 *      series: [
 *        () => true,
 *        new Promise((resolve) => resolve(true),
 *        () => new Promise((resolve) => resolve(true)
 *      ],
 *      concurrent: 3,
 *      delay: 10,
 *    })
 * ```
 */
declare function all({ series, concurrent, delay }: SeriesOptions): Promise<Array<unknown>>;
/**
 * @public
 */
declare const Series: {
    all: typeof all;
};
export default Series;
//# sourceMappingURL=Series.d.ts.map